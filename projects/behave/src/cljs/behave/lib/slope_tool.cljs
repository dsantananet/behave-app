(ns behave.lib.slope-tool)

;; Auto-generated by hatchet ðŸª“

(defn init []
  (js/Module.SIGSlopeTool.))

(defn calculateHorizontalDistance [self]
  (.calculateHorizontalDistance self))

(defn calculateSlopeFromMapMeasurements [self]
  (.calculateSlopeFromMapMeasurements self))

(defn getCentimetersPerKilometerAtIndex [self index]
  (.getCentimetersPerKilometerAtIndex self index))

(defn getCentimetersPerKilometerAtRepresentativeFraction [self representativeFraction]
  (.getCentimetersPerKilometerAtRepresentativeFraction self representativeFraction))

(defn getHorizontalDistance [self horizontalDistanceIndex mapDistanceUnits]
  (.getHorizontalDistance self horizontalDistanceIndex mapDistanceUnits))

(defn getHorizontalDistanceAtIndex [self index mapDistanceUnits]
  (.getHorizontalDistanceAtIndex self index mapDistanceUnits))

(defn getHorizontalDistanceFifteen [self mapDistanceUnits]
  (.getHorizontalDistanceFifteen self mapDistanceUnits))

(defn getHorizontalDistanceFourtyFive [self mapDistanceUnits]
  (.getHorizontalDistanceFourtyFive self mapDistanceUnits))

(defn getHorizontalDistanceMaxSlope [self slopeUnits]
  (.getHorizontalDistanceMaxSlope self slopeUnits))

(defn getHorizontalDistanceNinety [self mapDistanceUnits]
  (.getHorizontalDistanceNinety self mapDistanceUnits))

(defn getHorizontalDistanceSeventy [self mapDistanceUnits]
  (.getHorizontalDistanceSeventy self mapDistanceUnits))

(defn getHorizontalDistanceSixty [self mapDistanceUnits]
  (.getHorizontalDistanceSixty self mapDistanceUnits))

(defn getHorizontalDistanceThirty [self mapDistanceUnits]
  (.getHorizontalDistanceThirty self mapDistanceUnits))

(defn getHorizontalDistanceZero [self mapDistanceUnits]
  (.getHorizontalDistanceZero self mapDistanceUnits))

(defn getInchesPerMileAtIndex [self index]
  (.getInchesPerMileAtIndex self index))

(defn getInchesPerMileAtRepresentativeFraction [self representativeFraction]
  (.getInchesPerMileAtRepresentativeFraction self representativeFraction))

(defn getKilometersPerCentimeterAtIndex [self index]
  (.getKilometersPerCentimeterAtIndex self index))

(defn getKilometersPerCentimeterAtRepresentativeFraction [self representativeFraction]
  (.getKilometersPerCentimeterAtRepresentativeFraction self representativeFraction))

(defn getMilesPerInchAtIndex [self index]
  (.getMilesPerInchAtIndex self index))

(defn getMilesPerInchAtRepresentativeFraction [self representativeFraction]
  (.getMilesPerInchAtRepresentativeFraction self representativeFraction))

(defn getNumberOfHorizontalDistances [self]
  (.getNumberOfHorizontalDistances self))

(defn getNumberOfRepresentativeFractions [self]
  (.getNumberOfRepresentativeFractions self))

(defn getRepresentativeFractionAtIndex [self index]
  (.getRepresentativeFractionAtIndex self index))

(defn getRepresentativeFractionAtRepresentativeFraction [self representativeFraction]
  (.getRepresentativeFractionAtRepresentativeFraction self representativeFraction))

(defn getSlopeElevationChangeFromMapMeasurements [self elevationUnits]
  (.getSlopeElevationChangeFromMapMeasurements self elevationUnits))

(defn getSlopeElevationChangeFromMapMeasurements [self elevationUnits]
  (.getSlopeElevationChangeFromMapMeasurements self elevationUnits))

(defn getSlopeFromMapMeasurements [self slopeUnits]
  (.getSlopeFromMapMeasurements self slopeUnits))

(defn getSlopeFromMapMeasurementsInDegrees [self]
  (.getSlopeFromMapMeasurementsInDegrees self))

(defn getSlopeFromMapMeasurementsInPercent [self]
  (.getSlopeFromMapMeasurementsInPercent self))

(defn getSlopeHorizontalDistanceFromMapMeasurements [self distanceUnits]
  (.getSlopeHorizontalDistanceFromMapMeasurements self distanceUnits))

(defn setCalulatedMapDistance [self calculatedMapDistance distanceUnits]
  (.setCalulatedMapDistance self calculatedMapDistance distanceUnits))

(defn setContourInterval [self contourInterval]
  (.setContourInterval self contourInterval))

(defn setMapDistance [self mapDistance distanceUnits]
  (.setMapDistance self mapDistance distanceUnits))

(defn setMapRepresentativeFraction [self mapRepresentativeFraction]
  (.setMapRepresentativeFraction self mapRepresentativeFraction))

(defn setMaxSlopeSteepness [self maxSlopeSteepness]
  (.setMaxSlopeSteepness self maxSlopeSteepness))

(defn setNumberOfContours [self numberOfContours contourUnits]
  (.setNumberOfContours self numberOfContours contourUnits))

(def ^:export ns-public-fns (update-keys (ns-publics 'behave.lib.slope-tool) name))
