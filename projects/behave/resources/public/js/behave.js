

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// See https://caniuse.com/mdn-javascript_builtins_object_assign

// See https://caniuse.com/mdn-javascript_builtins_bigint64array

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

var fs;
var nodePath;
var requireNodeFS;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


requireNodeFS = () => {
  // Use nodePath as the indicator for these not being initialized,
  // since in some environments a global fs may have already been
  // created.
  if (!nodePath) {
    fs = require('fs');
    nodePath = require('path');
  }
};

read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  requireNodeFS();
  filename = nodePath['normalize'](filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  requireNodeFS();
  filename = nodePath['normalize'](filename);
  fs.readFile(filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = (status, toThrow) => {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js


  read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");




var STACK_ALIGN = 16;
var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': case 'u8': return 1;
    case 'i16': case 'u16': return 2;
    case 'i32': case 'u32': return 4;
    case 'i64': case 'u64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return POINTER_SIZE;
      }
      if (type[0] === 'i') {
        const bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      }
      return 0;
    }
  }
}

// include: runtime_debug.js


function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// end include: runtime_debug.js


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 19648, "AAAAAAAAAAAzMzMzMzPTPwAAAAAAAOA/ZmZmZmZm5j/NzMzMzMzsPzC4RAAAAPA/mpmZmZmZ6T/6fmq8dJPsP0w3iUFg5fA/sHJoke188z+q8dJNYhD2PycxCKwcWvc/BFYOLbKd5z/D9Shcj8LtP0w3iUFg5fA/IbByaJHt8j+LbOf7qfH0P8HKoUW28/U/CKwcWmQ74z+kcD0K16PkP0a28/3UeOU/ke18PzVe5j9cj8L1KFznP0Jg5dAi2+c/KVyPwvUo7D/LoUW28/3sP2Q730+Nl/A/eekmMQis8j/NzMzMzMz0P3e+nxov3fU/VOOlm8Qg6D8bL90kBoHpP2ZmZmZmZuo/hxbZzvdT6z99PzVeuknsP/hT46WbxOw/MzMzMzMz7z9mZmZmZmbeP4/C9Shcj/A/cT0K16Nw9T/Xo3A9CtfxPwAAAAAAAAAAcT0K16Nw1T/ByqFFtvPNP8dLN4lBYMU/mpmZmZmZuT9MN4lBYOWgPwAAAAAAAAAASOF6FK5H5T/D9Shcj8LdP3Noke18P9U/Rrbz/dR4yT/0/dR46SaxPwAAAAAAAAAAMzMzMzMzwz/hehSuR+G6PzMzMzMzM7M/CtejcD0Kpz+4HoXrUbiOPwAAAAAAAAAAmpmZmZmZuT/sUbgeheuxP5qZmZmZmak/uB6F61G4nj97FK5H4XqEPwAAAAAAAAAAMzMzMzMzwz/hehSuR+G6PzMzMzMzM7M/CtejcD0Kpz+4HoXrUbiOPwAAAAAAAAAAmG4Sg8DK2T+YbhKDwMrZPx1aZDvfT9U/6SYxCKwc0j/ufD81XrrRP/Cnxks3idE/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4XrUbge3T8fhetRuB7dP7Kd76fGS9c/j8L1KFyP0j9OYhBYObTQP1pkO99Pjc8/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAlkAAAAAAAFCZQAAAAAAA2J1AAAAAAABUoEAAAAAAAFihQAAAAAAA2qFAAAAAAAAgl0AAAAAAAIidQAAAAAAABKBAAAAAAADgoEAAAAAAAIChQAAAAAAA0KFAAAAAAADglUAAAAAAABCYQAAAAAAAUJlAAAAAAABomkAAAAAAAFibQAAAAAAA0JtAAAAAAAAYlUAAAAAAADCWQAAAAAAAuJpAAAAAAADYnUAAAAAAABigQAAAAAAArqBAAAAAAAAwlkAAAAAAABCYQAAAAAAAKJlAAAAAAAAYmkAAAAAAAOCaQAAAAAAARJtABQAAAAAAAAAAAAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANgAAADcAAACoUgAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4FAAAAAAAAAFAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2AAAAOQAAALhSAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4UQAAYFlQAD4AAAA=");
  base64DecodeToExistingUint8Array(bufferView, 21012, "KHNpemVfdCBpZHgsIHNpemVfdCBzaXplKTw6Oj57IHRocm93ICdBcnJheSBpbmRleCAnICsgaWR4ICsgJyBvdXQgb2YgYm91bmRzOiBbMCwnICsgc2l6ZSArICcpJzsgfQA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var invoke_iidddiidd = env.invoke_iidddiidd;
 var __cxa_find_matching_catch_2 = env.__cxa_find_matching_catch_2;
 var __resumeException = env.__resumeException;
 var invoke_vii = env.invoke_vii;
 var invoke_iii = env.invoke_iii;
 var invoke_iiii = env.invoke_iiii;
 var __cxa_find_matching_catch_3 = env.__cxa_find_matching_catch_3;
 var invoke_iiddiiddiidid = env.invoke_iiddiiddiidid;
 var __cxa_allocate_exception = env.__cxa_allocate_exception;
 var __cxa_throw = env.__cxa_throw;
 var abort = env.abort;
 var invoke_ii = env.invoke_ii;
 var invoke_vi = env.invoke_vi;
 var invoke_iiddiidiidiiiii = env.invoke_iiddiidiidiiiii;
 var invoke_vididi = env.invoke_vididi;
 var invoke_viii = env.invoke_viii;
 var __cxa_free_exception = env.__cxa_free_exception;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_write = env.fd_write;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var __cxa_begin_catch = env.__cxa_begin_catch;
 var invoke_v = env.invoke_v;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5265760;
 var tempRet0 = 0;
 var __stack_end = 0;
 var __stack_base = 0;
 var global$4 = 21012;
 var global$5 = 21012;
 var global$6 = 21110;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
  init_pthread_self();
 }
 
 function LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, $11 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = $0;
  HEAP32[($4 + 52 | 0) >> 2] = $1;
  i64toi32_i32$0 = 1068848469;
  HEAP32[($4 + 40 | 0) >> 2] = 1431655525;
  HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1074413352;
  HEAP32[($4 + 32 | 0) >> 2] = -56364453;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1067502659;
  HEAP32[($4 + 24 | 0) >> 2] = 822901330;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1079017472;
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1085579264;
  HEAP32[($4 + 8 | 0) >> 2] = 0;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1084858798;
  HEAP32[$4 >> 2] = 112728749;
  HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
  $11 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($11 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .08333333333333;
     break label$1;
    case 2:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .03280839895;
     break label$1;
    case 3:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 3.2808398950131;
     break label$1;
    case 4:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 66.0;
     break label$1;
    case 5:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 5280.0;
     break label$1;
    case 6:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 3280.8398950131;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 56 | 0) >> 3]);
 }
 
 function LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, $11 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = $0;
  HEAP32[($4 + 52 | 0) >> 2] = $1;
  i64toi32_i32$0 = 1076363264;
  HEAP32[($4 + 40 | 0) >> 2] = 0;
  HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1077836513;
  HEAP32[($4 + 32 | 0) >> 2] = 1202590843;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1070825943;
  HEAP32[($4 + 24 | 0) >> 2] = -604731395;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1066338241;
  HEAP32[($4 + 16 | 0) >> 2] = -260309782;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1059640065;
  HEAP32[($4 + 8 | 0) >> 2] = -1926227757;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1060370866;
  HEAP32[$4 >> 2] = 136669295;
  HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
  $11 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($11 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 12.0;
     break label$1;
    case 2:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 30.48;
     break label$1;
    case 3:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .3048;
     break label$1;
    case 4:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .0151515151515;
     break label$1;
    case 5:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 1.893939393939394e-04;
     break label$1;
    case 6:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .0003048;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 56 | 0) >> 3]);
 }
 
 function SpeedUnits__toBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, $10 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = $0;
  HEAP32[($4 + 52 | 0) >> 2] = $1;
  i64toi32_i32$0 = 1080597302;
  HEAP32[($4 + 40 | 0) >> 2] = 1826178863;
  HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1074413353;
  HEAP32[($4 + 32 | 0) >> 2] = 180045029;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1072798105;
  HEAP32[($4 + 24 | 0) >> 2] = -1717986918;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1079377920;
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1078679328;
  HEAP32[($4 + 8 | 0) >> 2] = 131941395;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  $10 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($10 | 0) {
    case 0:
     break label$1;
    case 2:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 196.8503937;
     break label$1;
    case 3:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 3.28084;
     break label$1;
    case 1:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 1.1;
     break label$1;
    case 4:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 88.0;
     break label$1;
    case 5:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 54.680665;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 56 | 0) >> 3]);
 }
 
 function SpeedUnits__fromBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, $10 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = $0;
  HEAP32[($4 + 52 | 0) >> 2] = $1;
  i64toi32_i32$0 = 1064619716;
  HEAP32[($4 + 40 | 0) >> 2] = 500277791;
  HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1070825943;
  HEAP32[($4 + 32 | 0) >> 2] = -604731395;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1072502597;
  HEAP32[($4 + 24 | 0) >> 2] = -780903145;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065829841;
  HEAP32[($4 + 16 | 0) >> 2] = 1950161641;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1066580502;
  HEAP32[($4 + 8 | 0) >> 2] = -408743448;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  $10 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($10 | 0) {
    case 0:
     break label$1;
    case 2:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .00508;
     break label$1;
    case 3:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .3048;
     break label$1;
    case 1:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .9090909090909091;
     break label$1;
    case 4:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .01136363636;
     break label$1;
    case 5:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .018288;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 56 | 0) >> 3]);
 }
 
 function CoverUnits__toBaseUnits_28double_2c_20CoverUnits__CoverUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] / 100.0;
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function CoverUnits__fromBaseUnits_28double_2c_20CoverUnits__CoverUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * 100.0;
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function MoistureUnits__toBaseUnits_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] / 100.0;
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function MoistureUnits__fromBaseUnits_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * 100.0;
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function TemperatureUnits__toBaseUnits_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($5 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * 9.0 / 5.0 + 32.0;
     break label$1;
    case 2:
     HEAPF64[($4 + 8 | 0) >> 3] = (+HEAPF64[($4 + 8 | 0) >> 3] - 273.15) * 9.0 / 5.0 + 32.0;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function TemperatureUnits__fromBaseUnits_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($5 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 8 | 0) >> 3] = (+HEAPF64[($4 + 8 | 0) >> 3] - 32.0) * 5.0 / 9.0;
     break label$1;
    case 2:
     HEAPF64[($4 + 8 | 0) >> 3] = (+HEAPF64[($4 + 8 | 0) >> 3] - 32.0) * 5.0 / 9.0 + 273.15;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function ProbabilityUnits__fromBaseUnits_28double_2c_20ProbabilityUnits__ProbabilityUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * 100.0;
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($5 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] / 60.0;
     break label$1;
    case 2:
     HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * 60.0;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function TimeUnits__fromBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($5 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * 60.0;
     break label$1;
    case 2:
     HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] / 60.0;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function AreaUnits__toBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, $10 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = $0;
  HEAP32[($4 + 52 | 0) >> 2] = $1;
  i64toi32_i32$0 = 1088767232;
  HEAP32[($4 + 40 | 0) >> 2] = 296947319;
  HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1090144113;
  HEAP32[($4 + 32 | 0) >> 2] = -1431626177;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1076201247;
  HEAP32[($4 + 24 | 0) >> 2] = 1143058358;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1098552896;
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1097107408;
  HEAP32[($4 + 8 | 0) >> 2] = -850022496;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  $10 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($10 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 43560.00216057611;
     break label$1;
    case 2:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 107639.10416709723;
     break label$1;
    case 3:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 10.76391041671;
     break label$1;
    case 4:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 27878400.0;
     break label$1;
    case 5:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 10763910.416709721;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 56 | 0) >> 3]);
 }
 
 function AreaUnits__fromBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, $10 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = $0;
  HEAP32[($4 + 52 | 0) >> 2] = $1;
  i64toi32_i32$0 = 1056445038;
  HEAP32[($4 + 40 | 0) >> 2] = 138779302;
  HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1055095729;
  HEAP32[($4 + 32 | 0) >> 2] = -1699857200;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1048113215;
  HEAP32[($4 + 24 | 0) >> 2] = -1873585761;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1069009022;
  HEAP32[($4 + 16 | 0) >> 2] = 1252775914;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1046692337;
  HEAP32[($4 + 8 | 0) >> 2] = -1338128598;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  $10 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($10 | 0) {
    case 0:
     break label$1;
    case 1:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .00002295684;
     break label$1;
    case 2:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 9.2903036e-06;
     break label$1;
    case 3:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * .0929030353835;
     break label$1;
    case 4:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 3.5870064279e-08;
     break label$1;
    case 5:
     HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($4 + 56 | 0) >> 3] * 9.290304e-08;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  return +(+HEAPF64[($4 + 56 | 0) >> 3]);
 }
 
 function FireSize__FireSize_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function FireSize___FireSize_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function FireSize__calculateFireBasicDimensions_28double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  var $7 = 0, $8 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 44 | 0) >> 2] = $0;
  HEAPF64[($7 + 32 | 0) >> 3] = $1;
  HEAP32[($7 + 28 | 0) >> 2] = $2;
  HEAPF64[($7 + 16 | 0) >> 3] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
  HEAPF64[($8 + 8 | 0) >> 3] = +SpeedUnits__toBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[($7 + 16 | 0) >> 3]), HEAP32[($7 + 12 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7 + 28 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[$8 >> 3] = +SpeedUnits__toBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[($7 + 32 | 0) >> 3]), HEAP32[($7 + 28 | 0) >> 2] | 0 | 0);
    HEAPF64[$8 >> 3] = +SpeedUnits__fromBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[$8 >> 3]), 4 | 0);
    break label$1;
   }
   HEAPF64[$8 >> 3] = +HEAPF64[($7 + 32 | 0) >> 3];
  }
  FireSize__calculateFireLengthToWidthRatio_28_29($8 | 0);
  FireSize__calculateSurfaceFireEccentricity_28_29($8 | 0);
  FireSize__calculateBackingSpreadRate_28_29($8 | 0);
  FireSize__calculateEllipticalDimensions_28_29($8 | 0);
  __stack_pointer = $7 + 48 | 0;
  return;
 }
 
 function FireSize__calculateFireLengthToWidthRatio_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[$4 >> 3] > 1.0e-07 & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 80 | 0) >> 3] = +HEAPF64[$4 >> 3] * .25 + 1.0;
    break label$1;
   }
   HEAPF64[($4 + 80 | 0) >> 3] = 1.0;
  }
  return;
 }
 
 function FireSize__calculateSurfaceFireEccentricity_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 48 | 0) >> 3] = +(0 | 0);
  HEAPF64[$3 >> 3] = +HEAPF64[($4 + 80 | 0) >> 3] * +HEAPF64[($4 + 80 | 0) >> 3] + -1.0;
  label$1 : {
   if (!(+HEAPF64[$3 >> 3] > +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 48 | 0) >> 3] = Math_sqrt(+HEAPF64[$3 >> 3]) / +HEAPF64[($4 + 80 | 0) >> 3];
  }
  return;
 }
 
 function FireSize__calculateBackingSpreadRate_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 64 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3] * (1.0 - +HEAPF64[($4 + 48 | 0) >> 3]) / (1.0 + +HEAPF64[($4 + 48 | 0) >> 3]);
  return;
 }
 
 function FireSize__calculateEllipticalDimensions_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = (+HEAPF64[($4 + 8 | 0) >> 3] + +HEAPF64[($4 + 64 | 0) >> 3]) / 2.0;
  label$1 : {
   if (!(+HEAPF64[($4 + 80 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 24 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] / +HEAPF64[($4 + 80 | 0) >> 3];
  }
  HEAPF64[($4 + 40 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] - +HEAPF64[($4 + 64 | 0) >> 3];
  return;
 }
 
 function FireSize__getFireLengthToWidthRatio_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 80 | 0) >> 3]);
 }
 
 function FireSize__getEccentricity_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 48 | 0) >> 3]);
 }
 
 function FireSize__getBackingSpreadRate_28SpeedUnits__SpeedUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SpeedUnits__fromBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function FireSize__getEllipticalA_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $15 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  $15 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($7 + 24 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$15;
 }
 
 function FireSize__getEllipticalB_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $15 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  $15 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($7 + 32 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$15;
 }
 
 function FireSize__getEllipticalC_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $15 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  $15 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($7 + 40 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$15;
 }
 
 function FireSize__getFireLength_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $17 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  $17 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($7 + 32 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3] * 2.0), HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$17;
 }
 
 function FireSize__getMaxFireWidth_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $17 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  $17 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($7 + 24 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3] * 2.0), HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$17;
 }
 
 function FireSize__getFirePerimeter_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $58 = 0.0;
  $6 = __stack_pointer - 96 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 92 | 0) >> 2] = $0;
  HEAP32[($6 + 88 | 0) >> 2] = $1;
  HEAPF64[($6 + 80 | 0) >> 3] = $2;
  HEAP32[($6 + 76 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 92 | 0) >> 2] | 0;
  HEAPF64[($6 + 64 | 0) >> 3] = +(0 | 0);
  HEAPF64[($6 + 80 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 80 | 0) >> 3]), HEAP32[($6 + 76 | 0) >> 2] | 0 | 0);
  HEAPF64[($6 + 56 | 0) >> 3] = +HEAPF64[($7 + 24 | 0) >> 3] * +HEAPF64[($6 + 80 | 0) >> 3];
  HEAPF64[($6 + 48 | 0) >> 3] = +HEAPF64[($7 + 32 | 0) >> 3] * +HEAPF64[($6 + 80 | 0) >> 3];
  label$1 : {
   if (!(+HEAPF64[($6 + 56 | 0) >> 3] + +HEAPF64[($6 + 48 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($6 + 40 | 0) >> 3] = +HEAPF64[($6 + 56 | 0) >> 3] - +HEAPF64[($6 + 48 | 0) >> 3];
   HEAPF64[($6 + 32 | 0) >> 3] = +HEAPF64[($6 + 40 | 0) >> 3] * +HEAPF64[($6 + 40 | 0) >> 3];
   HEAPF64[($6 + 24 | 0) >> 3] = +HEAPF64[($6 + 56 | 0) >> 3] + +HEAPF64[($6 + 48 | 0) >> 3];
   HEAPF64[($6 + 16 | 0) >> 3] = +HEAPF64[($6 + 24 | 0) >> 3] * +HEAPF64[($6 + 24 | 0) >> 3];
   HEAPF64[($6 + 8 | 0) >> 3] = +HEAPF64[($6 + 32 | 0) >> 3] / +HEAPF64[($6 + 16 | 0) >> 3];
   HEAPF64[($6 + 64 | 0) >> 3] = 3.141592653589793 * +HEAPF64[($6 + 24 | 0) >> 3] * (1.0 + +HEAPF64[($6 + 8 | 0) >> 3] / 4.0 + +HEAPF64[($6 + 8 | 0) >> 3] * +HEAPF64[($6 + 8 | 0) >> 3] / 64.0);
  }
  $58 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($6 + 64 | 0) >> 3]), HEAP32[($6 + 88 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 96 | 0;
  return +$58;
 }
 
 function FireSize__getFireArea_28AreaUnits__AreaUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $21 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  $21 = +AreaUnits__fromBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(3.141592653589793 * +HEAPF64[($7 + 24 | 0) >> 3] * +HEAPF64[($7 + 32 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3] * +HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$21;
 }
 
 function SIGContainResource__SIGContainResource_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 1024 + 8 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 40 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 48 | 0) >> 2] = 0;
  HEAP32[($4 + 52 | 0) >> 2] = 3856;
  return $4 | 0;
 }
 
 function SIGContainResource__SIGContainResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  var $10 = 0, $11 = 0;
  $10 = __stack_pointer - 64 | 0;
  HEAP32[($10 + 60 | 0) >> 2] = $0;
  HEAPF64[($10 + 48 | 0) >> 3] = $1;
  HEAPF64[($10 + 40 | 0) >> 3] = $2;
  HEAPF64[($10 + 32 | 0) >> 3] = $3;
  HEAP32[($10 + 28 | 0) >> 2] = $4;
  HEAP32[($10 + 24 | 0) >> 2] = $5;
  HEAPF64[($10 + 16 | 0) >> 3] = $6;
  HEAPF64[($10 + 8 | 0) >> 3] = $7;
  $11 = HEAP32[($10 + 60 | 0) >> 2] | 0;
  HEAP32[$11 >> 2] = 1024 + 8 | 0;
  HEAPF64[($11 + 8 | 0) >> 3] = +HEAPF64[($10 + 48 | 0) >> 3];
  HEAPF64[($11 + 16 | 0) >> 3] = +HEAPF64[($10 + 32 | 0) >> 3];
  HEAPF64[($11 + 24 | 0) >> 3] = +HEAPF64[($10 + 40 | 0) >> 3];
  HEAPF64[($11 + 32 | 0) >> 3] = +HEAPF64[($10 + 16 | 0) >> 3];
  HEAPF64[($11 + 40 | 0) >> 3] = +HEAPF64[($10 + 8 | 0) >> 3];
  HEAP32[($11 + 48 | 0) >> 2] = HEAP32[($10 + 28 | 0) >> 2] | 0;
  HEAP32[($11 + 52 | 0) >> 2] = HEAP32[($10 + 24 | 0) >> 2] | 0;
  return $11 | 0;
 }
 
 function SIGContainResource___SIGContainResource_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 1024 + 8 | 0;
  return $4 | 0;
 }
 
 function SIGContainResource___SIGContainResource_28_29_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[1 | 0]($4) | 0;
  operator_20delete_28void__29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function SIGContainResource__arrival_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]);
 }
 
 function SIGContainResource__baseCost_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3]);
 }
 
 function SIGContainResource__description_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainResource__duration_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 3]);
 }
 
 function SIGContainResource__flank_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainResource__hourCost_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 40 | 0) >> 3]);
 }
 
 function SIGContainResource__production_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3]);
 }
 
 function SIGContainResource__print_28char__2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $45 = 0, $28 = 0.0, $29 = 0.0;
  $5 = __stack_pointer - 144 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 140 | 0) >> 2] = $0;
  HEAP32[($5 + 136 | 0) >> 2] = $1;
  HEAP32[($5 + 132 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 140 | 0) >> 2] | 0;
  HEAP32[($5 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[($5 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[($5 + 132 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
      break label$2
     }
    }
    break label$1;
   }
   memset(HEAP32[($5 + 136 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($5 + 132 | 0) >> 2] | 0 | 0) | 0;
   $28 = +HEAPF64[($6 + 8 | 0) >> 3];
   $29 = +HEAPF64[($6 + 24 | 0) >> 3];
   HEAPF64[($5 + 16 | 0) >> 3] = +HEAPF64[($6 + 16 | 0) >> 3];
   HEAPF64[($5 + 8 | 0) >> 3] = $29;
   HEAPF64[$5 >> 3] = $28;
   HEAP32[($5 + 28 | 0) >> 2] = sprintf($5 + 32 | 0 | 0, 1635 | 0, $5 | 0) | 0;
   label$4 : {
    label$5 : {
     if (!((HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) < ((HEAP32[($5 + 132 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $45 = HEAP32[($5 + 28 | 0) >> 2] | 0;
     break label$4;
    }
    $45 = (HEAP32[($5 + 132 | 0) >> 2] | 0) - 1 | 0;
   }
   HEAP32[($5 + 28 | 0) >> 2] = $45;
   __memcpy(HEAP32[($5 + 136 | 0) >> 2] | 0 | 0, $5 + 32 | 0 | 0, HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) | 0;
   HEAP8[((HEAP32[($5 + 136 | 0) >> 2] | 0) + (HEAP32[($5 + 28 | 0) >> 2] | 0) | 0) >> 0] = 0;
  }
  __stack_pointer = $5 + 144 | 0;
  return;
 }
 
 function SIGContainForce__SIGContainForce_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $12 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 3860 + 8 | 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  $12 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($12 & 1073741823 | 0 | 0) != ($12 | 0) & 1 | 0 ? -1 : $12 << 2 | 0) | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGContainForce___SIGContainForce_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $21 = 0, $39 = 0, $47 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  HEAP32[$4 >> 2] = 3860 + 8 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $21 = HEAP32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + ((HEAP32[($3 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (($21 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$21 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($21);
    }
    HEAP32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + ((HEAP32[($3 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $39 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$4 : {
   if (($39 | 0) == (0 | 0) & 1 | 0) {
    break label$4
   }
   operator_20delete_5b_5d_28void__29($39 | 0);
  }
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  $47 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $47 | 0;
 }
 
 function SIGContainForce___SIGContainForce_28_29_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[2 | 0]($4) | 0;
  operator_20delete_28void__29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function SIGContainForce__exhausted_28ContainFlank_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $56 = 0.0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ((HEAP32[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$4
      }
      if (!((HEAP32[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$3
      }
     }
     $56 = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 16 | 0) >> 3];
     HEAPF64[($4 + 8 | 0) >> 3] = $56;
     label$5 : {
      if (!($56 > +HEAPF64[($4 + 16 | 0) >> 3] & 1 | 0)) {
       break label$5
      }
      HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3];
     }
    }
    HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($4 + 16 | 0) >> 3]);
 }
 
 function SIGContainForce__firstArrival_28ContainFlank_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAPF64[($4 + 16 | 0) >> 3] = 99999999.0;
  HEAP32[($4 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ((HEAP32[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$4
      }
      if (!((HEAP32[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$3
      }
     }
     if (!(+HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($4 + 16 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3];
    }
    HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($4 + 16 | 0) >> 3]);
 }
 
 function SIGContainForce__nextArrival_28double_2c_20double_2c_20ContainFlank_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $11 = 0.0, $17 = 0, $45 = 0.0;
  $6 = __stack_pointer - 64 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 52 | 0) >> 2] = $0;
  HEAPF64[($6 + 40 | 0) >> 3] = $1;
  HEAPF64[($6 + 32 | 0) >> 3] = $2;
  HEAP32[($6 + 28 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 52 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = +SIGContainForce__productionRate_28double_2c_20ContainFlank_29_20const($7 | 0, +(+HEAPF64[($6 + 40 | 0) >> 3]), HEAP32[($6 + 28 | 0) >> 2] | 0 | 0);
  $11 = +HEAPF64[($6 + 40 | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!(Math_abs($11) < 2147483648.0)) {
     break label$2
    }
    $17 = ~~$11;
    break label$1;
   }
   $17 = -2147483648;
  }
  HEAP32[($6 + 12 | 0) >> 2] = $17;
  HEAPF64[($6 + 40 | 0) >> 3] = +(HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) + 1.0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     if (!(+HEAPF64[($6 + 40 | 0) >> 3] < +HEAPF64[($6 + 32 | 0) >> 3] & 1 | 0)) {
      break label$4
     }
     label$6 : {
      if (!(Math_abs(+SIGContainForce__productionRate_28double_2c_20ContainFlank_29_20const($7 | 0, +(+HEAPF64[($6 + 40 | 0) >> 3]), HEAP32[($6 + 28 | 0) >> 2] | 0 | 0) - +HEAPF64[($6 + 16 | 0) >> 3]) > .001 & 1 | 0)) {
       break label$6
      }
      HEAPF64[($6 + 56 | 0) >> 3] = +HEAPF64[($6 + 40 | 0) >> 3];
      break label$3;
     }
     HEAPF64[($6 + 40 | 0) >> 3] = +HEAPF64[($6 + 40 | 0) >> 3] + 1.0;
     continue label$5;
    };
   }
   HEAPF64[($6 + 56 | 0) >> 3] = +(0 | 0);
  }
  $45 = +HEAPF64[($6 + 56 | 0) >> 3];
  __stack_pointer = $6 + 64 | 0;
  return +$45;
 }
 
 function SIGContainForce__productionRate_28double_2c_20ContainFlank_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 48 | 0;
  HEAP32[($5 + 44 | 0) >> 2] = $0;
  HEAPF64[($5 + 32 | 0) >> 3] = $1;
  HEAP32[($5 + 28 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 44 | 0) >> 2] | 0;
  HEAPF64[($5 + 16 | 0) >> 3] = +(0 | 0);
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ((HEAP32[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$4
      }
      if (!((HEAP32[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$3
      }
     }
     if (!(+HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3] <= +HEAPF64[($5 + 32 | 0) >> 3] + .001 & 1 | 0)) {
      break label$3
     }
     if (!(+HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 16 | 0) >> 3] >= +HEAPF64[($5 + 32 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($5 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 3] * .5 + +HEAPF64[($5 + 16 | 0) >> 3];
    }
    HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($5 + 16 | 0) >> 3]);
 }
 
 function SIGContainForce__addResource_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $39 = 0, $51 = 0, $49 = 0, $50 = 0, $58 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) >= (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4 + 16 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) + 100 | 0;
    $16 = HEAP32[($4 + 16 | 0) >> 2] | 0;
    HEAP32[($4 + 12 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($16 & 1073741823 | 0 | 0) != ($16 | 0) & 1 | 0 ? -1 : $16 << 2 | 0) | 0) | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      __memcpy(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($5 + 8 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      $39 = HEAP32[($5 + 4 | 0) >> 2] | 0;
      label$5 : {
       if (($39 | 0) == (0 | 0) & 1 | 0) {
        break label$5
       }
       operator_20delete_5b_5d_28void__29($39 | 0);
      }
      HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
      HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($4 + 28 | 0) >> 2] = 0;
     break label$1;
    }
   }
   $49 = HEAP32[($4 + 20 | 0) >> 2] | 0;
   $50 = HEAP32[($5 + 4 | 0) >> 2] | 0;
   $51 = HEAP32[($5 + 12 | 0) >> 2] | 0;
   HEAP32[($5 + 12 | 0) >> 2] = $51 + 1 | 0;
   HEAP32[($50 + ($51 << 2 | 0) | 0) >> 2] = $49;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
  }
  $58 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $58 | 0;
 }
 
 function SIGContainForce__addResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  var $10 = 0, $13 = 0, $11 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $25 = 0, $35 = 0, $38 = 0, $39 = 0;
  $10 = __stack_pointer - 80 | 0;
  __stack_pointer = $10;
  HEAP32[($10 + 76 | 0) >> 2] = $0;
  HEAPF64[($10 + 64 | 0) >> 3] = $1;
  HEAPF64[($10 + 56 | 0) >> 3] = $2;
  HEAPF64[($10 + 48 | 0) >> 3] = $3;
  HEAP32[($10 + 44 | 0) >> 2] = $4;
  HEAP32[($10 + 40 | 0) >> 2] = $5;
  HEAPF64[($10 + 32 | 0) >> 3] = $6;
  HEAPF64[($10 + 24 | 0) >> 3] = $7;
  $11 = HEAP32[($10 + 76 | 0) >> 2] | 0;
  $13 = operator_20new_28unsigned_20long_29(56 | 0) | 0;
  $14 = +HEAPF64[($10 + 64 | 0) >> 3];
  $15 = +HEAPF64[($10 + 56 | 0) >> 3];
  $16 = +HEAPF64[($10 + 48 | 0) >> 3];
  $17 = HEAP32[($10 + 44 | 0) >> 2] | 0;
  $18 = HEAP32[($10 + 40 | 0) >> 2] | 0;
  $19 = +HEAPF64[($10 + 32 | 0) >> 3];
  $20 = +HEAPF64[($10 + 24 | 0) >> 3];
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iidddiidd(3 | 0, $13 | 0, +$14, +$15, +$16, $17 | 0, $18 | 0, +$19, +$20) | 0;
  $25 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($25 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[($10 + 20 | 0) >> 2] = $13;
   $35 = SIGContainForce__addResource_28SIGContainResource__29($11 | 0, HEAP32[($10 + 20 | 0) >> 2] | 0 | 0) | 0;
   __stack_pointer = $10 + 80 | 0;
   return $35 | 0;
  }
  $38 = __cxa_find_matching_catch_2() | 0;
  $39 = getTempRet0() | 0;
  HEAP32[($10 + 16 | 0) >> 2] = $38;
  HEAP32[($10 + 12 | 0) >> 2] = $39;
  operator_20delete_28void__29($13 | 0);
  HEAP32[($10 + 12 | 0) >> 2] | 0;
  __resumeException(HEAP32[($10 + 16 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGContainForce__resources_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainForce__resourceArrival_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4 >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function SIGContainForce__resourceBaseCost_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4 >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 32 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function SIGContainForce__resourceCost_28int_2c_20double_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 20 | 0) >> 2] = $0;
  HEAP32[($5 + 16 | 0) >> 2] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 16 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($5 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!(+HEAPF64[($5 + 8 | 0) >> 3] <= +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($5 + 24 | 0) >> 3] = +(0 | 0);
     break label$1;
    }
    HEAPF64[$5 >> 3] = +HEAPF64[($5 + 8 | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 3];
    label$4 : {
     if (!(+HEAPF64[$5 >> 3] > +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 16 | 0) >> 3] & 1 | 0)) {
      break label$4
     }
     HEAPF64[$5 >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 16 | 0) >> 3];
    }
    HEAPF64[($5 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 32 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($6 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3] * +HEAPF64[$5 >> 3] / 60.0;
    break label$1;
   }
   HEAPF64[($5 + 24 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($5 + 24 | 0) >> 3]);
 }
 
 function SIGContainForce__resourceDescription_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4 + 12 | 0) >> 2] = 3856;
  }
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainForce__resourceDuration_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4 >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 16 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function SIGContainForce__resourceFlank_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4 + 12 | 0) >> 2] = 3;
  }
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainForce__resourceHourCost_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4 >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function SIGContainForce__resourceProduction_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4 >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function SIGContainForce__logResources_28bool_2c_20SIGContain_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $7 = 0, $29 = 0, $32 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 108 | 0) >> 2] = $0;
  HEAP8[($5 + 107 | 0) >> 0] = $1;
  HEAP32[($5 + 100 | 0) >> 2] = $2;
  $7 = HEAP32[($5 + 108 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($5 + 107 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5 + 12 | 0) >> 2] = 0;
   label$3 : while (1) {
    if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($7 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    SIGContainResource__print_28char__2c_20int_29_20const(HEAP32[((HEAP32[($7 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, $5 + 16 | 0 | 0, 65 | 0);
    $29 = HEAP32[($5 + 100 | 0) >> 2] | 0;
    $32 = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = $5 + 16 | 0;
    HEAP32[$5 >> 2] = $32;
    SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($29 | 0, 1 | 0, 2063 | 0, $5 | 0);
    HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  __stack_pointer = $5 + 112 | 0;
  return;
 }
 
 function SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP8[($6 + 27 | 0) >> 0] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  label$1 : {
   if (!((HEAPU8[($6 + 27 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6 + 16 | 0) >> 2] = $3;
   $11 = HEAP32[($6 + 20 | 0) >> 2] | 0;
   HEAP32[$6 >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
   printf($11 | 0, $6 | 0) | 0;
   fflush(HEAP32[(0 + 18284 | 0) >> 2] | 0 | 0) | 0;
  }
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function SIGContainForceAdapter__SIGContainForceAdapter_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____vector_28unsigned_20long_29($4 | 0, 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____vector_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $26 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($5 + 8 | 0 | 0, $4 + 16 | 0 | 0, $4 + 8 | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____28std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____29($5 | 0);
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______vallocate_28unsigned_20long_29($5 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0);
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______construct_at_end_28unsigned_20long_29($5 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0);
  }
  $26 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $26 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_SIGContainResource__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____28std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______vallocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $15 = 0, $20 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____max_size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______throw_length_error_28_29_20const($5 | 0);
   abort();
  }
  $15 = std____2__allocator_traits_std____2__allocator_SIGContainResource____allocate_28std____2__allocator_SIGContainResource___2c_20unsigned_20long_29(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5 + 4 | 0) >> 2] = $15;
  HEAP32[$5 >> 2] = $15;
  $20 = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0;
  HEAP32[(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______end_cap_28_29($5 | 0) | 0) >> 2] = $20;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_new_28unsigned_20long_29_20const($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $37 = 0, $19 = 0, $21 = 0, $26 = 0, $38 = 0, $39 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 44 | 0) >> 2] = $0;
  HEAP32[($4 + 40 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction___ConstructTransaction_28std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____2c_20unsigned_20long_29($4 + 24 | 0 | 0, $5 | 0, HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $19 = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($5 | 0) | 0;
     $21 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vii(4 | 0, $19 | 0, $21 | 0);
     $26 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     label$4 : {
      if (($26 | 0) == (1 | 0) & 1 | 0) {
       break label$4
      }
      $37 = (HEAP32[($4 + 16 | 0) >> 2] | 0) + 56 | 0;
      HEAP32[($4 + 16 | 0) >> 2] = $37;
      HEAP32[($4 + 28 | 0) >> 2] = $37;
      continue label$3;
     }
     break label$3;
    };
    $38 = __cxa_find_matching_catch_2() | 0;
    $39 = getTempRet0() | 0;
    HEAP32[($4 + 12 | 0) >> 2] = $38;
    HEAP32[($4 + 8 | 0) >> 2] = $39;
    std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction____ConstructTransaction_28_29($4 + 24 | 0 | 0) | 0;
    break label$1;
   }
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction____ConstructTransaction_28_29($4 + 24 | 0 | 0) | 0;
   __stack_pointer = $4 + 48 | 0;
   return;
  }
  HEAP32[($4 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGContainForceAdapter___SIGContainForceAdapter_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____vector_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____vector_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_delete_28_29_20const($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______clear_28_29($4 | 0);
   std____2__allocator_traits_std____2__allocator_SIGContainResource____deallocate_28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20unsigned_20long_29(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($4 | 0) | 0, 56) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($4 | 0) | 0, 56) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($4 | 0) | 0, 56) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______clear_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______base_destruct_at_end_28SIGContainResource__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____second_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______end_cap_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (56 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_SIGContainResource____deallocate_28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_SIGContainResource___deallocate_28SIGContainResource__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function SIGContainForceAdapter__addResource_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____push_back_28SIGContainResource_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____push_back_28SIGContainResource_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______end_cap_28_29($5 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    void_20std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______construct_one_at_end_SIGContainResource_20const___28SIGContainResource_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______push_back_slow_path_SIGContainResource_20const___28SIGContainResource_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______end_cap_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____first_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______construct_one_at_end_SIGContainResource_20const___28SIGContainResource_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $35 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction___ConstructTransaction_28std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____2c_20unsigned_20long_29($4 + 8 | 0 | 0, $5 | 0, 1 | 0) | 0;
  $10 = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($5 | 0) | 0;
  $12 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0;
  $13 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(5 | 0, $10 | 0, $12 | 0, $13 | 0);
  $18 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($18 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 56 | 0;
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction____ConstructTransaction_28_29($4 + 8 | 0 | 0) | 0;
   __stack_pointer = $4 + 32 | 0;
   return;
  }
  $35 = __cxa_find_matching_catch_2() | 0;
  $36 = getTempRet0() | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $35;
  HEAP32[$4 >> 2] = $36;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction____ConstructTransaction_28_29($4 + 8 | 0 | 0) | 0;
  HEAP32[$4 >> 2] | 0;
  __resumeException(HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function void_20std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______push_back_slow_path_SIGContainResource_20const___28SIGContainResource_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $18 = 0, $19 = 0, $24 = 0, $43 = 0, $57 = 0, $58 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 44 | 0) >> 2] = $0;
  HEAP32[($4 + 40 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  HEAP32[($4 + 36 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($5 | 0) | 0;
  std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SIGContainResource___29($4 + 16 | 0 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______recommend_28unsigned_20long_29_20const($5 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0) + 1 | 0 | 0) | 0 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
  $16 = HEAP32[($4 + 36 | 0) >> 2] | 0;
  $18 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0;
  $19 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(5 | 0, $16 | 0, $18 | 0, $19 | 0);
  $24 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($24 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[($4 + 24 | 0) >> 2] = (HEAP32[($4 + 24 | 0) >> 2] | 0) + 56 | 0;
   HEAP32[(0 + 22372 | 0) >> 2] = 0;
   invoke_vii(6 | 0, $5 | 0, $4 + 16 | 0 | 0);
   $43 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
   HEAP32[(0 + 22372 | 0) >> 2] = 0;
   if (($43 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource________split_buffer_28_29($4 + 16 | 0 | 0) | 0;
   __stack_pointer = $4 + 48 | 0;
   return;
  }
  $57 = __cxa_find_matching_catch_2() | 0;
  $58 = getTempRet0() | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $57;
  HEAP32[($4 + 8 | 0) >> 2] = $58;
  std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource________split_buffer_28_29($4 + 16 | 0 | 0) | 0;
  HEAP32[($4 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGContainForceAdapter__addResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  var $10 = 0, $11 = 0, $30 = 0, $45 = 0, $46 = 0;
  $10 = __stack_pointer - 128 | 0;
  __stack_pointer = $10;
  HEAP32[($10 + 124 | 0) >> 2] = $0;
  HEAPF64[($10 + 112 | 0) >> 3] = $1;
  HEAPF64[($10 + 104 | 0) >> 3] = $2;
  HEAPF64[($10 + 96 | 0) >> 3] = $3;
  HEAP32[($10 + 92 | 0) >> 2] = $4;
  HEAP32[($10 + 88 | 0) >> 2] = $5;
  HEAPF64[($10 + 80 | 0) >> 3] = $6;
  HEAPF64[($10 + 72 | 0) >> 3] = $7;
  $11 = HEAP32[($10 + 124 | 0) >> 2] | 0;
  FUNCTION_TABLE[3 | 0]($10 + 16 | 0, +HEAPF64[($10 + 112 | 0) >> 3], +HEAPF64[($10 + 104 | 0) >> 3], +HEAPF64[($10 + 96 | 0) >> 3], HEAP32[($10 + 92 | 0) >> 2] | 0, HEAP32[($10 + 88 | 0) >> 2] | 0, +HEAPF64[($10 + 80 | 0) >> 3], +HEAPF64[($10 + 72 | 0) >> 3]) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_vii(7 | 0, $11 | 0, $10 + 16 | 0 | 0);
  $30 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($30 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[1 | 0]($10 + 16 | 0) | 0;
   __stack_pointer = $10 + 128 | 0;
   return;
  }
  $45 = __cxa_find_matching_catch_2() | 0;
  $46 = getTempRet0() | 0;
  HEAP32[($10 + 12 | 0) >> 2] = $45;
  HEAP32[($10 + 8 | 0) >> 2] = $46;
  FUNCTION_TABLE[1 | 0]($10 + 16 | 0) | 0;
  HEAP32[($10 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($10 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGContainForceAdapter__firstArrival_28ContainFlank_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $46 = 0.0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAPF64[($4 + 16 | 0) >> 3] = 99999999.0;
  HEAP32[($4 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 < (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ((SIGContainResource__flank_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29_20const($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) == (HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$4
      }
      if (!((SIGContainResource__flank_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29_20const($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$3
      }
     }
     if (!(+SIGContainResource__arrival_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29_20const($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) < +HEAPF64[($4 + 16 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($4 + 16 | 0) >> 3] = +SIGContainResource__arrival_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29_20const($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    }
    HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $46 = +HEAPF64[($4 + 16 | 0) >> 3];
  __stack_pointer = $4 + 32 | 0;
  return +$46;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (56 | 0) | 0 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0 | 0;
 }
 
 function SIGContainForceAdapter__removeResourceAt_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $31 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 40 | 0) >> 2] = $0;
  HEAP32[($4 + 36 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[($4 + 32 | 0) >> 2] = 1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 36 | 0) >> 2] | 0) >>> 0 < (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($4 + 8 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____begin_28_29($5 | 0) | 0;
    HEAP32[($4 + 16 | 0) >> 2] = std____2____wrap_iter_SIGContainResource____operator__28long_29_20const($4 + 8 | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
    std____2____wrap_iter_SIGContainResource_20const______wrap_iter_SIGContainResource___28std____2____wrap_iter_SIGContainResource___20const__2c_20std____2__enable_if_is_convertible_SIGContainResource__2c_20SIGContainResource_20const____value_2c_20void___type__29($4 + 24 | 0 | 0, $4 + 16 | 0 | 0, 0 | 0) | 0;
    HEAP32[$4 >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____erase_28std____2____wrap_iter_SIGContainResource_20const___29($5 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4 + 44 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
  }
  $31 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  __stack_pointer = $4 + 48 | 0;
  return $31 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____begin_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______make_iter_28SIGContainResource__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource____operator__28long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = HEAP32[(HEAP32[($4 + 4 | 0) >> 2] | 0) >> 2] | 0;
  std____2____wrap_iter_SIGContainResource____operator___28long_29($4 + 8 | 0 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $11 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource_20const______wrap_iter_SIGContainResource___28std____2____wrap_iter_SIGContainResource___20const__2c_20std____2__enable_if_is_convertible_SIGContainResource__2c_20SIGContainResource_20const____value_2c_20void___type__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = std____2____wrap_iter_SIGContainResource____base_28_29_20const(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____erase_28std____2____wrap_iter_SIGContainResource_20const___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $30 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 32 | 0) >> 2] = $1;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____cbegin_28_29_20const($5 | 0) | 0;
  HEAP32[($4 + 24 | 0) >> 2] = decltype_28fp_base_28_29_20__20fp0_base_28_29_29_20std____2__operator__SIGContainResource_20const__2c_20SIGContainResource_20const___28std____2____wrap_iter_SIGContainResource_20const___20const__2c_20std____2____wrap_iter_SIGContainResource_20const___20const__29($4 + 32 | 0 | 0, $4 + 16 | 0 | 0) | 0;
  HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[($4 + 24 | 0) >> 2] | 0, 56) | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______destruct_at_end_28SIGContainResource__29($5 | 0, SIGContainResource__20std____2__move_SIGContainResource__2c_20SIGContainResource___28SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource__29((HEAP32[($4 + 12 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______invalidate_iterators_past_28SIGContainResource__29($5 | 0, (HEAP32[($4 + 12 | 0) >> 2] | 0) + -56 | 0 | 0);
  HEAP32[($4 + 40 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______make_iter_28SIGContainResource__29($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0;
  $30 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  __stack_pointer = $4 + 48 | 0;
  return $30 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____cbegin_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____begin_28_29_20const(HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) | 0;
  $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function decltype_28fp_base_28_29_20__20fp0_base_28_29_29_20std____2__operator__SIGContainResource_20const__2c_20SIGContainResource_20const___28std____2____wrap_iter_SIGContainResource_20const___20const__2c_20std____2____wrap_iter_SIGContainResource_20const___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((std____2____wrap_iter_SIGContainResource_20const____base_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) - (std____2____wrap_iter_SIGContainResource_20const____base_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0) / (56 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function SIGContainResource__20std____2__move_SIGContainResource__2c_20SIGContainResource___28SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $14 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $14 = SIGContainResource__20std____2____rewrap_iter_SIGContainResource___28SIGContainResource__2c_20SIGContainResource__29(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, SIGContainResource__20std____2____move_SIGContainResource__2c_20SIGContainResource___28SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource__29(decltype_28std____2____unwrap_iter_impl_SIGContainResource__2c_20true_____apply_28declval_SIGContainResource___28_29_29_29_20std____2____unwrap_iter_SIGContainResource__2c_20std____2____unwrap_iter_impl_SIGContainResource__2c_20true___28SIGContainResource__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, decltype_28std____2____unwrap_iter_impl_SIGContainResource__2c_20true_____apply_28declval_SIGContainResource___28_29_29_29_20std____2____unwrap_iter_SIGContainResource__2c_20std____2____unwrap_iter_impl_SIGContainResource__2c_20true___28SIGContainResource__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, decltype_28std____2____unwrap_iter_impl_SIGContainResource__2c_20true_____apply_28declval_SIGContainResource___28_29_29_29_20std____2____unwrap_iter_SIGContainResource__2c_20std____2____unwrap_iter_impl_SIGContainResource__2c_20true___28SIGContainResource__29(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______destruct_at_end_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______invalidate_iterators_past_28SIGContainResource__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 4 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______base_destruct_at_end_28SIGContainResource__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_shrink_28unsigned_20long_29_20const($5 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______invalidate_iterators_past_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______make_iter_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  std____2____wrap_iter_SIGContainResource______wrap_iter_28SIGContainResource__29($4 + 8 | 0 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource____operator___28long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0;
  return $5 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource____base_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainForceAdapter__removeResourceWithThisDesc_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $19 = 0, $27 = 0, $39 = 0, $40 = 0, $44 = 0, $46 = 0, $55 = 0, $60 = 0, $71 = 0, $72 = 0, $84 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 40 | 0) >> 2] = $0;
  HEAP32[($4 + 36 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28_29($4 + 24 | 0 | 0) | 0;
  HEAP32[($4 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 < (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
       break label$3
      }
      $19 = SIGContainResource__description_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($5 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
      HEAP32[(0 + 22372 | 0) >> 2] = 0;
      invoke_iii(8 | 0, $4 + 24 | 0 | 0, $19 | 0) | 0;
      $27 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
      HEAP32[(0 + 22372 | 0) >> 2] = 0;
      label$5 : {
       label$6 : {
        if (($27 | 0) == (1 | 0) & 1 | 0) {
         break label$6
        }
        $39 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_28_29_20const($4 + 24 | 0 | 0) | 0;
        $40 = HEAP32[($4 + 36 | 0) >> 2] | 0;
        HEAP32[(0 + 22372 | 0) >> 2] = 0;
        $44 = invoke_iii(9 | 0, $39 | 0, $40 | 0) | 0;
        $46 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
        HEAP32[(0 + 22372 | 0) >> 2] = 0;
        if (($46 | 0) == (1 | 0) & 1 | 0) {
         break label$6
        }
        if ($44) {
         break label$5
        }
        $55 = HEAP32[($4 + 20 | 0) >> 2] | 0;
        HEAP32[(0 + 22372 | 0) >> 2] = 0;
        invoke_iii(10 | 0, $5 | 0, $55 | 0) | 0;
        $60 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
        HEAP32[(0 + 22372 | 0) >> 2] = 0;
        if (($60 | 0) == (1 | 0) & 1 | 0) {
         break label$6
        }
        HEAP32[($4 + 44 | 0) >> 2] = 0;
        HEAP32[($4 + 8 | 0) >> 2] = 1;
        break label$2;
       }
       $71 = __cxa_find_matching_catch_2() | 0;
       $72 = getTempRet0() | 0;
       HEAP32[($4 + 16 | 0) >> 2] = $71;
       HEAP32[($4 + 12 | 0) >> 2] = $72;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($4 + 24 | 0 | 0) | 0;
       break label$1;
      }
      HEAP32[($4 + 20 | 0) >> 2] = (HEAP32[($4 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4 + 44 | 0) >> 2] = 1;
    HEAP32[($4 + 8 | 0) >> 2] = 1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($4 + 24 | 0 | 0) | 0;
   $84 = HEAP32[($4 + 44 | 0) >> 2] | 0;
   __stack_pointer = $4 + 48 | 0;
   return $84 | 0;
  }
  HEAP32[($4 + 12 | 0) >> 2] | 0;
  __resumeException(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iiii(11 | 0, $4 | 0, $3 + 8 | 0 | 0, $3 | 0) | 0;
  $13 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($13 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   void_20std____2____debug_db_insert_c_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($4 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______zero_28_29($4 | 0);
   __stack_pointer = $3 + 16 | 0;
   return $4 | 0;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____assign_28char_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____data_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char______compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($6 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 32 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______zero_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3 + 4 | 0) >> 2] | 0) >>> 0 < 3 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + ((HEAP32[($3 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____assign_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______assign_external_28char_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____data_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function SIGContainForceAdapter__removeAllResourcesWithThisDesc_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0, $5 = 0, $10 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    $8 = SIGContainForceAdapter__removeResourceWithThisDesc_28char_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $8;
    if ($8) {
     break label$1
    }
    HEAP32[$4 >> 2] = 0;
    continue label$2;
   };
  }
  $10 = HEAP32[$4 >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $10 | 0;
 }
 
 function SIGContain__SIGContain_28double_2c_20double_2c_20SIGDiurnalROS__2c_20int_2c_20double_2c_20double_2c_20ContainFlank_2c_20SIGContainForce__2c_20double_2c_20ContainTactic_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = +$11;
  var $14 = 0, $15 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAPF64[($14 + 80 | 0) >> 3] = $1;
  HEAPF64[($14 + 72 | 0) >> 3] = $2;
  HEAP32[($14 + 68 | 0) >> 2] = $3;
  HEAP32[($14 + 64 | 0) >> 2] = $4;
  HEAPF64[($14 + 56 | 0) >> 3] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAP32[($14 + 40 | 0) >> 2] = $8;
  HEAPF64[($14 + 32 | 0) >> 3] = $9;
  HEAP32[($14 + 28 | 0) >> 2] = $10;
  HEAPF64[($14 + 16 | 0) >> 3] = $11;
  $15 = HEAP32[($14 + 92 | 0) >> 2] | 0;
  HEAP32[$15 >> 2] = 3876 + 8 | 0;
  HEAP32[($15 + 4 | 0) >> 2] = HEAP32[($14 + 68 | 0) >> 2] | 0;
  HEAPF64[($15 + 8 | 0) >> 3] = +HEAPF64[($14 + 80 | 0) >> 3];
  HEAPF64[($15 + 16 | 0) >> 3] = +HEAPF64[($14 + 72 | 0) >> 3];
  HEAPF64[($15 + 24 | 0) >> 3] = +HEAPF64[($14 + 56 | 0) >> 3];
  HEAPF64[($15 + 32 | 0) >> 3] = +HEAPF64[($14 + 16 | 0) >> 3];
  HEAPF64[($15 + 40 | 0) >> 3] = +HEAPF64[($14 + 32 | 0) >> 3];
  HEAPF64[($15 + 48 | 0) >> 3] = .01;
  HEAP32[($15 + 56 | 0) >> 2] = HEAP32[($14 + 44 | 0) >> 2] | 0;
  HEAP32[($15 + 60 | 0) >> 2] = HEAP32[($14 + 28 | 0) >> 2] | 0;
  HEAP32[($15 + 64 | 0) >> 2] = HEAP32[($14 + 40 | 0) >> 2] | 0;
  HEAPF64[($15 + 72 | 0) >> 3] = 1.0;
  HEAPF64[($15 + 80 | 0) >> 3] = 1.0;
  HEAPF64[($15 + 88 | 0) >> 3] = 1.0;
  HEAPF64[($15 + 96 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 120 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 128 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 136 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 144 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 176 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 184 | 0) >> 3] = +(0 | 0);
  HEAP32[($15 + 192 | 0) >> 2] = 0;
  HEAP32[($15 + 196 | 0) >> 2] = HEAP32[($14 + 64 | 0) >> 2] | 0;
  HEAPF64[($15 + 216 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 224 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 232 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 240 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 248 | 0) >> 3] = +(0 | 0);
  HEAPF64[($15 + 256 | 0) >> 3] = +(0 | 0);
  HEAP32[($15 + 264 | 0) >> 2] = 0;
  SIGContain__setReport_28double_2c_20double_2c_20double_2c_20double_29($15 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), +(+HEAPF64[($14 + 72 | 0) >> 3]), +(+HEAPF64[($14 + 56 | 0) >> 3]), +(+HEAPF64[($14 + 48 | 0) >> 3]));
  SIGContain__setAttack_28ContainFlank_2c_20SIGContainForce__2c_20double_2c_20ContainTactic_2c_20double_29($15 | 0, HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, HEAP32[($14 + 40 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]));
  SIGContain__reset_28_29($15 | 0);
  HEAP32[$14 >> 2] = HEAP32[($14 + 64 | 0) >> 2] | 0;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($15 | 0, 0 | 0, 3528 | 0, $14 | 0);
  __stack_pointer = $14 + 96 | 0;
  return $15 | 0;
 }
 
 function SIGContain__setReport_28double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $7 = 0, $8 = 0, $12 = 0.0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 44 | 0) >> 2] = $0;
  HEAPF64[($7 + 32 | 0) >> 3] = $1;
  HEAPF64[($7 + 24 | 0) >> 3] = $2;
  HEAPF64[($7 + 16 | 0) >> 3] = $3;
  HEAPF64[($7 + 8 | 0) >> 3] = $4;
  $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
  HEAPF64[($8 + 8 | 0) >> 3] = +HEAPF64[($7 + 32 | 0) >> 3];
  HEAPF64[($8 + 16 | 0) >> 3] = +HEAPF64[($7 + 24 | 0) >> 3];
  HEAPF64[($8 + 48 | 0) >> 3] = +HEAPF64[($7 + 8 | 0) >> 3];
  $12 = +HEAPF64[($7 + 16 | 0) >> 3];
  HEAPF64[($8 + 24 | 0) >> 3] = $12;
  label$1 : {
   if (!($12 < 1.0 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($8 + 24 | 0) >> 3] = 1.0;
  }
  HEAP32[($7 + 4 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($7 + 4 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
     break label$2
    }
    SIGDiurnalROS__swap_28int_2c_20double_29(HEAP32[($8 + 4 | 0) >> 2] | 0 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7 + 24 | 0) >> 3]));
    HEAP32[($7 + 4 | 0) >> 2] = (HEAP32[($7 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  __stack_pointer = $7 + 48 | 0;
  return;
 }
 
 function SIGContain__setAttack_28ContainFlank_2c_20SIGContainForce__2c_20double_2c_20ContainTactic_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  var $8 = 0, $9 = 0;
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 44 | 0) >> 2] = $0;
  HEAP32[($8 + 40 | 0) >> 2] = $1;
  HEAP32[($8 + 36 | 0) >> 2] = $2;
  HEAPF64[($8 + 24 | 0) >> 3] = $3;
  HEAP32[($8 + 20 | 0) >> 2] = $4;
  HEAPF64[($8 + 8 | 0) >> 3] = $5;
  $9 = HEAP32[($8 + 44 | 0) >> 2] | 0;
  HEAP32[($9 + 56 | 0) >> 2] = HEAP32[($8 + 40 | 0) >> 2] | 0;
  HEAP32[($9 + 64 | 0) >> 2] = HEAP32[($8 + 36 | 0) >> 2] | 0;
  HEAPF64[($9 + 40 | 0) >> 3] = +HEAPF64[($8 + 24 | 0) >> 3];
  HEAP32[($9 + 60 | 0) >> 2] = HEAP32[($8 + 20 | 0) >> 2] | 0;
  HEAPF64[($9 + 32 | 0) >> 3] = +HEAPF64[($8 + 8 | 0) >> 3];
  HEAPF64[($9 + 176 | 0) >> 3] = +SIGContainForce__exhausted_28ContainFlank_29_20const(HEAP32[($9 + 64 | 0) >> 2] | 0 | 0, HEAP32[($9 + 56 | 0) >> 2] | 0 | 0);
  __stack_pointer = $8 + 48 | 0;
  return;
 }
 
 function SIGContain__reset_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $26 = 0.0, $118 = 0.0, $146 = 0, $156 = 0, $168 = 0, $180 = 0, $192 = 0, $204 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 108 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 108 | 0) >> 2] | 0;
  HEAPF64[($4 + 200 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 208 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 112 | 0) >> 3] = +HEAPF64[($4 + 40 | 0) >> 3];
  HEAPF64[($3 + 96 | 0) >> 3] = 1.0 / +HEAPF64[($4 + 24 | 0) >> 3];
  HEAPF64[($4 + 80 | 0) >> 3] = -+HEAPF64[($3 + 96 | 0) >> 3] * +HEAPF64[($3 + 96 | 0) >> 3] + 1.0;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4 + 80 | 0) >> 3] > 1.0e-05 & 1 | 0)) {
     break label$2
    }
    $26 = Math_sqrt(+HEAPF64[($4 + 80 | 0) >> 3]);
    break label$1;
   }
   $26 = +(0 | 0);
  }
  HEAPF64[($4 + 72 | 0) >> 3] = $26;
  HEAPF64[($4 + 88 | 0) >> 3] = Math_sqrt((1.0 - +HEAPF64[($4 + 72 | 0) >> 3]) / (1.0 + +HEAPF64[($4 + 72 | 0) >> 3]));
  HEAPF64[($3 + 88 | 0) >> 3] = 10.0 * +HEAPF64[($4 + 8 | 0) >> 3];
  HEAPF64[($4 + 96 | 0) >> 3] = (1.0 + +HEAPF64[($4 + 72 | 0) >> 3]) * Math_sqrt(+HEAPF64[($3 + 88 | 0) >> 3] / (3.141592653589793 * Math_sqrt(1.0 - +HEAPF64[($4 + 80 | 0) >> 3])));
  label$3 : {
   if (!(+HEAPF64[($4 + 16 | 0) >> 3] > .0001 & 1 | 0)) {
    break label$3
   }
   HEAPF64[($4 + 104 | 0) >> 3] = 60.0 * +HEAPF64[($4 + 96 | 0) >> 3] / +HEAPF64[($4 + 16 | 0) >> 3];
  }
  HEAPF64[($4 + 120 | 0) >> 3] = +HEAPF64[($4 + 16 | 0) >> 3] * (1.0 - +HEAPF64[($4 + 72 | 0) >> 3]) / (1.0 + +HEAPF64[($4 + 72 | 0) >> 3]);
  HEAPF64[($4 + 128 | 0) >> 3] = +HEAPF64[($4 + 120 | 0) >> 3] * +HEAPF64[($4 + 104 | 0) >> 3] / 60.0;
  HEAPF64[($4 + 128 | 0) >> 3] = +HEAPF64[($4 + 96 | 0) >> 3] * (1.0 - +HEAPF64[($4 + 72 | 0) >> 3]) / (1.0 + +HEAPF64[($4 + 72 | 0) >> 3]);
  HEAPF64[($4 + 136 | 0) >> 3] = +SIGContain__headPosition_28double_29_20const($4 | 0, +(+HEAPF64[($4 + 40 | 0) >> 3]));
  HEAPF64[($4 + 144 | 0) >> 3] = +HEAPF64[($4 + 136 | 0) >> 3] * (1.0 - +HEAPF64[($4 + 72 | 0) >> 3]) / (1.0 + +HEAPF64[($4 + 72 | 0) >> 3]);
  label$4 : {
   label$5 : {
    if (!((HEAP32[($4 + 60 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[($4 + 224 | 0) >> 3] = 3.141592653589793;
    HEAPF64[($4 + 216 | 0) >> 3] = 3.141592653589793;
    HEAPF64[($4 + 248 | 0) >> 3] = -+HEAPF64[($4 + 144 | 0) >> 3] - +HEAPF64[($4 + 32 | 0) >> 3];
    break label$4;
   }
   HEAPF64[($4 + 224 | 0) >> 3] = +(0 | 0);
   HEAPF64[($4 + 216 | 0) >> 3] = +(0 | 0);
   HEAPF64[($4 + 248 | 0) >> 3] = +HEAPF64[($4 + 136 | 0) >> 3] + +HEAPF64[($4 + 32 | 0) >> 3];
  }
  $118 = +HEAPF64[($4 + 136 | 0) >> 3];
  HEAPF64[($4 + 240 | 0) >> 3] = $118;
  HEAPF64[($4 + 232 | 0) >> 3] = $118;
  HEAPF64[($4 + 256 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 192 | 0) >> 2] = 0;
  HEAPF64[($4 + 184 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 168 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 160 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 152 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 264 | 0) >> 2] = 1;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0 | 0, 3810 | 0, 0 | 0);
  $146 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  HEAPF64[$3 >> 3] = +HEAPF64[($4 + 48 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, $146 & 1 | 0 | 0, 2576 | 0, $3 | 0);
  $156 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  HEAPF64[($3 + 16 | 0) >> 3] = +HEAPF64[($4 + 72 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, $156 & 1 | 0 | 0, 2559 | 0, $3 + 16 | 0 | 0);
  $168 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  HEAPF64[($3 + 32 | 0) >> 3] = +HEAPF64[($4 + 80 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, $168 & 1 | 0 | 0, 2542 | 0, $3 + 32 | 0 | 0);
  $180 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  HEAPF64[($3 + 48 | 0) >> 3] = +HEAPF64[($4 + 88 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, $180 & 1 | 0 | 0, 2627 | 0, $3 + 48 | 0 | 0);
  $192 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  HEAPF64[($3 + 64 | 0) >> 3] = +HEAPF64[($4 + 96 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, $192 & 1 | 0 | 0, 2593 | 0, $3 + 64 | 0 | 0);
  $204 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  HEAPF64[($3 + 80 | 0) >> 3] = +HEAPF64[($4 + 136 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($4 | 0, $204 & 1 | 0 | 0, 2610 | 0, $3 + 80 | 0 | 0);
  __stack_pointer = $3 + 112 | 0;
  return;
 }
 
 function SIGDiurnalROS__swap_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $7 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $7 = +HEAPF64[$5 >> 3];
  HEAPF64[(std____2__vector_double_2c_20std____2__allocator_double____operator_5b_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0) >> 3] = $7;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function SIGContain__headPosition_28double_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $5 = 0, $13 = 0.0, $19 = 0, $49 = 0.0, $55 = 0, $9 = 0, $36 = 0.0, $89 = 0.0, $102 = 0.0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 60 | 0) >> 2] = $0;
  HEAPF64[($4 + 48 | 0) >> 3] = $1;
  $5 = HEAP32[($4 + 60 | 0) >> 2] | 0;
  HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = +HEAPF64[($5 + 96 | 0) >> 3];
  $9 = HEAP32[($5 + 196 | 0) >> 2] | 0;
  $13 = +(HEAP32[($5 + 196 | 0) >> 2] | 0 | 0) / 60.0;
  label$1 : {
   label$2 : {
    if (!(Math_abs($13) < 2147483648.0)) {
     break label$2
    }
    $19 = ~~$13;
    break label$1;
   }
   $19 = -2147483648;
  }
  HEAPF64[$4 >> 3] = +(60 - ($9 - Math_imul($19, 60) | 0) | 0 | 0);
  label$3 : {
   if (!(+HEAPF64[($4 + 48 | 0) >> 3] < +HEAPF64[$4 >> 3] & 1 | 0)) {
    break label$3
   }
   HEAPF64[$4 >> 3] = +HEAPF64[($4 + 48 | 0) >> 3];
  }
  $36 = +SIGContain__getDiurnalSpreadRate_28double_29_20const($5 | 0, +(+(0 | 0)));
  HEAPF64[($4 + 32 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] + $36 * +HEAPF64[$4 >> 3] / 60.0;
  HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] - +HEAPF64[$4 >> 3];
  HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[$4 >> 3];
  $49 = +HEAPF64[($4 + 48 | 0) >> 3] / 60.0;
  label$4 : {
   label$5 : {
    if (!(Math_abs($49) < 2147483648.0)) {
     break label$5
    }
    $55 = ~~$49;
    break label$4;
   }
   $55 = -2147483648;
  }
  HEAP32[($4 + 40 | 0) >> 2] = $55 + 1 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = -+((HEAP32[($4 + 40 | 0) >> 2] | 0) - 1 | 0 | 0) * 60.0 + +HEAPF64[($4 + 48 | 0) >> 3];
  HEAP32[($4 + 44 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    label$8 : {
     label$9 : {
      if (!((HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) < ((HEAP32[($4 + 40 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[($4 + 24 | 0) >> 3] = 60.0;
      break label$8;
     }
     HEAPF64[($4 + 24 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3];
    }
    $89 = +SIGContain__getDiurnalSpreadRate_28double_29_20const($5 | 0, +(+HEAPF64[($4 + 16 | 0) >> 3]));
    HEAPF64[($4 + 32 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] + $89 * +HEAPF64[($4 + 24 | 0) >> 3] / 60.0;
    HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[($4 + 16 | 0) >> 3] + +HEAPF64[($4 + 24 | 0) >> 3];
    HEAP32[($4 + 44 | 0) >> 2] = (HEAP32[($4 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $102 = +HEAPF64[($4 + 32 | 0) >> 3];
  __stack_pointer = $4 + 64 | 0;
  return +$102;
 }
 
 function SIGContain___SIGContain_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $8 = 0, $17 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  HEAP32[$4 >> 2] = 3876 + 8 | 0;
  $8 = HEAP32[($4 + 64 | 0) >> 2] | 0;
  label$1 : {
   if (($8 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$8 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($8);
  }
  $17 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $17 | 0;
 }
 
 function SIGContain___SIGContain_28_29_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[12 | 0]($4) | 0;
  operator_20delete_28void__29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function SIGContain__calcU_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $13 = 0.0, $121 = 0.0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 60 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 60 | 0) >> 2] | 0;
  HEAPF64[($4 + 224 | 0) >> 3] = +HEAPF64[($4 + 216 | 0) >> 3];
  HEAPF64[($4 + 240 | 0) >> 3] = +HEAPF64[($4 + 232 | 0) >> 3];
  HEAP32[($4 + 264 | 0) >> 2] = 2;
  HEAPF64[$3 >> 3] = +HEAPF64[($4 + 48 | 0) >> 3];
  label$1 : while (1) {
   HEAPF64[($4 + 208 | 0) >> 3] = +(0 | 0);
   label$2 : {
    label$3 : {
     if (!(HEAP32[($4 + 192 | 0) >> 2] | 0)) {
      break label$3
     }
     $13 = +HEAPF64[($4 + 168 | 0) >> 3];
     break label$2;
    }
    $13 = +SIGContain__productionRatio_28double_29($4 | 0, +(+HEAPF64[($4 + 136 | 0) >> 3]));
   }
   HEAPF64[($4 + 152 | 0) >> 3] = $13;
   HEAPF64[($4 + 208 | 0) >> 3] = +HEAPF64[($4 + 208 | 0) >> 3] / 2.0;
   HEAPF64[($4 + 160 | 0) >> 3] = +SIGContain__productionRatio_28double_29($4 | 0, +(+HEAPF64[($4 + 48 | 0) >> 3] * .5 + +HEAPF64[($4 + 240 | 0) >> 3]));
   HEAPF64[($4 + 168 | 0) >> 3] = +SIGContain__productionRatio_28double_29($4 | 0, +(+HEAPF64[($4 + 240 | 0) >> 3] + +HEAPF64[($4 + 48 | 0) >> 3]));
   label$4 : {
    label$5 : {
     if (!(+HEAPF64[($4 + 208 | 0) >> 3] > 1.0 & 1 | 0)) {
      break label$5
     }
     HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] / 2.0;
     break label$4;
    }
   }
   if (+HEAPF64[($4 + 208 | 0) >> 3] > 1.0 & 1 | 0) {
    continue label$1
   }
   break label$1;
  };
  label$6 : {
   label$7 : {
    if ((SIGContain__calcUh_28double_2c_20double_2c_20double_2c_20double__29($4 | 0, +(+HEAPF64[($4 + 152 | 0) >> 3]), +(+HEAPF64[($4 + 240 | 0) >> 3]), +(+HEAPF64[($4 + 224 | 0) >> 3]), $3 + 8 | 0 | 0) | 0) & 1 | 0) {
     break label$7
    }
    HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[$3 >> 3];
    break label$6;
   }
   HEAPF64[($3 + 16 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] * +HEAPF64[($3 + 8 | 0) >> 3];
   label$8 : {
    if ((SIGContain__calcUh_28double_2c_20double_2c_20double_2c_20double__29($4 | 0, +(+HEAPF64[($4 + 160 | 0) >> 3]), +(+HEAPF64[($4 + 48 | 0) >> 3] * .5 + +HEAPF64[($4 + 240 | 0) >> 3]), +(+HEAPF64[($3 + 16 | 0) >> 3] * .5 + +HEAPF64[($4 + 224 | 0) >> 3]), $3 + 8 | 0 | 0) | 0) & 1 | 0) {
     break label$8
    }
    HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[$3 >> 3];
    break label$6;
   }
   HEAPF64[($3 + 24 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] * +HEAPF64[($3 + 8 | 0) >> 3];
   label$9 : {
    if ((SIGContain__calcUh_28double_2c_20double_2c_20double_2c_20double__29($4 | 0, +(+HEAPF64[($4 + 160 | 0) >> 3]), +(+HEAPF64[($4 + 48 | 0) >> 3] * .5 + +HEAPF64[($4 + 240 | 0) >> 3]), +(+HEAPF64[($3 + 24 | 0) >> 3] * .5 + +HEAPF64[($4 + 224 | 0) >> 3]), $3 + 8 | 0 | 0) | 0) & 1 | 0) {
     break label$9
    }
    HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[$3 >> 3];
    break label$6;
   }
   HEAPF64[($3 + 32 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] * +HEAPF64[($3 + 8 | 0) >> 3];
   label$10 : {
    if ((SIGContain__calcUh_28double_2c_20double_2c_20double_2c_20double__29($4 | 0, +(+HEAPF64[($4 + 168 | 0) >> 3]), +(+HEAPF64[($4 + 240 | 0) >> 3] + +HEAPF64[($4 + 48 | 0) >> 3]), +(+HEAPF64[($4 + 224 | 0) >> 3] + +HEAPF64[($3 + 32 | 0) >> 3]), $3 + 8 | 0 | 0) | 0) & 1 | 0) {
     break label$10
    }
    HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[$3 >> 3];
    break label$6;
   }
   HEAPF64[($3 + 40 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] * +HEAPF64[($3 + 8 | 0) >> 3];
   $121 = +HEAPF64[($3 + 24 | 0) >> 3] + +HEAPF64[($3 + 32 | 0) >> 3];
   HEAPF64[($4 + 216 | 0) >> 3] = +HEAPF64[($4 + 224 | 0) >> 3] + ($121 + $121 + (+HEAPF64[($3 + 16 | 0) >> 3] + +HEAPF64[($3 + 40 | 0) >> 3])) / 6.0;
   label$11 : {
    if (HEAP32[($4 + 192 | 0) >> 2] | 0) {
     break label$11
    }
    HEAPF64[($4 + 232 | 0) >> 3] = +HEAPF64[($4 + 136 | 0) >> 3];
   }
   HEAPF64[($4 + 232 | 0) >> 3] = +HEAPF64[($4 + 232 | 0) >> 3] + +HEAPF64[($4 + 48 | 0) >> 3];
   HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[$3 >> 3];
  }
  __stack_pointer = $3 + 64 | 0;
  return;
 }
 
 function SIGContain__productionRatio_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $5 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $45 = 0.0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 76 | 0) >> 2] = $0;
  HEAPF64[($4 + 64 | 0) >> 3] = $1;
  $5 = HEAP32[($4 + 76 | 0) >> 2] | 0;
  HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[($5 + 200 | 0) >> 3] + +HEAPF64[($5 + 40 | 0) >> 3] + +HEAPF64[($5 + 208 | 0) >> 3];
  HEAPF64[($4 + 48 | 0) >> 3] = +SIGContainForce__productionRate_28double_2c_20ContainFlank_29_20const(HEAP32[($5 + 64 | 0) >> 2] | 0 | 0, +(+HEAPF64[($4 + 56 | 0) >> 3]), HEAP32[($5 + 56 | 0) >> 2] | 0 | 0);
  HEAPF64[($4 + 40 | 0) >> 3] = +SIGContain__getDiurnalSpreadRate_28double_29_20const($5 | 0, +(+HEAPF64[($4 + 56 | 0) >> 3]));
  label$1 : {
   if (!(+HEAPF64[($4 + 40 | 0) >> 3] < .0001 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 40 | 0) >> 3] = .0001;
  }
  HEAPF64[($5 + 208 | 0) >> 3] = +HEAPF64[($5 + 48 | 0) >> 3] / +HEAPF64[($4 + 40 | 0) >> 3] * 60.0;
  HEAPF64[($4 + 32 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] / +HEAPF64[($4 + 40 | 0) >> 3];
  $36 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  $37 = +HEAPF64[($4 + 56 | 0) >> 3];
  $38 = +HEAPF64[($4 + 48 | 0) >> 3];
  HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[($4 + 40 | 0) >> 3];
  HEAPF64[($4 + 8 | 0) >> 3] = $38;
  HEAPF64[$4 >> 3] = $37;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($5 | 0, $36 & 1 | 0 | 0, 3513 | 0, $4 | 0);
  $45 = +HEAPF64[($4 + 32 | 0) >> 3];
  __stack_pointer = $4 + 80 | 0;
  return +$45;
 }
 
 function SIGContain__calcUh_28double_2c_20double_2c_20double_2c_20double__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  var $7 = 0, $8 = 0, $43 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $100 = 0.0, $162 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0;
  $7 = __stack_pointer - 208 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 204 | 0) >> 2] = $0;
  HEAPF64[($7 + 192 | 0) >> 3] = $1;
  HEAPF64[($7 + 184 | 0) >> 3] = $2;
  HEAPF64[($7 + 176 | 0) >> 3] = $3;
  HEAP32[($7 + 172 | 0) >> 2] = $4;
  $8 = HEAP32[($7 + 204 | 0) >> 2] | 0;
  HEAPF64[($7 + 160 | 0) >> 3] = +cos(+(+HEAPF64[($7 + 176 | 0) >> 3]));
  HEAPF64[($7 + 152 | 0) >> 3] = +sin(+(+HEAPF64[($7 + 176 | 0) >> 3]));
  HEAPF64[(HEAP32[($7 + 172 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  HEAPF64[($7 + 144 | 0) >> 3] = -+HEAPF64[($8 + 72 | 0) >> 3] * +HEAPF64[($7 + 160 | 0) >> 3] + 1.0;
  HEAPF64[($7 + 136 | 0) >> 3] = -+HEAPF64[($8 + 88 | 0) >> 3] * +HEAPF64[($8 + 88 | 0) >> 3] + +HEAPF64[($7 + 192 | 0) >> 3] * +HEAPF64[($7 + 192 | 0) >> 3] * +HEAPF64[($7 + 144 | 0) >> 3] / (+HEAPF64[($8 + 72 | 0) >> 3] * +HEAPF64[($7 + 160 | 0) >> 3] + 1.0);
  $43 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  $46 = (HEAP32[($8 + 192 | 0) >> 2] | 0) + 1 | 0;
  $47 = +HEAPF64[($7 + 192 | 0) >> 3];
  $48 = +HEAPF64[($7 + 184 | 0) >> 3];
  $49 = +HEAPF64[($7 + 176 | 0) >> 3];
  $50 = +HEAPF64[($7 + 152 | 0) >> 3];
  HEAPF64[($7 + 72 | 0) >> 3] = +HEAPF64[($7 + 160 | 0) >> 3];
  HEAPF64[($7 + 64 | 0) >> 3] = $50;
  HEAPF64[($7 + 56 | 0) >> 3] = $49;
  HEAPF64[($7 + 48 | 0) >> 3] = $48;
  HEAPF64[($7 + 40 | 0) >> 3] = $47;
  HEAP32[($7 + 32 | 0) >> 2] = $46;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($8 | 0, $43 & 1 | 0 | 0, 2280 | 0, $7 + 32 | 0 | 0);
  $70 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  $71 = +HEAPF64[($7 + 144 | 0) >> 3];
  $72 = +HEAPF64[($8 + 72 | 0) >> 3];
  $73 = +HEAPF64[($8 + 88 | 0) >> 3];
  HEAPF64[($7 + 104 | 0) >> 3] = +HEAPF64[($7 + 136 | 0) >> 3];
  HEAPF64[($7 + 96 | 0) >> 3] = $73;
  HEAPF64[($7 + 88 | 0) >> 3] = $72;
  HEAPF64[($7 + 80 | 0) >> 3] = $71;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($8 | 0, $70 & 1 | 0 | 0, 2210 | 0, $7 + 80 | 0 | 0);
  label$1 : {
   if (!(+HEAPF64[($7 + 136 | 0) >> 3] <= 1.0e-10 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($7 + 136 | 0) >> 3] = +(0 | 0);
  }
  HEAPF64[($7 + 128 | 0) >> 3] = +HEAPF64[($7 + 144 | 0) >> 3] * +HEAPF64[($7 + 184 | 0) >> 3];
  label$2 : {
   if (!(+HEAPF64[($8 + 32 | 0) >> 3] > .001 & 1 | 0)) {
    break label$2
   }
   $100 = +HEAPF64[($7 + 184 | 0) >> 3];
   HEAPF64[($7 + 128 | 0) >> 3] = +HEAPF64[($7 + 144 | 0) >> 3] * ((1.0 - +HEAPF64[($8 + 72 | 0) >> 3]) * (+HEAPF64[($8 + 32 | 0) >> 3] * Math_sqrt(1.0 - +HEAPF64[($8 + 80 | 0) >> 3]) / +exp(+(1.5 * +log(+(-(+HEAPF64[($8 + 80 | 0) >> 3] * +HEAPF64[($7 + 160 | 0) >> 3]) * +HEAPF64[($7 + 160 | 0) >> 3] + 1.0))))) + $100);
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($8 + 60 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[($7 + 120 | 0) >> 3] = +HEAPF64[($8 + 72 | 0) >> 3] * +HEAPF64[($7 + 152 | 0) >> 3] + -((1.0 + +HEAPF64[($8 + 72 | 0) >> 3]) * Math_sqrt(+HEAPF64[($7 + 136 | 0) >> 3]));
    break label$3;
   }
   HEAPF64[($7 + 120 | 0) >> 3] = +HEAPF64[($8 + 72 | 0) >> 3] * +HEAPF64[($7 + 152 | 0) >> 3] + (1.0 + +HEAPF64[($8 + 72 | 0) >> 3]) * Math_sqrt(+HEAPF64[($7 + 136 | 0) >> 3]);
  }
  HEAPF64[($7 + 112 | 0) >> 3] = +HEAPF64[($7 + 120 | 0) >> 3] / +HEAPF64[($7 + 128 | 0) >> 3];
  $162 = (HEAP32[(0 + 21128 | 0) >> 2] | 0 | 0) > (1 | 0);
  $164 = Math_sqrt(+HEAPF64[($7 + 136 | 0) >> 3]);
  $165 = +HEAPF64[($7 + 120 | 0) >> 3];
  $166 = +HEAPF64[($7 + 128 | 0) >> 3];
  HEAPF64[($7 + 24 | 0) >> 3] = +HEAPF64[($7 + 112 | 0) >> 3];
  HEAPF64[($7 + 16 | 0) >> 3] = $166;
  HEAPF64[($7 + 8 | 0) >> 3] = $165;
  HEAPF64[$7 >> 3] = $164;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($8 | 0, $162 & 1 | 0 | 0, 2462 | 0, $7 | 0);
  HEAPF64[(0 + 21120 | 0) >> 3] = +HEAPF64[($7 + 112 | 0) >> 3];
  HEAPF64[(HEAP32[($7 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[($7 + 112 | 0) >> 3];
  __stack_pointer = $7 + 208 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function SIGContain__getDiurnalSpreadRate_28double_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $5 = 0, $20 = 0.0, $26 = 0, $39 = 0.0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAPF64[($4 + 16 | 0) >> 3] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAPF64[$4 >> 3] = +HEAPF64[($4 + 16 | 0) >> 3] + +(HEAP32[($5 + 196 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(+HEAPF64[$4 >> 3] >= 1440.0 & 1 | 0)) {
     break label$1
    }
    HEAPF64[$4 >> 3] = +HEAPF64[$4 >> 3] - 1440.0;
    continue label$2;
   };
  }
  $20 = +HEAPF64[$4 >> 3] / 60.0;
  label$3 : {
   label$4 : {
    if (!(Math_abs($20) < 2147483648.0)) {
     break label$4
    }
    $26 = ~~$20;
    break label$3;
   }
   $26 = -2147483648;
  }
  HEAP32[($4 + 12 | 0) >> 2] = $26;
  label$5 : {
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) > (23 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4 + 12 | 0) >> 2] = 23;
  }
  $39 = +SIGDiurnalROS__at_28int_29_20const(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 32 | 0;
  return +$39;
 }
 
 function SIGContain__calcCoordinates_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 256 | 0) >> 3] = +sin(+(+HEAPF64[($4 + 216 | 0) >> 3])) * +HEAPF64[($4 + 232 | 0) >> 3] * +HEAPF64[($4 + 88 | 0) >> 3];
  HEAPF64[($4 + 248 | 0) >> 3] = (+cos(+(+HEAPF64[($4 + 216 | 0) >> 3])) + +HEAPF64[($4 + 72 | 0) >> 3]) * +HEAPF64[($4 + 232 | 0) >> 3] / (1.0 + +HEAPF64[($4 + 72 | 0) >> 3]);
  label$1 : {
   if (!(+HEAPF64[($4 + 32 | 0) >> 3] > .001 & 1 | 0)) {
    break label$1
   }
   HEAPF64[$3 >> 3] = +SIGContain__containPsi_28double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 216 | 0) >> 3]), +(+HEAPF64[($4 + 80 | 0) >> 3]));
   HEAPF64[($4 + 256 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] * +sin(+(+HEAPF64[$3 >> 3])) + +HEAPF64[($4 + 256 | 0) >> 3];
   HEAPF64[($4 + 248 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] * +cos(+(+HEAPF64[$3 >> 3])) + +HEAPF64[($4 + 248 | 0) >> 3];
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function SIGContain__containPsi_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $43 = 0.0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 44 | 0) >> 2] = $0;
  HEAPF64[($5 + 32 | 0) >> 3] = $1;
  HEAPF64[($5 + 24 | 0) >> 3] = $2;
  HEAPF64[($5 + 16 | 0) >> 3] = +HEAPF64[($5 + 32 | 0) >> 3] - 1.5707963267948966;
  label$1 : {
   if (!(Math_abs(+HEAPF64[($5 + 16 | 0) >> 3]) < 1.0e-05 & 1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!(+HEAPF64[($5 + 16 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF64[($5 + 32 | 0) >> 3] = 1.5708063267948966;
     break label$2;
    }
    HEAPF64[($5 + 32 | 0) >> 3] = 1.5707863267948965;
   }
  }
  HEAPF64[($5 + 8 | 0) >> 3] = +atan(+(+sin(+(+HEAPF64[($5 + 32 | 0) >> 3])) / +cos(+(+HEAPF64[($5 + 32 | 0) >> 3])) / Math_sqrt(1.0 - +HEAPF64[($5 + 24 | 0) >> 3])));
  label$4 : {
   if (!(+HEAPF64[($5 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAPF64[($5 + 8 | 0) >> 3] = +HEAPF64[($5 + 8 | 0) >> 3] + 3.141592653589793;
  }
  $43 = +HEAPF64[($5 + 8 | 0) >> 3];
  __stack_pointer = $5 + 48 | 0;
  return +$43;
 }
 
 function SIGContain__exhaustedTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 176 | 0) >> 3]);
 }
 
 function SIGContain__attackDistance_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3]);
 }
 
 function SIGContain__attackPointX_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 248 | 0) >> 3]);
 }
 
 function SIGContain__attackPointY_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 256 | 0) >> 3]);
 }
 
 function SIGContain__attackTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 40 | 0) >> 3]);
 }
 
 function SIGContain__distanceStep_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 48 | 0) >> 3]);
 }
 
 function SIGContain__fireBackAtAttack_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 144 | 0) >> 3]);
 }
 
 function SIGContain__fireBackAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 128 | 0) >> 3]);
 }
 
 function SIGContain__fireHeadAtAttack_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 136 | 0) >> 3]);
 }
 
 function SIGContain__fireHeadAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 3]);
 }
 
 function SIGContain__fireLwRatioAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3]);
 }
 
 function SIGContain__fireReportTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 104 | 0) >> 3]);
 }
 
 function SIGContain__fireSizeAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]);
 }
 
 function SIGContain__fireSpreadRateAtBack_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 128 | 0) >> 3]);
 }
 
 function SIGContain__fireSpreadRateAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 3]);
 }
 
 function SIGContain__force_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0;
 }
 
 function SIGDiurnalROS__at_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $15 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 < (std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $15 = +HEAPF64[(std____2__vector_double_2c_20std____2__allocator_double____operator_5b_5d_28unsigned_20long_29_20const($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 3];
   __stack_pointer = $4 + 16 | 0;
   return +$15;
  }
  abort();
 }
 
 function SIGContain__setFireStartTimeMinutes_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($5 + 196 | 0) >> 2] = 0;
  HEAPF64[($5 + 104 | 0) >> 3] = +(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  return +(+(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0));
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function SIGContain__resources_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContain__resourceArrival_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SIGContainForce__resourceArrival_28int_29_20const(HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContain__resourceBaseCost_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SIGContainForce__resourceBaseCost_28int_29_20const(HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContain__resourceDescription_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = SIGContainForce__resourceDescription_28int_29_20const(HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $8 | 0;
 }
 
 function SIGContain__resourceDuration_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SIGContainForce__resourceDuration_28int_29_20const(HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContain__resourceHourCost_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SIGContainForce__resourceHourCost_28int_29_20const(HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContain__resourceProduction_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SIGContainForce__resourceProduction_28int_29_20const(HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____operator_5b_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function SIGContain__simulationStep_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContain__simulationTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 184 | 0) >> 3]);
 }
 
 function SIGContain__status_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContain__step_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $69 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  SIGContain__calcU_28_29($4 | 0);
  HEAP32[($4 + 192 | 0) >> 2] = (HEAP32[($4 + 192 | 0) >> 2] | 0) + 1 | 0;
  HEAPF64[($4 + 184 | 0) >> 3] = +SIGContain__timeSinceReport_28double_29_20const($4 | 0, +(+HEAPF64[($4 + 232 | 0) >> 3]));
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 264 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($4 + 264 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (HEAP32[($4 + 60 | 0) >> 2] | 0) {
      break label$4
     }
     if (!(+HEAPF64[($4 + 216 | 0) >> 3] >= 3.141592653589793 & 1 | 0)) {
      break label$4
     }
     HEAP32[($4 + 264 | 0) >> 2] = 3;
     HEAPF64[($4 + 232 | 0) >> 3] = +HEAPF64[($4 + 240 | 0) >> 3] - +HEAPF64[($4 + 48 | 0) >> 3] * +HEAPF64[($4 + 224 | 0) >> 3] / (+HEAPF64[($4 + 224 | 0) >> 3] + Math_abs(+HEAPF64[($4 + 216 | 0) >> 3]));
     HEAPF64[($4 + 216 | 0) >> 3] = 3.141592653589793;
     break label$3;
    }
    label$5 : {
     if (!((HEAP32[($4 + 60 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$5
     }
     if (!(+HEAPF64[($4 + 216 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($4 + 264 | 0) >> 2] = 3;
     HEAPF64[($4 + 232 | 0) >> 3] = +HEAPF64[($4 + 240 | 0) >> 3] + +HEAPF64[($4 + 48 | 0) >> 3] * +HEAPF64[($4 + 224 | 0) >> 3] / (+HEAPF64[($4 + 224 | 0) >> 3] + Math_abs(+HEAPF64[($4 + 216 | 0) >> 3]));
     HEAPF64[($4 + 216 | 0) >> 3] = +(0 | 0);
    }
   }
   SIGContain__calcCoordinates_28_29($4 | 0);
   HEAPF64[($4 + 200 | 0) >> 3] = +HEAPF64[($4 + 200 | 0) >> 3] + +HEAPF64[($4 + 208 | 0) >> 3];
   HEAPF64[($4 + 112 | 0) >> 3] = +HEAPF64[($4 + 200 | 0) >> 3] + +HEAPF64[($4 + 40 | 0) >> 3];
   HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($4 + 264 | 0) >> 2] | 0;
  }
  $69 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $69 | 0;
 }
 
 function SIGContain__timeSinceReport_28double_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[($4 + 20 | 0) >> 2] = $0;
  HEAPF64[($4 + 8 | 0) >> 3] = $1;
  $5 = HEAP32[($4 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($5 + 16 | 0) >> 3] > 1.0e-05 & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 24 | 0) >> 3] = 60.0 * (+HEAPF64[($4 + 8 | 0) >> 3] - +HEAPF64[($5 + 96 | 0) >> 3]) / +HEAPF64[($5 + 16 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($4 + 24 | 0) >> 3]);
 }
 
 function SIGContain__tactic_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__SIGContainSim_28double_2c_20double_2c_20SIGDiurnalROS__2c_20int_2c_20double_2c_20SIGContainForce__2c_20ContainTactic_2c_20double_2c_20bool_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  $13 = $13 | 0;
  var $16 = 0, $18 = 0, $70 = 0, $172 = 0, $188 = 0, $204 = 0, $220 = 0, $236 = 0, $252 = 0, $165 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $80 = 0.0, $86 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $118 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $132 = 0, $133 = 0.0, $145 = 0, $146 = 0, $153 = 0, $154 = 0.0, $268 = 0;
  $16 = __stack_pointer - 224 | 0;
  __stack_pointer = $16;
  HEAP32[($16 + 216 | 0) >> 2] = $0;
  HEAPF64[($16 + 208 | 0) >> 3] = $1;
  HEAPF64[($16 + 200 | 0) >> 3] = $2;
  HEAP32[($16 + 196 | 0) >> 2] = $3;
  HEAP32[($16 + 192 | 0) >> 2] = $4;
  HEAPF64[($16 + 184 | 0) >> 3] = $5;
  HEAP32[($16 + 180 | 0) >> 2] = $6;
  HEAP32[($16 + 176 | 0) >> 2] = $7;
  HEAPF64[($16 + 168 | 0) >> 3] = $8;
  HEAP8[($16 + 167 | 0) >> 0] = $9;
  HEAP32[($16 + 160 | 0) >> 2] = $10;
  HEAP32[($16 + 156 | 0) >> 2] = $11;
  HEAP32[($16 + 152 | 0) >> 2] = $12;
  HEAP32[($16 + 148 | 0) >> 2] = $13;
  $18 = HEAP32[($16 + 216 | 0) >> 2] | 0;
  HEAP32[($16 + 220 | 0) >> 2] = $18;
  HEAPF64[$18 >> 3] = +(0 | 0);
  HEAPF64[($18 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[($18 + 24 | 0) >> 3] = +(0 | 0);
  HEAPF64[($18 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($18 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[($18 + 48 | 0) >> 3] = +(0 | 0);
  HEAPF64[($18 + 56 | 0) >> 3] = +(0 | 0);
  HEAPF64[($18 + 64 | 0) >> 3] = +(0 | 0);
  HEAP32[($18 + 72 | 0) >> 2] = 0;
  HEAP32[($18 + 76 | 0) >> 2] = 0;
  HEAP32[($18 + 80 | 0) >> 2] = 0;
  HEAP32[($18 + 84 | 0) >> 2] = 0;
  HEAP32[($18 + 88 | 0) >> 2] = 0;
  HEAP32[($18 + 92 | 0) >> 2] = 0;
  HEAP32[($18 + 96 | 0) >> 2] = 0;
  HEAP32[($18 + 100 | 0) >> 2] = 0;
  HEAP32[($18 + 104 | 0) >> 2] = HEAP32[($16 + 180 | 0) >> 2] | 0;
  HEAP32[($18 + 108 | 0) >> 2] = HEAP32[($16 + 160 | 0) >> 2] | 0;
  HEAP32[($18 + 112 | 0) >> 2] = HEAP32[($16 + 156 | 0) >> 2] | 0;
  HEAP32[($18 + 116 | 0) >> 2] = 0;
  HEAP32[($18 + 120 | 0) >> 2] = 0;
  HEAP32[($18 + 124 | 0) >> 2] = 0;
  HEAP8[($18 + 128 | 0) >> 0] = (HEAPU8[($16 + 167 | 0) >> 0] | 0) & 1 | 0;
  HEAP32[($18 + 132 | 0) >> 2] = HEAP32[($16 + 152 | 0) >> 2] | 0;
  HEAP32[($18 + 136 | 0) >> 2] = HEAP32[($16 + 148 | 0) >> 2] | 0;
  HEAP32[($16 + 144 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($18 + 112 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($18 + 112 | 0) >> 2] = 10;
  }
  HEAPF64[($16 + 136 | 0) >> 3] = +HEAPF64[($16 + 200 | 0) >> 3] / 60.0;
  HEAPF64[($16 + 128 | 0) >> 3] = +SIGContainForce__firstArrival_28ContainFlank_29_20const(HEAP32[($18 + 104 | 0) >> 2] | 0 | 0, 0 | 0);
  $70 = operator_20new_28unsigned_20long_29(272 | 0) | 0;
  $71 = +HEAPF64[($16 + 208 | 0) >> 3];
  $72 = +HEAPF64[($16 + 200 | 0) >> 3];
  $73 = HEAP32[($16 + 196 | 0) >> 2] | 0;
  $74 = HEAP32[($16 + 192 | 0) >> 2] | 0;
  $75 = +HEAPF64[($16 + 184 | 0) >> 3];
  $76 = +HEAPF64[($16 + 136 | 0) >> 3];
  $77 = HEAP32[($16 + 180 | 0) >> 2] | 0;
  $78 = +HEAPF64[($16 + 128 | 0) >> 3];
  $79 = HEAP32[($16 + 176 | 0) >> 2] | 0;
  $80 = +HEAPF64[($16 + 168 | 0) >> 3];
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iiddiiddiidid(13 | 0, $70 | 0, +$71, +$72, $73 | 0, $74 | 0, +$75, +$76, 0 | 0, $77 | 0, +$78, $79 | 0, +$80) | 0;
  $86 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($86 | 0) == (1 | 0) & 1 | 0) {
      break label$4
     }
     HEAP32[($18 + 96 | 0) >> 2] = $70;
     if (!((HEAP32[($16 + 144 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$3
     }
     $102 = HEAP32[($18 + 96 | 0) >> 2] | 0;
     $103 = +HEAPF64[($16 + 208 | 0) >> 3];
     $104 = +HEAPF64[($16 + 200 | 0) >> 3];
     $105 = +HEAPF64[($16 + 184 | 0) >> 3];
     $106 = HEAP32[($16 + 176 | 0) >> 2] | 0;
     HEAPF64[($16 + 48 | 0) >> 3] = +HEAPF64[($16 + 168 | 0) >> 3];
     HEAP32[($16 + 40 | 0) >> 2] = $106;
     HEAPF64[($16 + 32 | 0) >> 3] = $105;
     HEAPF64[($16 + 24 | 0) >> 3] = $104;
     HEAPF64[($16 + 16 | 0) >> 3] = $103;
     SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($102 | 0, 1 | 0, 3705 | 0, $16 + 16 | 0 | 0);
     $118 = HEAP32[($18 + 96 | 0) >> 2] | 0;
     $121 = (HEAPU8[($16 + 167 | 0) >> 0] | 0) & 1 | 0;
     $122 = HEAP32[($16 + 160 | 0) >> 2] | 0;
     $123 = HEAP32[($16 + 156 | 0) >> 2] | 0;
     $124 = HEAP32[($16 + 152 | 0) >> 2] | 0;
     HEAP32[($16 + 80 | 0) >> 2] = HEAP32[($16 + 148 | 0) >> 2] | 0;
     HEAP32[($16 + 76 | 0) >> 2] = $124;
     HEAP32[($16 + 72 | 0) >> 2] = $123;
     HEAP32[($16 + 68 | 0) >> 2] = $122;
     HEAP32[($16 + 64 | 0) >> 2] = $121;
     SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($118 | 0, 1 | 0, 3576 | 0, $16 + 64 | 0 | 0);
     $132 = HEAP32[($18 + 96 | 0) >> 2] | 0;
     $133 = +HEAPF64[($16 + 128 | 0) >> 3];
     HEAP32[($16 + 104 | 0) >> 2] = SIGContainForce__resources_28_29_20const(HEAP32[($18 + 104 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[($16 + 96 | 0) >> 3] = $133;
     SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($132 | 0, 1 | 0, 3641 | 0, $16 + 96 | 0 | 0);
     SIGContainForce__logResources_28bool_2c_20SIGContain_20const__29_20const(HEAP32[($16 + 180 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0, HEAP32[($18 + 96 | 0) >> 2] | 0 | 0);
     break label$3;
    }
    $145 = __cxa_find_matching_catch_2() | 0;
    $146 = getTempRet0() | 0;
    HEAP32[($16 + 124 | 0) >> 2] = $145;
    HEAP32[($16 + 120 | 0) >> 2] = $146;
    operator_20delete_28void__29($70 | 0);
    break label$2;
   }
   label$5 : {
    if (!(+HEAPF64[($16 + 128 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$5
    }
    $153 = HEAP32[($18 + 96 | 0) >> 2] | 0;
    $154 = +HEAPF64[($16 + 128 | 0) >> 3];
    HEAP32[($16 + 8 | 0) >> 2] = SIGContainForce__resources_28_29_20const(HEAP32[($18 + 104 | 0) >> 2] | 0 | 0) | 0;
    HEAPF64[$16 >> 3] = $154;
    SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($153 | 0, 1 | 0, 3641 | 0, $16 | 0);
    SIGContainForce__logResources_28bool_2c_20SIGContain_20const__29_20const(HEAP32[($16 + 180 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0, HEAP32[($18 + 96 | 0) >> 2] | 0 | 0);
    $165 = __cxa_allocate_exception(4 | 0) | 0;
    HEAP32[$165 >> 2] = 1339;
    __cxa_throw($165 | 0, 19192 | 0, 0 | 0);
    abort();
   }
   HEAP32[($18 + 116 | 0) >> 2] = (HEAP32[($18 + 112 | 0) >> 2] | 0) + 1 | 0;
   $172 = HEAP32[($18 + 116 | 0) >> 2] | 0;
   HEAP32[($18 + 72 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($172 & 536870911 | 0 | 0) != ($172 | 0) & 1 | 0 ? -1 : $172 << 3 | 0) | 0) | 0;
   SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(1127 | 0, 157 | 0, HEAP32[($18 + 72 | 0) >> 2] | 0 | 0, 1104 | 0, HEAP32[($18 + 116 | 0) >> 2] | 0 | 0);
   $188 = HEAP32[($18 + 116 | 0) >> 2] | 0;
   HEAP32[($18 + 76 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($188 & 536870911 | 0 | 0) != ($188 | 0) & 1 | 0 ? -1 : $188 << 3 | 0) | 0) | 0;
   SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(1127 | 0, 160 | 0, HEAP32[($18 + 76 | 0) >> 2] | 0 | 0, 1311 | 0, HEAP32[($18 + 116 | 0) >> 2] | 0 | 0);
   $204 = HEAP32[($18 + 116 | 0) >> 2] | 0;
   HEAP32[($18 + 80 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($204 & 536870911 | 0 | 0) != ($204 | 0) & 1 | 0 ? -1 : $204 << 3 | 0) | 0) | 0;
   SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(1127 | 0, 163 | 0, HEAP32[($18 + 80 | 0) >> 2] | 0 | 0, 1051 | 0, HEAP32[($18 + 116 | 0) >> 2] | 0 | 0);
   $220 = HEAP32[($18 + 116 | 0) >> 2] | 0;
   HEAP32[($18 + 84 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($220 & 536870911 | 0 | 0) != ($220 | 0) & 1 | 0 ? -1 : $220 << 3 | 0) | 0) | 0;
   SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(1127 | 0, 166 | 0, HEAP32[($18 + 84 | 0) >> 2] | 0 | 0, 1040 | 0, HEAP32[($18 + 116 | 0) >> 2] | 0 | 0);
   $236 = HEAP32[($18 + 116 | 0) >> 2] | 0;
   HEAP32[($18 + 88 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($236 & 536870911 | 0 | 0) != ($236 | 0) & 1 | 0 ? -1 : $236 << 3 | 0) | 0) | 0;
   SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(1127 | 0, 169 | 0, HEAP32[($18 + 88 | 0) >> 2] | 0 | 0, 1550 | 0, HEAP32[($18 + 116 | 0) >> 2] | 0 | 0);
   $252 = HEAP32[($18 + 116 | 0) >> 2] | 0;
   HEAP32[($18 + 92 | 0) >> 2] = operator_20new_5b_5d_28unsigned_20long_29((($252 & 536870911 | 0 | 0) != ($252 | 0) & 1 | 0 ? -1 : $252 << 3 | 0) | 0) | 0;
   SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(1127 | 0, 172 | 0, HEAP32[($18 + 92 | 0) >> 2] | 0 | 0, 1202 | 0, HEAP32[($18 + 116 | 0) >> 2] | 0 | 0);
   $268 = HEAP32[($16 + 220 | 0) >> 2] | 0;
   __stack_pointer = $16 + 224 | 0;
   return $268 | 0;
  }
  HEAP32[($16 + 120 | 0) >> 2] | 0;
  __resumeException(HEAP32[($16 + 124 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 44 | 0) >> 2] = $0;
  HEAP32[($7 + 40 | 0) >> 2] = $1;
  HEAP32[($7 + 36 | 0) >> 2] = $2;
  HEAP32[($7 + 32 | 0) >> 2] = $3;
  HEAP32[($7 + 28 | 0) >> 2] = $4;
  label$1 : {
   if ((HEAP32[($7 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   $16 = HEAP32[(0 + 18280 | 0) >> 2] | 0;
   $17 = HEAP32[($7 + 44 | 0) >> 2] | 0;
   $18 = HEAP32[($7 + 40 | 0) >> 2] | 0;
   $19 = HEAP32[($7 + 28 | 0) >> 2] | 0;
   HEAP32[($7 + 12 | 0) >> 2] = HEAP32[($7 + 32 | 0) >> 2] | 0;
   HEAP32[($7 + 8 | 0) >> 2] = $19;
   HEAP32[($7 + 4 | 0) >> 2] = $18;
   HEAP32[$7 >> 2] = $17;
   fprintf($16 | 0, 1569 | 0, $7 | 0) | 0;
   abort();
   abort();
  }
  __stack_pointer = $7 + 48 | 0;
  return;
 }
 
 function SIGContainSim___SIGContainSim_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $102 = 0, $119 = 0, $12 = 0, $27 = 0, $42 = 0, $57 = 0, $72 = 0, $87 = 0, $129 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $12 = HEAP32[($4 + 72 | 0) >> 2] | 0;
   label$2 : {
    if (($12 | 0) == (0 | 0) & 1 | 0) {
     break label$2
    }
    operator_20delete_5b_5d_28void__29($12 | 0);
   }
   HEAP32[($4 + 72 | 0) >> 2] = 0;
  }
  label$3 : {
   if (!((HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $27 = HEAP32[($4 + 76 | 0) >> 2] | 0;
   label$4 : {
    if (($27 | 0) == (0 | 0) & 1 | 0) {
     break label$4
    }
    operator_20delete_5b_5d_28void__29($27 | 0);
   }
   HEAP32[($4 + 76 | 0) >> 2] = 0;
  }
  label$5 : {
   if (!((HEAP32[($4 + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   $42 = HEAP32[($4 + 80 | 0) >> 2] | 0;
   label$6 : {
    if (($42 | 0) == (0 | 0) & 1 | 0) {
     break label$6
    }
    operator_20delete_5b_5d_28void__29($42 | 0);
   }
   HEAP32[($4 + 80 | 0) >> 2] = 0;
  }
  label$7 : {
   if (!((HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$7
   }
   $57 = HEAP32[($4 + 84 | 0) >> 2] | 0;
   label$8 : {
    if (($57 | 0) == (0 | 0) & 1 | 0) {
     break label$8
    }
    operator_20delete_5b_5d_28void__29($57 | 0);
   }
   HEAP32[($4 + 84 | 0) >> 2] = 0;
  }
  label$9 : {
   if (!((HEAP32[($4 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   $72 = HEAP32[($4 + 88 | 0) >> 2] | 0;
   label$10 : {
    if (($72 | 0) == (0 | 0) & 1 | 0) {
     break label$10
    }
    operator_20delete_5b_5d_28void__29($72 | 0);
   }
   HEAP32[($4 + 88 | 0) >> 2] = 0;
  }
  label$11 : {
   if (!((HEAP32[($4 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$11
   }
   $87 = HEAP32[($4 + 92 | 0) >> 2] | 0;
   label$12 : {
    if (($87 | 0) == (0 | 0) & 1 | 0) {
     break label$12
    }
    operator_20delete_5b_5d_28void__29($87 | 0);
   }
   HEAP32[($4 + 92 | 0) >> 2] = 0;
  }
  label$13 : {
   if (!((HEAP32[($4 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$13
   }
   $102 = HEAP32[($4 + 96 | 0) >> 2] | 0;
   label$14 : {
    if (($102 | 0) == (0 | 0) & 1 | 0) {
     break label$14
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$102 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($102);
   }
   HEAP32[($4 + 96 | 0) >> 2] = 0;
  }
  label$15 : {
   if (!((HEAP32[($4 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$15
   }
   $119 = HEAP32[($4 + 100 | 0) >> 2] | 0;
   label$16 : {
    if (($119 | 0) == (0 | 0) & 1 | 0) {
     break label$16
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$119 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($119);
   }
   HEAP32[($4 + 100 | 0) >> 2] = 0;
  }
  $129 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $129 | 0;
 }
 
 function SIGContainSim__attackDistance_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__attackDistance_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__attackPointX_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__attackPointX_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__attackPointY_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__attackPointY_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__attackTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__attackTime_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__distanceStep_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__distanceStep_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__finalFireCost_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 3]);
 }
 
 function SIGContainSim__finalFireLine_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]);
 }
 
 function SIGContainSim__finalFirePerimeter_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 3]);
 }
 
 function SIGContainSim__finalFireSize_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3]);
 }
 
 function SIGContainSim__finalFireSweep_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3]);
 }
 
 function SIGContainSim__finalFireTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 40 | 0) >> 3]);
 }
 
 function SIGContainSim__finalResourcesUsed_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__finalStats_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $54 = 0, $46 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3];
  HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3];
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 24 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4 + 24 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3];
   HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
   HEAPF64[($4 + 32 | 0) >> 3] = +(0 | 0);
  }
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) < (SIGContainForce__resources_28_29_20const(HEAP32[($4 + 104 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!(+SIGContainForce__resourceArrival_28int_29_20const(HEAP32[($4 + 104 | 0) >> 2] | 0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) < +HEAPF64[($4 + 40 | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     HEAP32[($4 + 124 | 0) >> 2] = (HEAP32[($4 + 124 | 0) >> 2] | 0) + 1 | 0;
     $46 = +SIGContainForce__resourceCost_28int_2c_20double_29_20const(HEAP32[($4 + 104 | 0) >> 2] | 0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[($4 + 40 | 0) >> 3]));
     HEAPF64[$4 >> 3] = +HEAPF64[$4 >> 3] + $46;
    }
    HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $54 = 0;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0, $54 | 0, 3681 | 0, $54 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function SIGContainSim__fireBackAtAttack_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireBackAtAttack_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireBackAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireBackAtReport_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireHeadAtAttack_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireHeadAtAttack_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireHeadAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireHeadAtReport_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireHeadX_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__fireLwRatioAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireLwRatioAtReport_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__firePerimeterX_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__firePerimeterY_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__firePoints_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 116 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__fireReportTime_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireReportTime_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireSpreadRateAtBack_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireSpreadRateAtBack_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireSizeAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireSizeAtReport_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__fireSpreadRateAtReport_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = +SIGContain__fireSpreadRateAtReport_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$6;
 }
 
 function SIGContainSim__force_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = SIGContain__force_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function SIGContainSim__maximumSimulationSteps_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__minimumSimulationSteps_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 108 | 0) >> 2] | 0 | 0;
 }
 
 function SIGContainSim__run_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $113 = 0, $5 = 0, $205 = 0.0, $224 = 0.0, $243 = 0.0, $300 = 0.0, $348 = 0.0, $527 = 0.0, $533 = 0, $571 = 0.0, $708 = 0.0, $848 = 0, $916 = 0, $1193 = 0, $1200 = 0, $1204 = 0, $1208 = 0, $1212 = 0, $26 = 0, $31 = 0, $69 = 0, $74 = 0, $75 = 0, $77 = 0.0, $79 = 0.0, $455 = 0, $460 = 0, $461 = 0, $467 = 0.0, $473 = 0.0, $479 = 0.0, $485 = 0.0, $486 = 0.0, $489 = 0.0, $494 = 0.0, $495 = 0.0, $682 = 0, $687 = 0, $688 = 0, $689 = 0.0, $691 = 0, $713 = 0, $718 = 0, $719 = 0, $720 = 0.0, $722 = 0, $725 = 0, $726 = 0.0, $752 = 0, $757 = 0, $758 = 0, $759 = 0.0, $761 = 0, $782 = 0, $787 = 0, $788 = 0, $789 = 0.0, $791 = 0, $812 = 0, $817 = 0, $818 = 0, $819 = 0.0, $821 = 0, $822 = 0, $824 = 0.0, $828 = 0.0, $880 = 0, $885 = 0, $886 = 0, $887 = 0.0, $889 = 0, $890 = 0, $892 = 0.0, $896 = 0.0, $924 = 0, $929 = 0, $930 = 0, $931 = 0.0, $955 = 0, $960 = 0, $961 = 0, $962 = 0.0, $963 = 0, $992 = 0, $997 = 0, $998 = 0, $999 = 0.0, $1040 = 0, $1045 = 0, $1046 = 0, $1054 = 0, $1059 = 0, $1074 = 0, $1079 = 0, $1089 = 0, $1094 = 0, $1101 = 0, $1106 = 0, $1121 = 0, $1126 = 0, $1133 = 0, $1138 = 0, $1145 = 0, $1150 = 0, $1157 = 0, $1162 = 0;
  $3 = __stack_pointer - 784 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 780 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 780 | 0) >> 2] | 0;
  $5 = 0;
  HEAP32[($3 + 768 | 0) >> 2] = HEAP32[($5 + 3936 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3928 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3932 | 0) >> 2] | 0;
  $1193 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 760 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1193;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3920 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3924 | 0) >> 2] | 0;
  $1200 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 752 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1200;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3912 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3916 | 0) >> 2] | 0;
  $1204 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 744 | 0) >> 2] = $1204;
  HEAP32[($3 + 748 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3904 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3908 | 0) >> 2] | 0;
  $1208 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 736 | 0) >> 2] = $1208;
  HEAP32[($3 + 740 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3940 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3944 | 0) >> 2] | 0;
  $1212 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 728 | 0) >> 2] = $1212;
  HEAP32[($3 + 732 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($3 + 700 | 0) >> 2] = 0;
  HEAP8[($3 + 639 | 0) >> 0] = 1;
  HEAP8[($3 + 638 | 0) >> 0] = 0;
  HEAP32[($4 + 120 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAPU8[($3 + 639 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $26 = HEAP32[($4 + 96 | 0) >> 2] | 0;
    $31 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
    HEAP32[($3 + 416 | 0) >> 2] = HEAP32[($4 + 120 | 0) >> 2] | 0;
    SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($26 | 0, $31 & 1 | 0 | 0, 3417 | 0, $3 + 416 | 0 | 0);
    HEAP32[($3 + 632 | 0) >> 2] = 0;
    HEAPF64[((HEAP32[($4 + 72 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 216 | 0) >> 3];
    HEAPF64[((HEAP32[($4 + 76 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 232 | 0) >> 3];
    HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 248 | 0) >> 3];
    HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 256 | 0) >> 3];
    HEAPF64[($3 + 712 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 40 | 0) >> 3];
    $69 = HEAP32[($4 + 96 | 0) >> 2] | 0;
    $74 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) == (2 | 0);
    $75 = HEAP32[($3 + 632 | 0) >> 2] | 0;
    $77 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 216 | 0) >> 3];
    $79 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 232 | 0) >> 3];
    HEAPF64[($3 + 456 | 0) >> 3] = +HEAPF64[($3 + 712 | 0) >> 3];
    HEAPF64[($3 + 448 | 0) >> 3] = $79;
    HEAPF64[($3 + 440 | 0) >> 3] = $77;
    HEAP32[($3 + 432 | 0) >> 2] = $75;
    SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($69 | 0, $74 & 1 | 0 | 0, 2644 | 0, $3 + 432 | 0 | 0);
    HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
    HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
    HEAPF64[($4 + 32 | 0) >> 3] = +(0 | 0);
    HEAPF64[($3 + 640 | 0) >> 3] = +(0 | 0);
    HEAPF64[($3 + 648 | 0) >> 3] = +(0 | 0);
    HEAPF64[($3 + 656 | 0) >> 3] = +(0 | 0);
    HEAPF64[($3 + 664 | 0) >> 3] = +(0 | 0);
    label$3 : while (1) {
     $113 = 0;
     label$4 : {
      if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
       break label$4
      }
      $113 = 0;
      if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
       break label$4
      }
      $113 = 0;
      if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      $113 = 0;
      if (!(+HEAPF64[($3 + 640 | 0) >> 3] < +(HEAP32[($4 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      $113 = 0;
      if (!(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] < +(HEAP32[($4 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      $113 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] < +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 176 | 0) >> 3];
     }
     label$5 : {
      if (!($113 & 1 | 0)) {
       break label$5
      }
      SIGContain__step_28_29(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($3 + 632 | 0) >> 2] = (HEAP32[($3 + 632 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[((HEAP32[($4 + 72 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 216 | 0) >> 3];
      HEAPF64[((HEAP32[($4 + 76 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 232 | 0) >> 3];
      HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 248 | 0) >> 3];
      HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 256 | 0) >> 3];
      HEAPF64[($3 + 712 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3];
      label$6 : {
       label$7 : {
        if (!(+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($4 + 56 | 0) >> 3] & 1 | 0)) {
         break label$7
        }
        $205 = +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$6;
       }
       $205 = +HEAPF64[($4 + 56 | 0) >> 3];
      }
      HEAPF64[($4 + 56 | 0) >> 3] = $205;
      label$8 : {
       label$9 : {
        if (!(+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($4 + 48 | 0) >> 3] & 1 | 0)) {
         break label$9
        }
        $224 = +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$8;
       }
       $224 = +HEAPF64[($4 + 48 | 0) >> 3];
      }
      HEAPF64[($4 + 48 | 0) >> 3] = $224;
      label$10 : {
       label$11 : {
        if (!(+HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($4 + 64 | 0) >> 3] & 1 | 0)) {
         break label$11
        }
        $243 = +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$10;
       }
       $243 = +HEAPF64[($4 + 64 | 0) >> 3];
      }
      HEAPF64[($4 + 64 | 0) >> 3] = $243;
      HEAPF64[($3 + 672 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAPF64[($3 + 680 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAPF64[((HEAP32[($4 + 92 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = Math_sqrt(+HEAPF64[($3 + 672 | 0) >> 3] * +HEAPF64[($3 + 672 | 0) >> 3] + +HEAPF64[($3 + 680 | 0) >> 3] * +HEAPF64[($3 + 680 | 0) >> 3]);
      $300 = +HEAPF64[((HEAP32[($4 + 92 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($4 + 8 | 0) >> 3] = $300 + $300 + +HEAPF64[($4 + 8 | 0) >> 3];
      HEAPF64[($3 + 664 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($3 + 664 | 0) >> 3];
      HEAPF64[($3 + 656 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($3 + 656 | 0) >> 3];
      label$12 : {
       label$13 : {
        if (!(+HEAPF64[($3 + 664 | 0) >> 3] > +HEAPF64[($3 + 656 | 0) >> 3] & 1 | 0)) {
         break label$13
        }
        $348 = .5 * (+HEAPF64[($3 + 664 | 0) >> 3] - +HEAPF64[($3 + 656 | 0) >> 3]);
        break label$12;
       }
       $348 = .5 * (+HEAPF64[($3 + 656 | 0) >> 3] - +HEAPF64[($3 + 664 | 0) >> 3]);
      }
      HEAPF64[($3 + 688 | 0) >> 3] = $348;
      HEAPF64[($3 + 648 | 0) >> 3] = +(0 | 0);
      HEAP32[($3 + 628 | 0) >> 2] = 1;
      label$14 : {
       label$15 : while (1) {
        if (!((HEAP32[($3 + 628 | 0) >> 2] | 0 | 0) <= (HEAP32[($3 + 632 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$14
        }
        HEAPF64[($3 + 648 | 0) >> 3] = (+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 628 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + (((HEAP32[($3 + 628 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) * (+HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 628 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + (((HEAP32[($3 + 628 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) + +HEAPF64[($3 + 648 | 0) >> 3];
        HEAP32[($3 + 628 | 0) >> 2] = (HEAP32[($3 + 628 | 0) >> 2] | 0) + 1 | 0;
        continue label$15;
       };
      }
      label$16 : {
       if (!(+HEAPF64[($3 + 648 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAPF64[($3 + 648 | 0) >> 3] = -1.0 * +HEAPF64[($3 + 648 | 0) >> 3];
      }
      HEAPF64[($3 + 688 | 0) >> 3] = +HEAPF64[($3 + 648 | 0) >> 3] * .5;
      HEAPF64[($3 + 616 | 0) >> 3] = +SIGContainSim__UncontainedArea_28double_2c_20double_2c_20double_2c_20double_2c_20ContainTactic_29($4 | 0, +(+HEAPF64[((HEAP32[($4 + 76 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +(+SIGContainSim__fireLwRatioAtReport_28_29_20const($4 | 0)), +(+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +(+HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), SIGContainSim__tactic_28_29_20const($4 | 0) | 0 | 0);
      HEAPF64[($3 + 688 | 0) >> 3] = +HEAPF64[($3 + 688 | 0) >> 3] + +HEAPF64[($3 + 616 | 0) >> 3];
      HEAPF64[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = .2 * +HEAPF64[($3 + 688 | 0) >> 3];
      HEAPF64[($3 + 640 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (((HEAP32[($3 + 632 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      $455 = HEAP32[($4 + 96 | 0) >> 2] | 0;
      $460 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) == (2 | 0);
      $461 = HEAP32[($3 + 632 | 0) >> 2] | 0;
      $467 = +HEAPF64[((HEAP32[($4 + 72 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $473 = +HEAPF64[((HEAP32[($4 + 76 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $479 = +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $485 = +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 632 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $486 = +HEAPF64[($3 + 712 | 0) >> 3];
      $489 = +HEAPF64[($3 + 616 | 0) >> 3] * .2;
      $494 = (+HEAPF64[($3 + 688 | 0) >> 3] - +HEAPF64[($3 + 616 | 0) >> 3]) * .2;
      $495 = +HEAPF64[($3 + 640 | 0) >> 3];
      HEAPF64[($3 + 72 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3];
      HEAPF64[($3 + 64 | 0) >> 3] = $495;
      HEAPF64[($3 + 56 | 0) >> 3] = $494;
      HEAPF64[($3 + 48 | 0) >> 3] = $489;
      HEAPF64[($3 + 40 | 0) >> 3] = $486;
      HEAPF64[($3 + 32 | 0) >> 3] = $485;
      HEAPF64[($3 + 24 | 0) >> 3] = $479;
      HEAPF64[($3 + 16 | 0) >> 3] = $473;
      HEAPF64[($3 + 8 | 0) >> 3] = $467;
      HEAP32[$3 >> 2] = $461;
      SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($455 | 0, $460 & 1 | 0 | 0, 2353 | 0, $3 | 0);
      continue label$3;
     }
     break label$3;
    };
    label$17 : {
     if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$17
     }
     if (HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) {
      break label$17
     }
     $527 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 32 | 0) >> 3];
     $533 = (HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$533 >> 3] = +HEAPF64[$533 >> 3] - ($527 + $527);
    }
    HEAPF64[($3 + 664 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[(HEAP32[($4 + 80 | 0) >> 2] | 0) >> 3] + +HEAPF64[($3 + 664 | 0) >> 3];
    HEAPF64[($3 + 656 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[(HEAP32[($4 + 84 | 0) >> 2] | 0) >> 3] + +HEAPF64[($3 + 656 | 0) >> 3];
    label$18 : {
     label$19 : {
      if (!(+HEAPF64[($3 + 664 | 0) >> 3] > +HEAPF64[($3 + 656 | 0) >> 3] & 1 | 0)) {
       break label$19
      }
      $571 = .5 * (+HEAPF64[($3 + 664 | 0) >> 3] - +HEAPF64[($3 + 656 | 0) >> 3]);
      break label$18;
     }
     $571 = .5 * (+HEAPF64[($3 + 656 | 0) >> 3] - +HEAPF64[($3 + 664 | 0) >> 3]);
    }
    HEAPF64[($4 + 32 | 0) >> 3] = $571;
    HEAPF64[($4 + 32 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] * .2;
    HEAPF64[($3 + 648 | 0) >> 3] = +(0 | 0);
    HEAP32[($3 + 612 | 0) >> 2] = 1;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($3 + 612 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      HEAPF64[($3 + 648 | 0) >> 3] = (+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[($3 + 612 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + (((HEAP32[($3 + 612 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) * (+HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[($3 + 612 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + (((HEAP32[($3 + 612 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) + +HEAPF64[($3 + 648 | 0) >> 3];
      HEAP32[($3 + 612 | 0) >> 2] = (HEAP32[($3 + 612 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
    label$22 : {
     if (!(+HEAPF64[($3 + 648 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$22
     }
     HEAPF64[($3 + 648 | 0) >> 3] = -1.0 * +HEAPF64[($3 + 648 | 0) >> 3];
    }
    HEAPF64[($3 + 688 | 0) >> 3] = +HEAPF64[($3 + 648 | 0) >> 3] * .5;
    HEAPF64[($3 + 600 | 0) >> 3] = +SIGContainSim__UncontainedArea_28double_2c_20double_2c_20double_2c_20double_2c_20ContainTactic_29($4 | 0, +(+HEAPF64[((HEAP32[($4 + 76 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +(+SIGContainSim__fireLwRatioAtReport_28_29_20const($4 | 0)), +(+HEAPF64[((HEAP32[($4 + 80 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +(+HEAPF64[((HEAP32[($4 + 84 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), SIGContainSim__tactic_28_29_20const($4 | 0) | 0 | 0);
    HEAPF64[($3 + 688 | 0) >> 3] = +HEAPF64[($3 + 688 | 0) >> 3] + +HEAPF64[($3 + 600 | 0) >> 3];
    HEAPF64[($4 + 32 | 0) >> 3] = .2 * +HEAPF64[($3 + 688 | 0) >> 3];
    label$23 : {
     label$24 : {
      if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
       break label$24
      }
      label$25 : {
       label$26 : {
        if ((HEAPU8[($4 + 128 | 0) >> 0] | 0) & 1 | 0) {
         break label$26
        }
        HEAP8[($3 + 639 | 0) >> 0] = 0;
        $682 = HEAP32[($4 + 96 | 0) >> 2] | 0;
        $687 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
        $688 = HEAP32[($4 + 120 | 0) >> 2] | 0;
        $689 = +HEAPF64[($3 + 712 | 0) >> 3];
        $691 = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
        HEAPF64[($3 + 184 | 0) >> 3] = +HEAPF64[($3 + 712 | 0) >> 3];
        HEAP32[($3 + 176 | 0) >> 2] = $691;
        HEAPF64[($3 + 168 | 0) >> 3] = $689;
        HEAP32[($3 + 160 | 0) >> 2] = $688;
        SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($682 | 0, $687 & 1 | 0 | 0, 1682 | 0, $3 + 160 | 0 | 0);
        break label$25;
       }
       $708 = +SIGContainForce__nextArrival_28double_2c_20double_2c_20ContainFlank_29_20const(HEAP32[($4 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 40 | 0) >> 3]), +(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 176 | 0) >> 3]), 0 | 0);
       HEAPF64[($3 + 720 | 0) >> 3] = $708;
       label$27 : {
        label$28 : {
         if (!($708 > .01 & 1 | 0)) {
          break label$28
         }
         $713 = HEAP32[($4 + 96 | 0) >> 2] | 0;
         $718 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
         $719 = HEAP32[($4 + 120 | 0) >> 2] | 0;
         $720 = +HEAPF64[($3 + 712 | 0) >> 3];
         $722 = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
         $725 = (HEAP32[($4 + 120 | 0) >> 2] | 0) + 1 | 0;
         $726 = +HEAPF64[($3 + 720 | 0) >> 3];
         HEAPF64[($3 + 112 | 0) >> 3] = +SIGContainForce__productionRate_28double_2c_20ContainFlank_29_20const(HEAP32[($4 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 720 | 0) >> 3]), 0 | 0);
         HEAPF64[($3 + 104 | 0) >> 3] = $726;
         HEAP32[($3 + 100 | 0) >> 2] = $725;
         HEAP32[($3 + 96 | 0) >> 2] = $722;
         HEAPF64[($3 + 88 | 0) >> 3] = $720;
         HEAP32[($3 + 80 | 0) >> 2] = $719;
         SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($713 | 0, $718 & 1 | 0 | 0, 2770 | 0, $3 + 80 | 0 | 0);
         HEAP32[($4 + 120 | 0) >> 2] = (HEAP32[($4 + 120 | 0) >> 2] | 0) + 1 | 0;
         HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[($3 + 720 | 0) >> 3];
         SIGContain__reset_28_29(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0);
         HEAP8[($3 + 639 | 0) >> 0] = 1;
         break label$27;
        }
        HEAP8[($3 + 639 | 0) >> 0] = 0;
        $752 = HEAP32[($4 + 96 | 0) >> 2] | 0;
        $757 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
        $758 = HEAP32[($4 + 120 | 0) >> 2] | 0;
        $759 = +HEAPF64[($3 + 712 | 0) >> 3];
        $761 = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
        HEAPF64[($3 + 152 | 0) >> 3] = +HEAPF64[($3 + 712 | 0) >> 3];
        HEAP32[($3 + 144 | 0) >> 2] = $761;
        HEAPF64[($3 + 136 | 0) >> 3] = $759;
        HEAP32[($3 + 128 | 0) >> 2] = $758;
        SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($752 | 0, $757 & 1 | 0 | 0, 1819 | 0, $3 + 128 | 0 | 0);
        HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] = 5;
       }
      }
      break label$23;
     }
     label$29 : {
      label$30 : {
       if (!(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] >= +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 176 | 0) >> 3] & 1 | 0)) {
        break label$30
       }
       HEAP8[($3 + 639 | 0) >> 0] = 0;
       $782 = HEAP32[($4 + 96 | 0) >> 2] | 0;
       $787 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
       $788 = HEAP32[($4 + 120 | 0) >> 2] | 0;
       $789 = +HEAPF64[($3 + 712 | 0) >> 3];
       $791 = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
       HEAPF64[($3 + 216 | 0) >> 3] = +HEAPF64[($3 + 712 | 0) >> 3];
       HEAP32[($3 + 208 | 0) >> 2] = $791;
       HEAPF64[($3 + 200 | 0) >> 3] = $789;
       HEAP32[($3 + 192 | 0) >> 2] = $788;
       SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($782 | 0, $787 & 1 | 0 | 0, 1819 | 0, $3 + 192 | 0 | 0);
       HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] = 5;
       break label$29;
      }
      label$31 : {
       label$32 : {
        if (!((HEAP32[($3 + 632 | 0) >> 2] | 0 | 0) >= (HEAP32[($4 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$32
        }
        HEAPF64[($3 + 704 | 0) >> 3] = 2.0;
        $812 = HEAP32[($4 + 96 | 0) >> 2] | 0;
        $817 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
        $818 = HEAP32[($4 + 120 | 0) >> 2] | 0;
        $819 = +HEAPF64[($3 + 712 | 0) >> 3];
        $821 = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
        $822 = HEAP32[($4 + 112 | 0) >> 2] | 0;
        $824 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 48 | 0) >> 3];
        $828 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 48 | 0) >> 3] * +HEAPF64[($3 + 704 | 0) >> 3];
        HEAP32[($3 + 264 | 0) >> 2] = (HEAP32[($4 + 120 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[($3 + 256 | 0) >> 3] = $828;
        HEAPF64[($3 + 248 | 0) >> 3] = $824;
        HEAP32[($3 + 244 | 0) >> 2] = $822;
        HEAP32[($3 + 240 | 0) >> 2] = $821;
        HEAPF64[($3 + 232 | 0) >> 3] = $819;
        HEAP32[($3 + 224 | 0) >> 2] = $818;
        SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($812 | 0, $817 & 1 | 0 | 0, 2960 | 0, $3 + 224 | 0 | 0);
        $848 = HEAP32[($4 + 96 | 0) >> 2] | 0;
        HEAPF64[($848 + 48 | 0) >> 3] = +HEAPF64[($848 + 48 | 0) >> 3] * +HEAPF64[($3 + 704 | 0) >> 3];
        HEAP32[($4 + 120 | 0) >> 2] = (HEAP32[($4 + 120 | 0) >> 2] | 0) + 1 | 0;
        label$33 : {
         label$34 : {
          if ((HEAPU8[($3 + 638 | 0) >> 0] | 0) & 1 | 0) {
           break label$34
          }
          SIGContain__reset_28_29(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0);
          HEAP8[($3 + 639 | 0) >> 0] = 1;
          break label$33;
         }
         HEAP8[($3 + 639 | 0) >> 0] = 0;
        }
        HEAP8[($3 + 638 | 0) >> 0] = 1;
        break label$31;
       }
       label$35 : {
        label$36 : {
         if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break label$36
         }
         label$37 : {
          label$38 : {
           if (!((HEAP32[($3 + 632 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$38
           }
           if ((HEAPU8[($3 + 638 | 0) >> 0] | 0) & 1 | 0) {
            break label$38
           }
           HEAPF64[($3 + 704 | 0) >> 3] = .5;
           $880 = HEAP32[($4 + 96 | 0) >> 2] | 0;
           $885 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
           $886 = HEAP32[($4 + 120 | 0) >> 2] | 0;
           $887 = +HEAPF64[($3 + 712 | 0) >> 3];
           $889 = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
           $890 = HEAP32[($4 + 108 | 0) >> 2] | 0;
           $892 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 48 | 0) >> 3];
           $896 = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 48 | 0) >> 3] * +HEAPF64[($3 + 704 | 0) >> 3];
           HEAP32[($3 + 312 | 0) >> 2] = (HEAP32[($4 + 120 | 0) >> 2] | 0) + 1 | 0;
           HEAPF64[($3 + 304 | 0) >> 3] = $896;
           HEAPF64[($3 + 296 | 0) >> 3] = $892;
           HEAP32[($3 + 292 | 0) >> 2] = $890;
           HEAP32[($3 + 288 | 0) >> 2] = $889;
           HEAPF64[($3 + 280 | 0) >> 3] = $887;
           HEAP32[($3 + 272 | 0) >> 2] = $886;
           SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($880 | 0, $885 & 1 | 0 | 0, 3146 | 0, $3 + 272 | 0 | 0);
           $916 = HEAP32[($4 + 96 | 0) >> 2] | 0;
           HEAPF64[($916 + 48 | 0) >> 3] = +HEAPF64[($916 + 48 | 0) >> 3] * +HEAPF64[($3 + 704 | 0) >> 3];
           HEAP32[($4 + 120 | 0) >> 2] = (HEAP32[($4 + 120 | 0) >> 2] | 0) + 1 | 0;
           SIGContain__reset_28_29(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0);
           HEAP8[($3 + 639 | 0) >> 0] = 1;
           break label$37;
          }
          $924 = HEAP32[($4 + 96 | 0) >> 2] | 0;
          $929 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
          $930 = HEAP32[($4 + 120 | 0) >> 2] | 0;
          $931 = +HEAPF64[($3 + 712 | 0) >> 3];
          HEAP32[($3 + 336 | 0) >> 2] = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
          HEAPF64[($3 + 328 | 0) >> 3] = $931;
          HEAP32[($3 + 320 | 0) >> 2] = $930;
          SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($924 | 0, $929 & 1 | 0 | 0, 3435 | 0, $3 + 320 | 0 | 0);
          HEAP8[($3 + 639 | 0) >> 0] = 0;
         }
         break label$35;
        }
        label$39 : {
         label$40 : {
          if (!(+HEAPF64[($3 + 640 | 0) >> 3] >= +(HEAP32[($4 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$40
          }
          HEAPF64[($3 + 720 | 0) >> 3] = +SIGContainForce__nextArrival_28double_2c_20double_2c_20ContainFlank_29_20const(HEAP32[($4 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 40 | 0) >> 3]), +(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 176 | 0) >> 3]), 0 | 0);
          $955 = HEAP32[($4 + 96 | 0) >> 2] | 0;
          $960 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
          $961 = HEAP32[($4 + 120 | 0) >> 2] | 0;
          $962 = +HEAPF64[($3 + 640 | 0) >> 3];
          $963 = HEAP32[($4 + 132 | 0) >> 2] | 0;
          HEAPF64[($3 + 376 | 0) >> 3] = +HEAPF64[($3 + 712 | 0) >> 3];
          HEAP32[($3 + 368 | 0) >> 2] = $963;
          HEAPF64[($3 + 360 | 0) >> 3] = $962;
          HEAP32[($3 + 352 | 0) >> 2] = $961;
          SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($955 | 0, $960 & 1 | 0 | 0, 1938 | 0, $3 + 352 | 0 | 0);
          HEAP8[($3 + 639 | 0) >> 0] = 0;
          HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] = 7;
          break label$39;
         }
         label$41 : {
          label$42 : {
           if (!(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] > +((HEAP32[($4 + 136 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
            break label$42
           }
           HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] = +(HEAP32[($4 + 136 | 0) >> 2] | 0 | 0);
           HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] = 8;
           HEAP8[($3 + 639 | 0) >> 0] = 0;
           break label$41;
          }
          $992 = HEAP32[($4 + 96 | 0) >> 2] | 0;
          $997 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) >= (1 | 0);
          $998 = HEAP32[($4 + 120 | 0) >> 2] | 0;
          $999 = +HEAPF64[($3 + 712 | 0) >> 3];
          HEAP32[($3 + 400 | 0) >> 2] = HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
          HEAPF64[($3 + 392 | 0) >> 3] = $999;
          HEAP32[($3 + 384 | 0) >> 2] = $998;
          SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($992 | 0, $997 & 1 | 0 | 0, 3333 | 0, $3 + 384 | 0 | 0);
          HEAP8[($3 + 639 | 0) >> 0] = 1;
         }
        }
       }
      }
     }
    }
    continue label$2;
   };
  }
  label$43 : {
   if (!((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
    break label$43
   }
   if (HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) {
    break label$43
   }
   if (!(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 32 | 0) >> 3] > .01 & 1 | 0)) {
    break label$43
   }
  }
  label$44 : {
   if (!(+HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] > +((HEAP32[($4 + 136 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
    break label$44
   }
   HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 112 | 0) >> 3] = +(HEAP32[($4 + 136 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] = 8;
  }
  SIGContainSim__finalStats_28_29($4 | 0);
  $1040 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1045 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  $1046 = HEAP32[($4 + 120 | 0) >> 2] | 0;
  HEAPF64[($3 + 472 | 0) >> 3] = +HEAPF64[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 48 | 0) >> 3];
  HEAP32[($3 + 464 | 0) >> 2] = $1046;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1040 | 0, $1045 & 1 | 0 | 0, 2177 | 0, $3 + 464 | 0 | 0);
  $1054 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1059 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAP32[($3 + 480 | 0) >> 2] = HEAP32[(($3 + 728 | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1054 | 0, $1059 & 1 | 0 | 0, 2034 | 0, $3 + 480 | 0 | 0);
  $1074 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1079 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAP32[($3 + 496 | 0) >> 2] = (HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 192 | 0) >> 2] | 0) + 1 | 0;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1074 | 0, $1079 & 1 | 0 | 0, 2678 | 0, $3 + 496 | 0 | 0);
  $1089 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1094 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAPF64[($3 + 512 | 0) >> 3] = +HEAPF64[($4 + 40 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1089 | 0, $1094 & 1 | 0 | 0, 2108 | 0, $3 + 512 | 0 | 0);
  $1101 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1106 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAP32[($3 + 528 | 0) >> 2] = HEAP32[(($3 + 736 | 0) + ((HEAP32[((HEAP32[($4 + 96 | 0) >> 2] | 0) + 264 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1101 | 0, $1106 & 1 | 0 | 0, 2080 | 0, $3 + 528 | 0 | 0);
  $1121 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1126 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAPF64[($3 + 544 | 0) >> 3] = +HEAPF64[($4 + 8 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1121 | 0, $1126 & 1 | 0 | 0, 2143 | 0, $3 + 544 | 0 | 0);
  $1133 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1138 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAPF64[($3 + 560 | 0) >> 3] = +HEAPF64[($4 + 24 | 0) >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1133 | 0, $1138 & 1 | 0 | 0, 2736 | 0, $3 + 560 | 0 | 0);
  $1145 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1150 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAP32[($3 + 576 | 0) >> 2] = HEAP32[($4 + 124 | 0) >> 2] | 0;
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1145 | 0, $1150 & 1 | 0 | 0, 2707 | 0, $3 + 576 | 0 | 0);
  $1157 = HEAP32[($4 + 96 | 0) >> 2] | 0;
  $1162 = (HEAP32[($3 + 700 | 0) >> 2] | 0 | 0) > (0 | 0);
  HEAPF64[($3 + 592 | 0) >> 3] = +HEAPF64[$4 >> 3];
  SIGContain__containLog_28bool_2c_20char_20const__2c_20____29_20const($1157 | 0, $1162 & 1 | 0 | 0, 3778 | 0, $3 + 592 | 0 | 0);
  __stack_pointer = $3 + 784 | 0;
  return;
 }
 
 function SIGContainSim__tactic_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = SIGContain__tactic_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function SIGContainSim__UncontainedArea_28double_2c_20double_2c_20double_2c_20double_2c_20ContainTactic_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  var $8 = 0, $144 = 0.0;
  $8 = __stack_pointer - 144 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 140 | 0) >> 2] = $0;
  HEAPF64[($8 + 128 | 0) >> 3] = $1;
  HEAPF64[($8 + 120 | 0) >> 3] = $2;
  HEAPF64[($8 + 112 | 0) >> 3] = $3;
  HEAPF64[($8 + 104 | 0) >> 3] = $4;
  HEAP32[($8 + 100 | 0) >> 2] = $5;
  label$1 : {
   if (!(+HEAPF64[($8 + 120 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($8 + 120 | 0) >> 3] = 1.00000001;
  }
  HEAPF64[($8 + 88 | 0) >> 3] = Math_sqrt(1.0 - 1.0 / (+HEAPF64[($8 + 120 | 0) >> 3] * +HEAPF64[($8 + 120 | 0) >> 3]));
  HEAPF64[($8 + 80 | 0) >> 3] = +HEAPF64[($8 + 128 | 0) >> 3] / (1.0 + +HEAPF64[($8 + 88 | 0) >> 3]);
  HEAPF64[($8 + 72 | 0) >> 3] = +HEAPF64[($8 + 80 | 0) >> 3] / +HEAPF64[($8 + 120 | 0) >> 3];
  HEAPF64[($8 + 64 | 0) >> 3] = -+HEAPF64[($8 + 80 | 0) >> 3] * +HEAPF64[($8 + 88 | 0) >> 3] + +HEAPF64[($8 + 112 | 0) >> 3];
  label$2 : {
   if (!(+HEAPF64[($8 + 64 | 0) >> 3] < -+HEAPF64[($8 + 80 | 0) >> 3] & 1 | 0)) {
    break label$2
   }
   HEAPF64[($8 + 64 | 0) >> 3] = -+HEAPF64[($8 + 80 | 0) >> 3];
   HEAPF64[($8 + 104 | 0) >> 3] = +(0 | 0);
  }
  label$3 : {
   if (!(+HEAPF64[($8 + 64 | 0) >> 3] > +HEAPF64[($8 + 80 | 0) >> 3] & 1 | 0)) {
    break label$3
   }
   HEAPF64[($8 + 64 | 0) >> 3] = +HEAPF64[($8 + 80 | 0) >> 3];
   HEAPF64[($8 + 104 | 0) >> 3] = +(0 | 0);
  }
  HEAPF64[($8 + 56 | 0) >> 3] = Math_sqrt(+HEAPF64[($8 + 64 | 0) >> 3] * +HEAPF64[($8 + 64 | 0) >> 3] + +HEAPF64[($8 + 104 | 0) >> 3] * +HEAPF64[($8 + 104 | 0) >> 3]);
  HEAPF64[($8 + 48 | 0) >> 3] = +(0 | 0);
  label$4 : {
   label$5 : {
    if (!(+HEAPF64[($8 + 64 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[($8 + 48 | 0) >> 3] = +acos(+(+HEAPF64[($8 + 64 | 0) >> 3] / +HEAPF64[($8 + 56 | 0) >> 3]));
    break label$4;
   }
   HEAPF64[($8 + 40 | 0) >> 3] = +acos(+(-1.0 * +HEAPF64[($8 + 64 | 0) >> 3] / +HEAPF64[($8 + 56 | 0) >> 3]));
   HEAPF64[($8 + 48 | 0) >> 3] = 3.141592654 - +HEAPF64[($8 + 40 | 0) >> 3];
  }
  HEAPF64[($8 + 32 | 0) >> 3] = +sin(+(2.0 * +HEAPF64[($8 + 48 | 0) >> 3]));
  HEAPF64[($8 + 24 | 0) >> 3] = +cos(+(2.0 * +HEAPF64[($8 + 48 | 0) >> 3]));
  HEAPF64[($8 + 16 | 0) >> 3] = (+HEAPF64[($8 + 72 | 0) >> 3] - +HEAPF64[($8 + 80 | 0) >> 3]) * +HEAPF64[($8 + 32 | 0) >> 3] / ((+HEAPF64[($8 + 72 | 0) >> 3] - +HEAPF64[($8 + 80 | 0) >> 3]) * +HEAPF64[($8 + 24 | 0) >> 3] + (+HEAPF64[($8 + 80 | 0) >> 3] + +HEAPF64[($8 + 72 | 0) >> 3]));
  HEAPF64[($8 + 8 | 0) >> 3] = +HEAPF64[($8 + 80 | 0) >> 3] * +HEAPF64[($8 + 72 | 0) >> 3] / 2.0 * (+HEAPF64[($8 + 48 | 0) >> 3] - +atan(+(+HEAPF64[($8 + 16 | 0) >> 3])));
  HEAPF64[$8 >> 3] = +(0 | 0);
  HEAPF64[$8 >> 3] = +HEAPF64[($8 + 8 | 0) >> 3] - +HEAPF64[($8 + 64 | 0) >> 3] * +HEAPF64[($8 + 104 | 0) >> 3] / 2.0;
  label$6 : {
   if (HEAP32[($8 + 100 | 0) >> 2] | 0) {
    break label$6
   }
   HEAPF64[$8 >> 3] = 3.141592654 * +HEAPF64[($8 + 80 | 0) >> 3] * +HEAPF64[($8 + 72 | 0) >> 3] / 2.0 - +HEAPF64[$8 >> 3];
  }
  label$7 : {
   if (!(+HEAPF64[$8 >> 3] < +(0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[$8 >> 3] = +(0 | 0);
  }
  $144 = +HEAPF64[$8 >> 3];
  __stack_pointer = $8 + 144 | 0;
  return +$144;
 }
 
 function SIGContainSim__status_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = SIGContain__status_28_29_20const(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function SIGContainAdapter__SIGContainAdapter_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $27 = 0, $12 = 0, $29 = 0, $66 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[14 | 0]($4) | 0;
  $7 = $4 + 120 | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(15 | 0, $7 | 0) | 0;
  $12 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($12 | 0) == (1 | 0) & 1 | 0) {
      break label$3
     }
     HEAPF64[($4 + 112 | 0) >> 3] = 1.0;
     HEAP32[($4 + 132 | 0) >> 2] = 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     $27 = invoke_ii(16 | 0, 12 | 0) | 0;
     $29 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($29 | 0) == (1 | 0) & 1 | 0) {
      break label$2
     }
     SIGDiurnalROS__SIGDiurnalROS_28_29($27 | 0) | 0;
     HEAP32[($4 + 164 | 0) >> 2] = $27;
     HEAPF64[($4 + 136 | 0) >> 3] = +(0 | 0);
     HEAP8[($4 + 144 | 0) >> 0] = 1;
     HEAP32[($4 + 148 | 0) >> 2] = 250;
     HEAP32[($4 + 152 | 0) >> 2] = 1e3;
     HEAP32[($4 + 156 | 0) >> 2] = 1e3;
     HEAP32[($4 + 160 | 0) >> 2] = 1080;
     HEAPF64[($4 + 88 | 0) >> 3] = +(0 | 0);
     HEAPF64[($4 + 96 | 0) >> 3] = +(0 | 0);
     HEAP32[($4 + 104 | 0) >> 2] = 0;
     HEAPF64[($4 + 168 | 0) >> 3] = +(0 | 0);
     HEAPF64[($4 + 176 | 0) >> 3] = +(0 | 0);
     HEAPF64[($4 + 192 | 0) >> 3] = +(0 | 0);
     HEAPF64[($4 + 208 | 0) >> 3] = +(0 | 0);
     HEAPF64[($4 + 216 | 0) >> 3] = +(0 | 0);
     HEAPF64[($4 + 224 | 0) >> 3] = +(0 | 0);
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vi(17 | 0, $4 | 0);
     $66 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($66 | 0) == (1 | 0) & 1 | 0) {
      break label$2
     }
     __stack_pointer = $3 + 16 | 0;
     return $4 | 0;
    }
    $77 = __cxa_find_matching_catch_2() | 0;
    $78 = getTempRet0() | 0;
    HEAP32[($3 + 8 | 0) >> 2] = $77;
    HEAP32[($3 + 4 | 0) >> 2] = $78;
    break label$1;
   }
   $79 = __cxa_find_matching_catch_2() | 0;
   $80 = getTempRet0() | 0;
   HEAP32[($3 + 8 | 0) >> 2] = $79;
   HEAP32[($3 + 4 | 0) >> 2] = $80;
   FUNCTION_TABLE[18 | 0]($7) | 0;
  }
  FUNCTION_TABLE[19 | 0]($4) | 0;
  HEAP32[($3 + 4 | 0) >> 2] | 0;
  __resumeException(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGDiurnalROS__SIGDiurnalROS_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double____vector_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function SIGContainAdapter__doContainRun_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $100 = 0.0, $105 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $139 = 0, $155 = 0, $207 = 0.0, $208 = 0.0, $215 = 0, $262 = 0, $263 = 0, $300 = 0, $301 = 0;
  $3 = __stack_pointer - 336 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 332 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 332 | 0) >> 2] | 0;
  label$1 : {
   if (!(+HEAPF64[($4 + 96 | 0) >> 3] < 1.0e-05 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 96 | 0) >> 3] = 1.0e-05;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if (!((std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($4 + 120 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$4
     }
     if (!(+HEAPF64[($4 + 88 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3 + 328 | 0) >> 2] = 0;
     label$5 : {
      label$6 : while (1) {
       if (!((HEAP32[($3 + 328 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
        break label$5
       }
       SIGDiurnalROS__push_28double_29(HEAP32[($4 + 164 | 0) >> 2] | 0 | 0, +(+HEAPF64[($4 + 96 | 0) >> 3]));
       HEAP32[($3 + 328 | 0) >> 2] = (HEAP32[($3 + 328 | 0) >> 2] | 0) + 1 | 0;
       continue label$6;
      };
     }
     FUNCTION_TABLE[20 | 0]($3 + 256 | 0, 250) | 0;
     HEAP32[($3 + 252 | 0) >> 2] = $3 + 256 | 0;
     HEAP32[($3 + 248 | 0) >> 2] = 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($3 + 248 | 0) >> 2] | 0) >>> 0 < (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($4 + 120 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
        break label$7
       }
       HEAPF64[($3 + 320 | 0) >> 3] = +SIGContainResource__arrival_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAPF64[($3 + 312 | 0) >> 3] = +SIGContainResource__baseCost_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAP32[($3 + 308 | 0) >> 2] = SIGContainResource__description_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
       HEAPF64[($3 + 296 | 0) >> 3] = +SIGContainResource__duration_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAP32[($3 + 292 | 0) >> 2] = SIGContainResource__flank_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
       HEAPF64[($3 + 280 | 0) >> 3] = +SIGContainResource__hourCost_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAPF64[($3 + 272 | 0) >> 3] = +SIGContainResource__production_28_29_20const(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____operator_5b_5d_28unsigned_20long_29($4 + 120 | 0 | 0, HEAP32[($3 + 248 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAP32[($3 + 244 | 0) >> 2] = HEAP32[($3 + 308 | 0) >> 2] | 0;
       $93 = HEAP32[($3 + 252 | 0) >> 2] | 0;
       $94 = +HEAPF64[($3 + 320 | 0) >> 3];
       $95 = +HEAPF64[($3 + 272 | 0) >> 3];
       $96 = +HEAPF64[($3 + 296 | 0) >> 3];
       $97 = HEAP32[($3 + 292 | 0) >> 2] | 0;
       $98 = HEAP32[($3 + 244 | 0) >> 2] | 0;
       $99 = +HEAPF64[($3 + 312 | 0) >> 3];
       $100 = +HEAPF64[($3 + 280 | 0) >> 3];
       HEAP32[(0 + 22372 | 0) >> 2] = 0;
       invoke_iidddiidd(21 | 0, $93 | 0, +$94, +$95, +$96, $97 | 0, $98 | 0, +$99, +$100) | 0;
       $105 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
       HEAP32[(0 + 22372 | 0) >> 2] = 0;
       if (($105 | 0) == (1 | 0) & 1 | 0) {
        break label$3
       }
       HEAP32[($3 + 248 | 0) >> 2] = (HEAP32[($3 + 248 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
     $117 = +HEAPF64[($4 + 88 | 0) >> 3];
     $118 = +HEAPF64[($4 + 96 | 0) >> 3];
     $119 = HEAP32[($4 + 164 | 0) >> 2] | 0;
     $120 = HEAP32[($4 + 104 | 0) >> 2] | 0;
     $121 = +HEAPF64[($4 + 112 | 0) >> 3];
     $122 = HEAP32[($3 + 252 | 0) >> 2] | 0;
     $123 = HEAP32[($4 + 132 | 0) >> 2] | 0;
     $124 = +HEAPF64[($4 + 136 | 0) >> 3];
     $125 = HEAPU8[($4 + 144 | 0) >> 0] | 0;
     $126 = HEAP32[($4 + 148 | 0) >> 2] | 0;
     $127 = HEAP32[($4 + 152 | 0) >> 2] | 0;
     $128 = HEAP32[($4 + 156 | 0) >> 2] | 0;
     $129 = HEAP32[($4 + 160 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_iiddiidiidiiiii(22 | 0, $3 + 88 | 0 | 0, +$117, +$118, $119 | 0, $120 | 0, +$121, $122 | 0, $123 | 0, +$124, $125 & 1 | 0 | 0, $126 | 0, $127 | 0, $128 | 0, $129 | 0) | 0;
     $139 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($139 | 0) == (1 | 0) & 1 | 0) {
      break label$3
     }
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vi(23 | 0, $3 + 88 | 0 | 0);
     $155 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     label$9 : {
      label$10 : {
       if (($155 | 0) == (1 | 0) & 1 | 0) {
        break label$10
       }
       HEAPF64[($4 + 168 | 0) >> 3] = +SIGContainSim__finalFireCost_28_29_20const($3 + 88 | 0 | 0);
       HEAPF64[($4 + 176 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+SIGContainSim__finalFireLine_28_29_20const($3 + 88 | 0 | 0)), 4 | 0);
       HEAPF64[($4 + 192 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+SIGContainSim__finalFirePerimeter_28_29_20const($3 + 88 | 0 | 0)), 4 | 0);
       HEAPF64[($4 + 208 | 0) >> 3] = +AreaUnits__toBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+SIGContainSim__finalFireSize_28_29_20const($3 + 88 | 0 | 0)), 1 | 0);
       HEAPF64[($4 + 216 | 0) >> 3] = +AreaUnits__toBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+SIGContainSim__finalFireSweep_28_29_20const($3 + 88 | 0 | 0)), 1 | 0);
       HEAPF64[($4 + 224 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+SIGContainSim__finalFireTime_28_29_20const($3 + 88 | 0 | 0)), 0 | 0);
       HEAP32[($4 + 232 | 0) >> 2] = SIGContainSim__status_28_29_20const($3 + 88 | 0 | 0) | 0;
       HEAPF64[($3 + 80 | 0) >> 3] = 4.0 * (+HEAPF64[($4 + 112 | 0) >> 3] - 1.0);
       $207 = +HEAPF64[($3 + 80 | 0) >> 3];
       $208 = +HEAPF64[($4 + 96 | 0) >> 3];
       HEAP32[(0 + 22372 | 0) >> 2] = 0;
       invoke_vididi(24 | 0, $4 | 0, +$207, 4 | 0, +$208, 1 | 0);
       $215 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
       HEAP32[(0 + 22372 | 0) >> 2] = 0;
       if (($215 | 0) == (1 | 0) & 1 | 0) {
        break label$10
       }
       HEAP32[($3 + 76 | 0) >> 2] = 0;
       HEAPF64[($3 + 64 | 0) >> 3] = 1.0;
       HEAPF64[($3 + 56 | 0) >> 3] = +FireSize__getEllipticalA_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($4 | 0, HEAP32[($3 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 64 | 0) >> 3]), 0 | 0);
       HEAPF64[($3 + 48 | 0) >> 3] = +FireSize__getEllipticalB_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($4 | 0, HEAP32[($3 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 64 | 0) >> 3]), 0 | 0);
       HEAPF64[($3 + 40 | 0) >> 3] = +AreaUnits__toBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+HEAPF64[($4 + 88 | 0) >> 3]), 1 | 0);
       HEAPF64[($3 + 32 | 0) >> 3] = +(0 | 0);
       HEAPF64[($3 + 24 | 0) >> 3] = +(0 | 0);
       HEAPF64[($4 + 184 | 0) >> 3] = +(0 | 0);
       HEAPF64[($4 + 200 | 0) >> 3] = +(0 | 0);
       HEAPF64[($3 + 16 | 0) >> 3] = 3.141592653589793 * +HEAPF64[($3 + 56 | 0) >> 3] * +HEAPF64[($3 + 48 | 0) >> 3];
       HEAPF64[($3 + 8 | 0) >> 3] = +SIGContainForceAdapter__firstArrival_28ContainFlank_29_20const($4 + 120 | 0 | 0, 0 | 0);
       if (!(+HEAPF64[($3 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAPF64[($3 + 8 | 0) >> 3] = +(0 | 0);
       break label$9;
      }
      $262 = __cxa_find_matching_catch_2() | 0;
      $263 = getTempRet0() | 0;
      HEAP32[($3 + 240 | 0) >> 2] = $262;
      HEAP32[($3 + 236 | 0) >> 2] = $263;
      FUNCTION_TABLE[25 | 0]($3 + 88 | 0) | 0;
      break label$2;
     }
     label$11 : {
      if (!(+HEAPF64[($3 + 16 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
       break label$11
      }
      HEAPF64[($3 + 32 | 0) >> 3] = Math_sqrt(+HEAPF64[($3 + 40 | 0) >> 3] / +HEAPF64[($3 + 16 | 0) >> 3]);
      HEAPF64[($3 + 24 | 0) >> 3] = +HEAPF64[($3 + 32 | 0) >> 3] + +HEAPF64[($3 + 8 | 0) >> 3];
      HEAP32[($3 + 4 | 0) >> 2] = 0;
      HEAPF64[($4 + 184 | 0) >> 3] = +FireSize__getFirePerimeter_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($4 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 24 | 0) >> 3]), 0 | 0);
      HEAP32[$3 >> 2] = 0;
      HEAPF64[($4 + 200 | 0) >> 3] = +FireSize__getFireArea_28AreaUnits__AreaUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const($4 | 0, HEAP32[$3 >> 2] | 0 | 0, +(+HEAPF64[($3 + 24 | 0) >> 3]), 0 | 0);
     }
     FUNCTION_TABLE[25 | 0]($3 + 88 | 0) | 0;
     FUNCTION_TABLE[2 | 0]($3 + 256 | 0) | 0;
    }
    __stack_pointer = $3 + 336 | 0;
    return;
   }
   $300 = __cxa_find_matching_catch_2() | 0;
   $301 = getTempRet0() | 0;
   HEAP32[($3 + 240 | 0) >> 2] = $300;
   HEAP32[($3 + 236 | 0) >> 2] = $301;
  }
  FUNCTION_TABLE[2 | 0]($3 + 256 | 0) | 0;
  HEAP32[($3 + 236 | 0) >> 2] | 0;
  __resumeException(HEAP32[($3 + 240 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____vector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $18 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iiii(26 | 0, $4 + 8 | 0 | 0, $3 + 8 | 0 | 0, $3 | 0) | 0;
  $18 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($18 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   void_20std____2____debug_db_insert_c_std____2__vector_double_2c_20std____2__allocator_double____28std____2__vector_double_2c_20std____2__allocator_double____29($4 | 0);
   __stack_pointer = $3 + 16 | 0;
   return $4 | 0;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function SIGDiurnalROS__push_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  std____2__vector_double_2c_20std____2__allocator_double____push_back_28double_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, $4 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGContainAdapter___SIGContainAdapter_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $16 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  $5 = HEAP32[($4 + 164 | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   SIGDiurnalROS___SIGDiurnalROS_28_29($5 | 0) | 0;
   operator_20delete_28void__29($5 | 0);
  }
  FUNCTION_TABLE[18 | 0]($4 + 120 | 0) | 0;
  FUNCTION_TABLE[19 | 0]($4) | 0;
  $16 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $16 | 0;
 }
 
 function SIGDiurnalROS___SIGDiurnalROS_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double_____vector_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double_____vector_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2__vector_double_2c_20std____2__allocator_double______annotate_delete_28_29_20const($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_double_2c_20std____2__allocator_double______clear_28_29($4 | 0);
   std____2__allocator_traits_std____2__allocator_double____deallocate_28std____2__allocator_double___2c_20double__2c_20unsigned_20long_29(std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function SIGContainAdapter__addResource_28double_2c_20double_2c_20TimeUnits__TimeUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20char_20const__2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = +$7;
  $8 = +$8;
  var $11 = 0, $12 = 0, $54 = 0, $69 = 0, $70 = 0;
  $11 = __stack_pointer - 176 | 0;
  __stack_pointer = $11;
  HEAP32[($11 + 172 | 0) >> 2] = $0;
  HEAPF64[($11 + 160 | 0) >> 3] = $1;
  HEAPF64[($11 + 152 | 0) >> 3] = $2;
  HEAP32[($11 + 148 | 0) >> 2] = $3;
  HEAPF64[($11 + 136 | 0) >> 3] = $4;
  HEAP32[($11 + 132 | 0) >> 2] = $5;
  HEAP32[($11 + 128 | 0) >> 2] = $6;
  HEAPF64[($11 + 120 | 0) >> 3] = $7;
  HEAPF64[($11 + 112 | 0) >> 3] = $8;
  $12 = HEAP32[($11 + 172 | 0) >> 2] | 0;
  HEAP32[($11 + 108 | 0) >> 2] = 0;
  HEAPF64[($11 + 96 | 0) >> 3] = +HEAPF64[($11 + 136 | 0) >> 3];
  label$1 : {
   if ((HEAP32[($11 + 132 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   HEAPF64[($11 + 88 | 0) >> 3] = +SpeedUnits__toBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[($11 + 136 | 0) >> 3]), HEAP32[($11 + 132 | 0) >> 2] | 0 | 0);
   HEAPF64[($11 + 96 | 0) >> 3] = +SpeedUnits__fromBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[($11 + 88 | 0) >> 3]), 1 | 0);
  }
  HEAPF64[($11 + 80 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($11 + 152 | 0) >> 3]), HEAP32[($11 + 148 | 0) >> 2] | 0 | 0);
  HEAPF64[($11 + 72 | 0) >> 3] = +TimeUnits__toBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[($11 + 160 | 0) >> 3]), HEAP32[($11 + 148 | 0) >> 2] | 0 | 0);
  FUNCTION_TABLE[3 | 0]($11 + 16 | 0, +HEAPF64[($11 + 72 | 0) >> 3], +HEAPF64[($11 + 96 | 0) >> 3], +HEAPF64[($11 + 80 | 0) >> 3], HEAP32[($11 + 108 | 0) >> 2] | 0, HEAP32[($11 + 128 | 0) >> 2] | 0, +HEAPF64[($11 + 120 | 0) >> 3], +HEAPF64[($11 + 112 | 0) >> 3]) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_vii(7 | 0, $12 + 120 | 0 | 0, $11 + 16 | 0 | 0);
  $54 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$2 : {
   if (($54 | 0) == (1 | 0) & 1 | 0) {
    break label$2
   }
   FUNCTION_TABLE[1 | 0]($11 + 16 | 0) | 0;
   __stack_pointer = $11 + 176 | 0;
   return;
  }
  $69 = __cxa_find_matching_catch_2() | 0;
  $70 = getTempRet0() | 0;
  HEAP32[($11 + 12 | 0) >> 2] = $69;
  HEAP32[($11 + 8 | 0) >> 2] = $70;
  FUNCTION_TABLE[1 | 0]($11 + 16 | 0) | 0;
  HEAP32[($11 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($11 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function SIGContainAdapter__removeResourceAt_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $9 = SIGContainForceAdapter__removeResourceAt_28int_29((HEAP32[($4 + 12 | 0) >> 2] | 0) + 120 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function SIGContainAdapter__removeResourceWithThisDesc_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $9 = SIGContainForceAdapter__removeResourceWithThisDesc_28char_20const__29((HEAP32[($4 + 12 | 0) >> 2] | 0) + 120 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function SIGContainAdapter__removeAllResourcesWithThisDesc_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $9 = SIGContainForceAdapter__removeAllResourcesWithThisDesc_28char_20const__29((HEAP32[($4 + 12 | 0) >> 2] | 0) + 120 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function SIGContainAdapter__removeAllResources_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____clear_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 120 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____clear_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($4 | 0) | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______clear_28_29($4 | 0);
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_shrink_28unsigned_20long_29_20const($4 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0);
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______invalidate_all_iterators_28_29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_shrink_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($5 | 0) | 0, 56) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0, 56) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______invalidate_all_iterators_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function SIGContainAdapter__setReportSize_28double_2c_20AreaUnits__AreaUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[$5 >> 3] = +AreaUnits__toBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  HEAPF64[($6 + 88 | 0) >> 3] = +AreaUnits__fromBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+HEAPF64[$5 >> 3]), 1 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGContainAdapter__setReportRate_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[$5 >> 3] = +SpeedUnits__toBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  HEAPF64[($6 + 96 | 0) >> 3] = +SpeedUnits__fromBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[$5 >> 3]), 1 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGContainAdapter__setFireStartTime_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 104 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGContainAdapter__setLwRatio_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 112 | 0) >> 3] = +HEAPF64[$4 >> 3];
  return;
 }
 
 function SIGContainAdapter__setTactic_28ContainTactic_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 132 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGContainAdapter__setAttackDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[$5 >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  HEAPF64[($6 + 136 | 0) >> 3] = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[$5 >> 3]), 4 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGContainAdapter__setRetry_28bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP8[($4 + 11 | 0) >> 0] = $1;
  HEAP8[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 144 | 0) >> 0] = (HEAPU8[($4 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function SIGContainAdapter__setMinSteps_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 148 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGContainAdapter__setMaxSteps_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 152 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGContainAdapter__setMaxFireSize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 156 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGContainAdapter__setMaxFireTime_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 160 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____push_back_28double_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(std____2__vector_double_2c_20std____2__allocator_double______end_cap_28_29($5 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    void_20std____2__vector_double_2c_20std____2__allocator_double______construct_one_at_end_double_20const___28double_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2__vector_double_2c_20std____2__allocator_double______push_back_slow_path_double_20const___28double_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGContainAdapter__getFinalCost_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 168 | 0) >> 3]);
 }
 
 function SIGContainAdapter__getFinalFireLineLength_28LengthUnits__LengthUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 176 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getPerimiterAtInitialAttack_28LengthUnits__LengthUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 184 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getPerimeterAtContainment_28LengthUnits__LengthUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 192 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getFireSizeAtInitialAttack_28AreaUnits__AreaUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +AreaUnits__fromBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 200 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getFinalFireSize_28AreaUnits__AreaUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +AreaUnits__fromBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 208 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getFinalContainmentArea_28AreaUnits__AreaUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +AreaUnits__fromBaseUnits_28double_2c_20AreaUnits__AreaUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 216 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getFinalTimeSinceReport_28TimeUnits__TimeUnitsEnum_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +TimeUnits__fromBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 224 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGContainAdapter__getContainmentStatus_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 232 | 0) >> 2] | 0 | 0;
 }
 
 function SIGIgniteInputs__SIGIgniteInputs_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[$4 >> 3] = +(0 | 0);
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  HEAPF64[($4 + 40 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 48 | 0) >> 2] = 2;
  return $4 | 0;
 }
 
 function SIGIgniteInputs___SIGIgniteInputs_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function SIGIgniteInputs__initializeMembers_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[$4 >> 3] = +(0 | 0);
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  HEAPF64[($4 + 40 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 48 | 0) >> 2] = 2;
  return;
 }
 
 function SIGIgniteInputs__updateIgniteInputs_28double_2c_20double_2c_20MoistureUnits__MoistureUnitsEnum_2c_20double_2c_20TemperatureUnits__TemperatureUnitsEnum_2c_20double_2c_20CoverUnits__CoverUnitsEnum_2c_20IgnitionFuelBedType_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20LightningCharge_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $14 = 0, $15 = 0;
  $14 = __stack_pointer - 80 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 76 | 0) >> 2] = $0;
  HEAPF64[($14 + 64 | 0) >> 3] = $1;
  HEAPF64[($14 + 56 | 0) >> 3] = $2;
  HEAP32[($14 + 52 | 0) >> 2] = $3;
  HEAPF64[($14 + 40 | 0) >> 3] = $4;
  HEAP32[($14 + 36 | 0) >> 2] = $5;
  HEAPF64[($14 + 24 | 0) >> 3] = $6;
  HEAP32[($14 + 20 | 0) >> 2] = $7;
  HEAP32[($14 + 16 | 0) >> 2] = $8;
  HEAPF64[($14 + 8 | 0) >> 3] = $9;
  HEAP32[($14 + 4 | 0) >> 2] = $10;
  HEAP32[$14 >> 2] = $11;
  $15 = HEAP32[($14 + 76 | 0) >> 2] | 0;
  SIGIgniteInputs__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 52 | 0) >> 2] | 0 | 0);
  SIGIgniteInputs__setMoistureHundredHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 56 | 0) >> 3]), HEAP32[($14 + 52 | 0) >> 2] | 0 | 0);
  SIGIgniteInputs__setAirTemperature_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 40 | 0) >> 3]), HEAP32[($14 + 36 | 0) >> 2] | 0 | 0);
  SIGIgniteInputs__setSunShade_28double_2c_20CoverUnits__CoverUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 24 | 0) >> 3]), HEAP32[($14 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($15 + 32 | 0) >> 2] = HEAP32[($14 + 16 | 0) >> 2] | 0;
  SIGIgniteInputs__setDuffDepth_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 8 | 0) >> 3]), HEAP32[($14 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($15 + 48 | 0) >> 2] = HEAP32[$14 >> 2] | 0;
  __stack_pointer = $14 + 80 | 0;
  return;
 }
 
 function SIGIgniteInputs__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 3] = +MoistureUnits__toBaseUnits_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgniteInputs__setMoistureHundredHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 8 | 0) >> 3] = +MoistureUnits__toBaseUnits_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgniteInputs__setAirTemperature_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 16 | 0) >> 3] = +TemperatureUnits__toBaseUnits_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgniteInputs__setSunShade_28double_2c_20CoverUnits__CoverUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 24 | 0) >> 3] = +CoverUnits__toBaseUnits_28double_2c_20CoverUnits__CoverUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgniteInputs__setDuffDepth_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 40 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgniteInputs__setIgnitionFuelBedType_28IgnitionFuelBedType_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGIgniteInputs__setLightningChargeType_28LightningCharge_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGIgniteInputs__getAirTemperature_28TemperatureUnits__TemperatureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +TemperatureUnits__fromBaseUnits_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 16 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGIgniteInputs__getMoistureOneHour_28MoistureUnits__MoistureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +MoistureUnits__fromBaseUnits_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(+(+HEAPF64[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGIgniteInputs__getMoistureHundredHour_28MoistureUnits__MoistureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +MoistureUnits__fromBaseUnits_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGIgniteInputs__getSunShade_28CoverUnits__CoverUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +CoverUnits__fromBaseUnits_28double_2c_20CoverUnits__CoverUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGIgniteInputs__getIgnitionFuelBedType_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0;
 }
 
 function SIGIgniteInputs__getDuffDepth_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 40 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGIgniteInputs__getLightningChargeType_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0;
 }
 
 function SIGIgnite__SIGIgnite_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[27 | 0]($4) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function SIGIgnite___SIGIgnite_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[28 | 0]($4) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function SIGIgnite__initializeMembers_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  SIGIgniteInputs__initializeMembers_28_29($4 | 0);
  HEAPF64[($4 + 56 | 0) >> 3] = +(0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function SIGIgnite__calculateFirebrandIgnitionProbability_28ProbabilityUnits__ProbabilityUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $26 = 0.0, $35 = 0.0, $74 = 0.0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 44 | 0) >> 2] = $0;
  HEAP32[($4 + 40 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  +SIGIgnite__calculateFuelTemperature_28_29($5 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = +SIGIgnite__getFuelTemperature_28TemperatureUnits__TemperatureUnitsEnum_29($5 | 0, 1 | 0);
  HEAPF64[($4 + 24 | 0) >> 3] = +SIGIgniteInputs__getMoistureOneHour_28MoistureUnits__MoistureUnitsEnum_29($5 | 0, 0 | 0);
  $26 = -+HEAPF64[($4 + 32 | 0) >> 3] * +HEAPF64[($4 + 24 | 0) >> 3] + (-(.00058 * +HEAPF64[($4 + 32 | 0) >> 3]) * +HEAPF64[($4 + 32 | 0) >> 3] + (+HEAPF64[($4 + 32 | 0) >> 3] * -.266 + 144.51));
  $35 = (1.0 - +exp(+(-15.1 * +HEAPF64[($4 + 24 | 0) >> 3]))) * 18.54 + $26;
  HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[($4 + 24 | 0) >> 3] * 640.0 + $35;
  label$1 : {
   if (!(+HEAPF64[($4 + 16 | 0) >> 3] > 400.0 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 16 | 0) >> 3] = 400.0;
  }
  HEAPF64[($4 + 8 | 0) >> 3] = .1 * (400.0 - +HEAPF64[($4 + 16 | 0) >> 3]);
  HEAPF64[$4 >> 3] = .000048 * +pow(+(+HEAPF64[($4 + 8 | 0) >> 3]), +(4.3)) / 50.0;
  label$2 : {
   label$3 : {
    if (!(+HEAPF64[$4 >> 3] > 1.0 & 1 | 0)) {
     break label$3
    }
    HEAPF64[$4 >> 3] = 1.0;
    break label$2;
   }
   label$4 : {
    if (!(+HEAPF64[$4 >> 3] < +(0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[$4 >> 3] = +(0 | 0);
   }
  }
  $74 = +ProbabilityUnits__fromBaseUnits_28double_2c_20ProbabilityUnits__ProbabilityUnitsEnum_29(+(+HEAPF64[$4 >> 3]), HEAP32[($4 + 40 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 48 | 0;
  return +$74;
 }
 
 function SIGIgnite__calculateFuelTemperature_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $17 = 0.0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 28 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  HEAPF64[($3 + 8 | 0) >> 3] = +SIGIgniteInputs__getSunShade_28CoverUnits__CoverUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[$3 >> 3] = +SIGIgniteInputs__getAirTemperature_28TemperatureUnits__TemperatureUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 16 | 0) >> 3] = +HEAPF64[($3 + 8 | 0) >> 3] * -20.0 + 25.0;
  HEAPF64[($4 + 56 | 0) >> 3] = +HEAPF64[$3 >> 3] + +HEAPF64[($3 + 16 | 0) >> 3];
  $17 = +HEAPF64[($4 + 56 | 0) >> 3];
  __stack_pointer = $3 + 32 | 0;
  return +$17;
 }
 
 function SIGIgnite__getFuelTemperature_28TemperatureUnits__TemperatureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +TemperatureUnits__fromBaseUnits_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 56 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGIgnite__calculateLightningIgnitionProbability_28ProbabilityUnits__ProbabilityUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $25 = 0, $27 = 0, $139 = 0, $170 = 0.0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 60 | 0) >> 2] = $0;
  HEAP32[($4 + 56 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 60 | 0) >> 2] | 0;
  HEAPF64[($4 + 48 | 0) >> 3] = +SIGIgniteInputs__getDuffDepth_28LengthUnits__LengthUnitsEnum_29($5 | 0, 2 | 0);
  HEAPF64[($4 + 48 | 0) >> 3] = +HEAPF64[($4 + 48 | 0) >> 3] * 2.54;
  label$1 : {
   if (!(+HEAPF64[($4 + 48 | 0) >> 3] > 10.0 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 48 | 0) >> 3] = 10.0;
  }
  HEAPF64[($4 + 40 | 0) >> 3] = +SIGIgniteInputs__getMoistureHundredHour_28MoistureUnits__MoistureUnitsEnum_29($5 | 0, 1 | 0);
  label$2 : {
   if (!(+HEAPF64[($4 + 40 | 0) >> 3] > 40.0 & 1 | 0)) {
    break label$2
   }
   HEAPF64[($4 + 40 | 0) >> 3] = 40.0;
  }
  i64toi32_i32$0 = 0;
  $25 = 0;
  HEAP32[($4 + 32 | 0) >> 2] = $25;
  HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 24 | 0) >> 2] = $25;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 16 | 0) >> 2] = $25;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 12 | 0) >> 2] = SIGIgniteInputs__getIgnitionFuelBedType_28_29($5 | 0) | 0;
  $27 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    switch ($27 | 0) {
    case 0:
     HEAPF64[($4 + 32 | 0) >> 3] = .92 * +exp(+(-.087 * +HEAPF64[($4 + 40 | 0) >> 3]));
     HEAPF64[($4 + 24 | 0) >> 3] = 1.04 * +exp(+(-.054 * +HEAPF64[($4 + 40 | 0) >> 3]));
     break label$3;
    case 1:
     HEAPF64[($4 + 32 | 0) >> 3] = .44 * +exp(+(-.11 * +HEAPF64[($4 + 40 | 0) >> 3]));
     HEAPF64[($4 + 24 | 0) >> 3] = .59 * +exp(+(-.094 * +HEAPF64[($4 + 40 | 0) >> 3]));
     break label$3;
    case 2:
     HEAPF64[($4 + 32 | 0) >> 3] = .86 * +exp(+(-.06 * +HEAPF64[($4 + 40 | 0) >> 3]));
     HEAPF64[($4 + 24 | 0) >> 3] = .9 * +exp(+(-.056 * +HEAPF64[($4 + 40 | 0) >> 3]));
     break label$3;
    case 3:
     HEAPF64[($4 + 32 | 0) >> 3] = +HEAPF64[($4 + 40 | 0) >> 3] * -.011 + .6;
     HEAPF64[($4 + 24 | 0) >> 3] = +HEAPF64[($4 + 40 | 0) >> 3] * -.011 + .73;
     break label$3;
    case 4:
     HEAPF64[($4 + 32 | 0) >> 3] = 1.0 / (1.0 + +exp(+(+HEAPF64[($4 + 48 | 0) >> 3] * -.68 + 5.13)));
     HEAPF64[($4 + 24 | 0) >> 3] = 1.0 / (1.0 + +exp(+(+HEAPF64[($4 + 48 | 0) >> 3] * -.6 + 3.84)));
     break label$3;
    case 5:
     HEAPF64[($4 + 32 | 0) >> 3] = 1.0 / (1.0 + +exp(+(+HEAPF64[($4 + 48 | 0) >> 3] * -1.39 + 6.69)));
     HEAPF64[($4 + 24 | 0) >> 3] = 1.0 / (1.0 + +exp(+(+HEAPF64[($4 + 48 | 0) >> 3] * -1.28 + 5.48)));
     break label$3;
    case 6:
     HEAPF64[($4 + 32 | 0) >> 3] = .62 * +exp(+(-.05 * +HEAPF64[($4 + 40 | 0) >> 3]));
     HEAPF64[($4 + 24 | 0) >> 3] = +HEAPF64[($4 + 40 | 0) >> 3] * -.014 + .8;
     break label$3;
    case 7:
     break label$4;
    default:
     break label$3;
    };
   }
   HEAPF64[($4 + 32 | 0) >> 3] = .71 * +exp(+(-.07 * +HEAPF64[($4 + 40 | 0) >> 3]));
   HEAPF64[($4 + 24 | 0) >> 3] = .84 * +exp(+(-.06 * +HEAPF64[($4 + 40 | 0) >> 3]));
  }
  HEAP32[($4 + 8 | 0) >> 2] = SIGIgniteInputs__getLightningChargeType_28_29($5 | 0) | 0;
  $139 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$12 : {
   label$13 : {
    switch ($139 | 0) {
    case 0:
     HEAPF64[($4 + 16 | 0) >> 3] = .2 * +HEAPF64[($4 + 24 | 0) >> 3];
     break label$12;
    case 1:
     HEAPF64[($4 + 16 | 0) >> 3] = .9 * +HEAPF64[($4 + 32 | 0) >> 3];
     break label$12;
    case 2:
     break label$13;
    default:
     break label$12;
    };
   }
   HEAPF64[($4 + 16 | 0) >> 3] = +HEAPF64[($4 + 32 | 0) >> 3] * .24930000000000002 + .1446 * +HEAPF64[($4 + 24 | 0) >> 3];
  }
  label$16 : {
   if (!(+HEAPF64[($4 + 16 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$16
   }
   HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  }
  label$17 : {
   if (!(+HEAPF64[($4 + 16 | 0) >> 3] > 1.0 & 1 | 0)) {
    break label$17
   }
   HEAPF64[($4 + 16 | 0) >> 3] = 1.0;
  }
  $170 = +ProbabilityUnits__fromBaseUnits_28double_2c_20ProbabilityUnits__ProbabilityUnitsEnum_29(+(+HEAPF64[($4 + 16 | 0) >> 3]), HEAP32[($4 + 56 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 64 | 0;
  return +$170;
 }
 
 function SIGIgnite__setAirTemperature_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setAirTemperature_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgnite__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgnite__setMoistureHundredHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgnite__setSunShade_28double_2c_20CoverUnits__CoverUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setSunShade_28double_2c_20CoverUnits__CoverUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgnite__setIgnitionFuelBedType_28IgnitionFuelBedType_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGIgniteInputs__setIgnitionFuelBedType_28IgnitionFuelBedType_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGIgnite__setDuffDepth_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setDuffDepth_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGIgnite__setLightningChargeType_28LightningCharge_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGIgniteInputs__setLightningChargeType_28LightningCharge_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGIgnite__updateIgniteInputs_28double_2c_20double_2c_20MoistureUnits__MoistureUnitsEnum_2c_20double_2c_20TemperatureUnits__TemperatureUnitsEnum_2c_20double_2c_20CoverUnits__CoverUnitsEnum_2c_20IgnitionFuelBedType_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20LightningCharge_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 80 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 76 | 0) >> 2] = $0;
  HEAPF64[($14 + 64 | 0) >> 3] = $1;
  HEAPF64[($14 + 56 | 0) >> 3] = $2;
  HEAP32[($14 + 52 | 0) >> 2] = $3;
  HEAPF64[($14 + 40 | 0) >> 3] = $4;
  HEAP32[($14 + 36 | 0) >> 2] = $5;
  HEAPF64[($14 + 24 | 0) >> 3] = $6;
  HEAP32[($14 + 20 | 0) >> 2] = $7;
  HEAP32[($14 + 16 | 0) >> 2] = $8;
  HEAPF64[($14 + 8 | 0) >> 3] = $9;
  HEAP32[($14 + 4 | 0) >> 2] = $10;
  HEAP32[$14 >> 2] = $11;
  SIGIgniteInputs__updateIgniteInputs_28double_2c_20double_2c_20MoistureUnits__MoistureUnitsEnum_2c_20double_2c_20TemperatureUnits__TemperatureUnitsEnum_2c_20double_2c_20CoverUnits__CoverUnitsEnum_2c_20IgnitionFuelBedType_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20LightningCharge_29(HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), +(+HEAPF64[($14 + 56 | 0) >> 3]), HEAP32[($14 + 52 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 40 | 0) >> 3]), HEAP32[($14 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 24 | 0) >> 3]), HEAP32[($14 + 20 | 0) >> 2] | 0 | 0, HEAP32[($14 + 16 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 8 | 0) >> 3]), HEAP32[($14 + 4 | 0) >> 2] | 0 | 0, HEAP32[$14 >> 2] | 0 | 0);
  __stack_pointer = $14 + 80 | 0;
  return;
 }
 
 function SIGIgnite__getAirTemperature_28TemperatureUnits__TemperatureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getAirTemperature_28TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGIgnite__getMoistureOneHour_28MoistureUnits__MoistureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getMoistureOneHour_28MoistureUnits__MoistureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGIgnite__getMoistureHundredHour_28MoistureUnits__MoistureUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getMoistureHundredHour_28MoistureUnits__MoistureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGIgnite__getSunShade_28CoverUnits__CoverUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getSunShade_28CoverUnits__CoverUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGIgnite__getFuelBedType_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGIgniteInputs__getIgnitionFuelBedType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGIgnite__getDuffDepth_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getDuffDepth_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGIgnite__getLightningChargeType_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGIgniteInputs__getLightningChargeType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGIgnite__isFuelDepthNeeded_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $24 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = SIGIgniteInputs__getIgnitionFuelBedType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($3 + 7 | 0) >> 0] = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
     break label$1
    }
   }
   HEAP8[($3 + 7 | 0) >> 0] = 1;
  }
  $24 = (HEAPU8[($3 + 7 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $24 | 0;
 }
 
 function SIGSpotInputs__SIGSpotInputs_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  SIGSpotInputs__initializeMembers_28_29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function SIGSpotInputs__initializeMembers_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 48 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 56 | 0) >> 3] = +(0 | 0);
  HEAP32[($4 + 64 | 0) >> 2] = 0;
  HEAPF64[$4 >> 3] = +(0 | 0);
  HEAPF64[($4 + 72 | 0) >> 3] = +(0 | 0);
  return;
 }
 
 function SIGSpotInputs__setBurningPileFlameHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 48 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setDBH_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 8 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setSurfaceFlameLength_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 56 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setLocation_28SpotFireLocation_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGSpotInputs__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 24 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 32 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setTorchingTrees_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGSpotInputs__setTreeHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 72 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__setTreeSpecies_28SpotTreeSpecies_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function SIGSpotInputs__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 40 | 0) >> 3] = +SpeedUnits__toBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpotInputs__updateSpotInputsForBurningPile_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0, $15 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  $15 = HEAP32[($14 + 92 | 0) >> 2] | 0;
  SIGSpotInputs__setLocation_28SpotFireLocation_29($15 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setBurningPileFlameHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function SIGSpotInputs__updateSpotInputsForSurfaceFire_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0, $15 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  $15 = HEAP32[($14 + 92 | 0) >> 2] | 0;
  SIGSpotInputs__setLocation_28SpotFireLocation_29($15 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setSurfaceFlameLength_28double_2c_20LengthUnits__LengthUnitsEnum_29($15 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function SIGSpotInputs__updateSpotInputsForTorchingTrees_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20int_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20SpotTreeSpecies_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = +$11;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = +$14;
  $15 = $15 | 0;
  var $18 = 0, $19 = 0;
  $18 = __stack_pointer - 112 | 0;
  __stack_pointer = $18;
  HEAP32[($18 + 108 | 0) >> 2] = $0;
  HEAP32[($18 + 104 | 0) >> 2] = $1;
  HEAPF64[($18 + 96 | 0) >> 3] = $2;
  HEAP32[($18 + 92 | 0) >> 2] = $3;
  HEAPF64[($18 + 80 | 0) >> 3] = $4;
  HEAP32[($18 + 76 | 0) >> 2] = $5;
  HEAPF64[($18 + 64 | 0) >> 3] = $6;
  HEAP32[($18 + 60 | 0) >> 2] = $7;
  HEAP32[($18 + 56 | 0) >> 2] = $8;
  HEAPF64[($18 + 48 | 0) >> 3] = $9;
  HEAP32[($18 + 44 | 0) >> 2] = $10;
  HEAPF64[($18 + 32 | 0) >> 3] = $11;
  HEAP32[($18 + 28 | 0) >> 2] = $12;
  HEAP32[($18 + 24 | 0) >> 2] = $13;
  HEAPF64[($18 + 16 | 0) >> 3] = $14;
  HEAP32[($18 + 12 | 0) >> 2] = $15;
  $19 = HEAP32[($18 + 108 | 0) >> 2] | 0;
  SIGSpotInputs__setLocation_28SpotFireLocation_29($19 | 0, HEAP32[($18 + 104 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29($19 | 0, +(+HEAPF64[($18 + 96 | 0) >> 3]), HEAP32[($18 + 92 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29($19 | 0, +(+HEAPF64[($18 + 80 | 0) >> 3]), HEAP32[($18 + 76 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($19 | 0, +(+HEAPF64[($18 + 64 | 0) >> 3]), HEAP32[($18 + 60 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setTorchingTrees_28int_29($19 | 0, HEAP32[($18 + 56 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setDBH_28double_2c_20LengthUnits__LengthUnitsEnum_29($19 | 0, +(+HEAPF64[($18 + 48 | 0) >> 3]), HEAP32[($18 + 44 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setTreeHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($19 | 0, +(+HEAPF64[($18 + 32 | 0) >> 3]), HEAP32[($18 + 28 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setTreeSpecies_28SpotTreeSpecies_29($19 | 0, HEAP32[($18 + 24 | 0) >> 2] | 0 | 0);
  SIGSpotInputs__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($19 | 0, +(+HEAPF64[($18 + 16 | 0) >> 3]), HEAP32[($18 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $18 + 112 | 0;
  return;
 }
 
 function SIGSpotInputs__getBurningPileFlameHeight_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 48 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getDBH_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getSurfaceFlameLength_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 56 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getLocation_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0;
 }
 
 function SIGSpotInputs__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getTorchingTrees_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0;
 }
 
 function SIGSpotInputs__getTreeHeight_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 72 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpotInputs__getTreeSpecies_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0;
 }
 
 function SIGSpotInputs__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +SpeedUnits__fromBaseUnits_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 40 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__SIGSpot_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[29 | 0]($4) | 0;
  SIGSpot__initializeMembers_28_29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function SIGSpot__initializeMembers_28_29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, $4 = 0, $47 = 0, $50 = 0, $54 = 0, $58 = 0, $62 = 0, $66 = 0, $70 = 0, $74 = 0, $163 = 0, $170 = 0, $177 = 0, $184 = 0, $191 = 0, $198 = 0, $202 = 0, $206 = 0, $214 = 0, $224 = 0, $234 = 0, $244 = 0, $254 = 0, $264 = 0, $274 = 0, $284 = 0;
  $3 = __stack_pointer - 528 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 524 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 524 | 0) >> 2] | 0;
  __memcpy($3 + 288 | 0 | 0, 3952 | 0, 224 | 0) | 0;
  __memcpy($4 + 88 | 0 | 0, $3 + 288 | 0 | 0, 224 | 0) | 0;
  __memcpy($3 + 64 | 0 | 0, 4176 | 0, 224 | 0) | 0;
  __memcpy($4 + 312 | 0 | 0, $3 + 64 | 0 | 0, 224 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4456 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4460 | 0) >> 2] | 0;
  $163 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $163;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4448 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4452 | 0) >> 2] | 0;
  $170 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $170;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4440 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4444 | 0) >> 2] | 0;
  $177 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $177;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4432 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4436 | 0) >> 2] | 0;
  $184 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $184;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4424 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4428 | 0) >> 2] | 0;
  $191 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $191;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4416 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4420 | 0) >> 2] | 0;
  $198 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $198;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4408 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4412 | 0) >> 2] | 0;
  $202 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $202;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4400 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4404 | 0) >> 2] | 0;
  $206 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[i64toi32_i32$1 >> 2] = $206;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $47 = $4 + 536 | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $214 = i64toi32_i32$0;
  i64toi32_i32$0 = $47;
  HEAP32[i64toi32_i32$0 >> 2] = $214;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $50 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $50 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $224 = i64toi32_i32$1;
  i64toi32_i32$1 = $47 + $50 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $224;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $54 = 48;
  i64toi32_i32$2 = $3 + $54 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $234 = i64toi32_i32$0;
  i64toi32_i32$0 = $47 + $54 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $234;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $58 = 40;
  i64toi32_i32$2 = $3 + $58 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $244 = i64toi32_i32$1;
  i64toi32_i32$1 = $47 + $58 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $244;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $62 = 32;
  i64toi32_i32$2 = $3 + $62 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $254 = i64toi32_i32$0;
  i64toi32_i32$0 = $47 + $62 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $254;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $66 = 24;
  i64toi32_i32$2 = $3 + $66 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $264 = i64toi32_i32$1;
  i64toi32_i32$1 = $47 + $66 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $264;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $70 = 16;
  i64toi32_i32$2 = $3 + $70 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $274 = i64toi32_i32$0;
  i64toi32_i32$0 = $47 + $70 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $274;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $74 = 8;
  i64toi32_i32$2 = $3 + $74 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $284 = i64toi32_i32$1;
  i64toi32_i32$1 = $47 + $74 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $284;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($4 + 600 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 608 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 616 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 624 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 632 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 640 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 648 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 656 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 664 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 672 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 680 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 688 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 696 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 704 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 712 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 720 | 0) >> 3] = +(0 | 0);
  __stack_pointer = $3 + 528 | 0;
  return;
 }
 
 function SIGSpot___SIGSpot_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function SIGSpot__calculateSpotCriticalCoverHeight_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $13 = 0.0, $28 = 0.0, $31 = 0.0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 44 | 0) >> 2] = $0;
  HEAPF64[($5 + 32 | 0) >> 3] = $1;
  HEAPF64[($5 + 24 | 0) >> 3] = $2;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($5 + 32 | 0) >> 3] < 1.0e-07 & 1 | 0)) {
     break label$2
    }
    $13 = +(0 | 0);
    break label$1;
   }
   $13 = +pow(+(+HEAPF64[($5 + 32 | 0) >> 3]), +(.337)) * 2.2 + -4.0;
  }
  HEAPF64[($5 + 16 | 0) >> 3] = $13;
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($5 + 24 | 0) >> 3] > +HEAPF64[($5 + 16 | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    $28 = +HEAPF64[($5 + 24 | 0) >> 3];
    break label$3;
   }
   $28 = +HEAPF64[($5 + 16 | 0) >> 3];
  }
  HEAPF64[($5 + 8 | 0) >> 3] = $28;
  $31 = +HEAPF64[($5 + 8 | 0) >> 3];
  __stack_pointer = $5 + 48 | 0;
  return +$31;
 }
 
 function SIGSpot__spotDistanceMountainTerrain_28double_2c_20SpotFireLocation_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  var $7 = 0, $36 = 0.0, $67 = 0.0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 76 | 0) >> 2] = $0;
  HEAPF64[($7 + 64 | 0) >> 3] = $1;
  HEAP32[($7 + 60 | 0) >> 2] = $2;
  HEAPF64[($7 + 48 | 0) >> 3] = $3;
  HEAPF64[($7 + 40 | 0) >> 3] = $4;
  HEAPF64[($7 + 32 | 0) >> 3] = +HEAPF64[($7 + 64 | 0) >> 3];
  label$1 : {
   if (!(+HEAPF64[($7 + 40 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   if (!(+HEAPF64[($7 + 48 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($7 + 24 | 0) >> 3] = +HEAPF64[($7 + 64 | 0) >> 3] / +HEAPF64[($7 + 48 | 0) >> 3];
   HEAPF64[($7 + 16 | 0) >> 3] = +HEAPF64[($7 + 40 | 0) >> 3] / 31.41592653589793 / 1.0e3;
   HEAPF64[($7 + 8 | 0) >> 3] = +HEAPF64[($7 + 24 | 0) >> 3];
   HEAP32[($7 + 4 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($7 + 4 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
      break label$2
     }
     $36 = +HEAPF64[($7 + 24 | 0) >> 3];
     HEAPF64[($7 + 8 | 0) >> 3] = -+HEAPF64[($7 + 16 | 0) >> 3] * (+cos(+(+HEAPF64[($7 + 8 | 0) >> 3] * 3.141592653589793 + -(+(HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) * 3.141592653589793 / 2.0))) - +cos(+(+(HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) * 3.141592653589793 / 2.0))) + $36;
     HEAP32[($7 + 4 | 0) >> 2] = (HEAP32[($7 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAPF64[($7 + 32 | 0) >> 3] = +HEAPF64[($7 + 8 | 0) >> 3] * +HEAPF64[($7 + 48 | 0) >> 3];
  }
  $67 = +HEAPF64[($7 + 32 | 0) >> 3];
  __stack_pointer = $7 + 80 | 0;
  return +$67;
 }
 
 function SIGSpot__spotDistanceFlatTerrain_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $6 = 0, $34 = 0.0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $0;
  HEAPF64[($6 + 32 | 0) >> 3] = $1;
  HEAPF64[($6 + 24 | 0) >> 3] = $2;
  HEAPF64[($6 + 16 | 0) >> 3] = $3;
  HEAPF64[($6 + 8 | 0) >> 3] = +(0 | 0);
  label$1 : {
   if (!(+HEAPF64[($6 + 24 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($6 + 8 | 0) >> 3] = .000718 * +HEAPF64[($6 + 16 | 0) >> 3] * Math_sqrt(+HEAPF64[($6 + 24 | 0) >> 3]) * (Math_sqrt(+HEAPF64[($6 + 32 | 0) >> 3] / +HEAPF64[($6 + 24 | 0) >> 3]) / 2.0 * +log(+(+HEAPF64[($6 + 32 | 0) >> 3] / +HEAPF64[($6 + 24 | 0) >> 3])) + .362);
  }
  $34 = +HEAPF64[($6 + 8 | 0) >> 3];
  __stack_pointer = $6 + 48 | 0;
  return +$34;
 }
 
 function SIGSpot__calculateSpottingDistanceFromBurningPile_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 40 | 0) >> 2] = SIGSpotInputs__getLocation_28_29($4 | 0) | 0;
  HEAPF64[($3 + 32 | 0) >> 3] = +SIGSpotInputs__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29($4 | 0, 5 | 0);
  HEAPF64[($3 + 24 | 0) >> 3] = +SIGSpotInputs__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 16 | 0) >> 3] = +SIGSpotInputs__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 8 | 0) >> 3] = +SIGSpotInputs__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29($4 | 0, 4 | 0);
  HEAPF64[$3 >> 3] = +SIGSpotInputs__getBurningPileFlameHeight_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($4 + 656 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 680 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 704 | 0) >> 3] = +(0 | 0);
  label$1 : {
   if (!(+HEAPF64[($3 + 8 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   if (!(+HEAPF64[$3 >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 656 | 0) >> 3] = 12.2 * +HEAPF64[$3 >> 3];
   HEAPF64[($4 + 608 | 0) >> 3] = +SIGSpot__calculateSpotCriticalCoverHeight_28double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 656 | 0) >> 3]), +(+HEAPF64[($3 + 16 | 0) >> 3]));
   label$2 : {
    if (!(+HEAPF64[($4 + 608 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4 + 680 | 0) >> 3] = .000718 * +HEAPF64[($3 + 8 | 0) >> 3] * Math_sqrt(+HEAPF64[($4 + 608 | 0) >> 3]) * (Math_sqrt(+HEAPF64[($4 + 656 | 0) >> 3] / +HEAPF64[($4 + 608 | 0) >> 3]) / 2.0 * +log(+(+HEAPF64[($4 + 656 | 0) >> 3] / +HEAPF64[($4 + 608 | 0) >> 3])) + .362);
    HEAPF64[($4 + 704 | 0) >> 3] = +SIGSpot__spotDistanceMountainTerrain_28double_2c_20SpotFireLocation_2c_20double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 680 | 0) >> 3]), HEAP32[($3 + 40 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 32 | 0) >> 3]), +(+HEAPF64[($3 + 24 | 0) >> 3]));
    HEAPF64[($4 + 680 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($4 + 680 | 0) >> 3]), 5 | 0);
    HEAPF64[($4 + 704 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($4 + 704 | 0) >> 3]), 5 | 0);
   }
  }
  __stack_pointer = $3 + 48 | 0;
  return;
 }
 
 function SIGSpot__calculateSpottingDistanceFromSurfaceFire_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $53 = 0.0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 60 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 60 | 0) >> 2] | 0;
  HEAP32[($3 + 56 | 0) >> 2] = SIGSpotInputs__getLocation_28_29($4 | 0) | 0;
  HEAPF64[($3 + 48 | 0) >> 3] = +SIGSpotInputs__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29($4 | 0, 5 | 0);
  HEAPF64[($3 + 40 | 0) >> 3] = +SIGSpotInputs__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 32 | 0) >> 3] = +SIGSpotInputs__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 24 | 0) >> 3] = +SIGSpotInputs__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29($4 | 0, 4 | 0);
  HEAPF64[($3 + 16 | 0) >> 3] = +SIGSpotInputs__getSurfaceFlameLength_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($4 + 664 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 688 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 640 | 0) >> 3] = +(0 | 0);
  label$1 : {
   if (!(+HEAPF64[($3 + 24 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   if (!(+HEAPF64[($3 + 16 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($3 + 8 | 0) >> 3] = 322.0 * +pow(+(.474 * +HEAPF64[($3 + 24 | 0) >> 3]), +(-1.01));
   HEAPF64[$3 >> 3] = +pow(+(+HEAPF64[($3 + 16 | 0) >> 3] / .45), +(2.1739130434782608));
   label$2 : {
    label$3 : {
     if (!(+HEAPF64[($3 + 8 | 0) >> 3] * +HEAPF64[$3 >> 3] < 1.0e-07 & 1 | 0)) {
      break label$3
     }
     $53 = +(0 | 0);
     break label$2;
    }
    $53 = 1.055 * Math_sqrt(+HEAPF64[($3 + 8 | 0) >> 3] * +HEAPF64[$3 >> 3]);
   }
   HEAPF64[($4 + 664 | 0) >> 3] = $53;
   HEAPF64[($4 + 600 | 0) >> 3] = +SIGSpot__calculateSpotCriticalCoverHeight_28double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 664 | 0) >> 3]), +(+HEAPF64[($3 + 32 | 0) >> 3]));
   label$4 : {
    if (!(+HEAPF64[($4 + 600 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
     break label$4
    }
    HEAPF64[($4 + 640 | 0) >> 3] = .000278 * +HEAPF64[($3 + 24 | 0) >> 3] * +pow(+(+HEAPF64[($4 + 664 | 0) >> 3]), +(.643));
    HEAPF64[($4 + 688 | 0) >> 3] = +SIGSpot__spotDistanceFlatTerrain_28double_2c_20double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 664 | 0) >> 3]), +(+HEAPF64[($4 + 600 | 0) >> 3]), +(+HEAPF64[($3 + 24 | 0) >> 3])) + +HEAPF64[($4 + 640 | 0) >> 3];
    HEAPF64[($4 + 712 | 0) >> 3] = +SIGSpot__spotDistanceMountainTerrain_28double_2c_20SpotFireLocation_2c_20double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 688 | 0) >> 3]), HEAP32[($3 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 48 | 0) >> 3]), +(+HEAPF64[($3 + 40 | 0) >> 3]));
    HEAPF64[($4 + 688 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($4 + 688 | 0) >> 3]), 5 | 0);
    HEAPF64[($4 + 712 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($4 + 712 | 0) >> 3]), 5 | 0);
   }
  }
  __stack_pointer = $3 + 64 | 0;
  return;
 }
 
 function SIGSpot__calculateSpottingDistanceFromTorchingTrees_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 76 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 76 | 0) >> 2] | 0;
  HEAP32[($3 + 72 | 0) >> 2] = SIGSpotInputs__getLocation_28_29($4 | 0) | 0;
  HEAPF64[($3 + 64 | 0) >> 3] = +SIGSpotInputs__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29($4 | 0, 5 | 0);
  HEAPF64[($3 + 56 | 0) >> 3] = +SIGSpotInputs__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 48 | 0) >> 3] = +SIGSpotInputs__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAPF64[($3 + 40 | 0) >> 3] = +SIGSpotInputs__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29($4 | 0, 4 | 0);
  HEAPF64[($3 + 32 | 0) >> 3] = +(SIGSpotInputs__getTorchingTrees_28_29($4 | 0) | 0 | 0);
  HEAPF64[($3 + 24 | 0) >> 3] = +SIGSpotInputs__getDBH_28LengthUnits__LengthUnitsEnum_29($4 | 0, 1 | 0);
  HEAPF64[($3 + 16 | 0) >> 3] = +SIGSpotInputs__getTreeHeight_28LengthUnits__LengthUnitsEnum_29($4 | 0, 0 | 0);
  HEAP32[($3 + 12 | 0) >> 2] = SIGSpotInputs__getTreeSpecies_28_29($4 | 0) | 0;
  HEAPF64[($4 + 632 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 624 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 648 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 672 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 696 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 720 | 0) >> 3] = +(0 | 0);
  label$1 : {
   if (!(+HEAPF64[($3 + 40 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   if (!(+HEAPF64[($3 + 24 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
    break label$1
   }
   if (!(+HEAPF64[($3 + 32 | 0) >> 3] >= 1.0 & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$2
    }
    if ((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) >= (14 | 0) & 1 | 0) {
     break label$2
    }
    HEAPF64[($4 + 624 | 0) >> 3] = +HEAPF64[(($4 + 88 | 0) + ((HEAP32[($3 + 12 | 0) >> 2] | 0) << 4 | 0) | 0) >> 3] * +pow(+(+HEAPF64[($3 + 24 | 0) >> 3]), +(+HEAPF64[((($4 + 88 | 0) + ((HEAP32[($3 + 12 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3])) * +pow(+(+HEAPF64[($3 + 32 | 0) >> 3]), +(.4));
    HEAPF64[($4 + 632 | 0) >> 3] = +HEAPF64[($3 + 16 | 0) >> 3] / +HEAPF64[($4 + 624 | 0) >> 3];
    HEAPF64[($4 + 648 | 0) >> 3] = +HEAPF64[(($4 + 312 | 0) + ((HEAP32[($3 + 12 | 0) >> 2] | 0) << 4 | 0) | 0) >> 3] * +pow(+(+HEAPF64[($3 + 24 | 0) >> 3]), +(+HEAPF64[((($4 + 312 | 0) + ((HEAP32[($3 + 12 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3])) * +pow(+(+HEAPF64[($3 + 32 | 0) >> 3]), +(-.2));
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[($4 + 632 | 0) >> 3] >= 1.0 & 1 | 0)) {
       break label$4
      }
      HEAP32[($3 + 8 | 0) >> 2] = 0;
      break label$3;
     }
     label$5 : {
      label$6 : {
       if (!(+HEAPF64[($4 + 632 | 0) >> 3] >= .5 & 1 | 0)) {
        break label$6
       }
       HEAP32[($3 + 8 | 0) >> 2] = 1;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (!(+HEAPF64[($4 + 648 | 0) >> 3] < 3.5 & 1 | 0)) {
         break label$8
        }
        HEAP32[($3 + 8 | 0) >> 2] = 2;
        break label$7;
       }
       HEAP32[($3 + 8 | 0) >> 2] = 3;
      }
     }
    }
    HEAPF64[($4 + 672 | 0) >> 3] = +HEAPF64[(($4 + 536 | 0) + ((HEAP32[($3 + 8 | 0) >> 2] | 0) << 4 | 0) | 0) >> 3] * +pow(+(+HEAPF64[($4 + 648 | 0) >> 3]), +(+HEAPF64[((($4 + 536 | 0) + ((HEAP32[($3 + 8 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3])) * +HEAPF64[($4 + 624 | 0) >> 3] + +HEAPF64[($3 + 16 | 0) >> 3] / 2.0;
    HEAPF64[($4 + 616 | 0) >> 3] = +SIGSpot__calculateSpotCriticalCoverHeight_28double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 672 | 0) >> 3]), +(+HEAPF64[($3 + 48 | 0) >> 3]));
    label$9 : {
     if (!(+HEAPF64[($4 + 616 | 0) >> 3] > 1.0e-07 & 1 | 0)) {
      break label$9
     }
     HEAPF64[($4 + 696 | 0) >> 3] = +SIGSpot__spotDistanceFlatTerrain_28double_2c_20double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 672 | 0) >> 3]), +(+HEAPF64[($4 + 616 | 0) >> 3]), +(+HEAPF64[($3 + 40 | 0) >> 3]));
     HEAPF64[($4 + 720 | 0) >> 3] = +SIGSpot__spotDistanceMountainTerrain_28double_2c_20SpotFireLocation_2c_20double_2c_20double_29($4 | 0, +(+HEAPF64[($4 + 696 | 0) >> 3]), HEAP32[($3 + 72 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3 + 64 | 0) >> 3]), +(+HEAPF64[($3 + 56 | 0) >> 3]));
     HEAPF64[($4 + 696 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($4 + 696 | 0) >> 3]), 5 | 0);
     HEAPF64[($4 + 720 | 0) >> 3] = +LengthUnits__toBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[($4 + 720 | 0) >> 3]), 5 | 0);
    }
   }
  }
  __stack_pointer = $3 + 80 | 0;
  return;
 }
 
 function SIGSpot__setBurningPileFlameHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setBurningPileFlameHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setDBH_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setDBH_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setFlameLength_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setSurfaceFlameLength_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setLocation_28SpotFireLocation_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpotInputs__setLocation_28SpotFireLocation_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGSpot__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setTorchingTrees_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpotInputs__setTorchingTrees_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGSpot__setTreeHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setTreeHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__setTreeSpecies_28SpotTreeSpecies_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpotInputs__setTreeSpecies_28SpotTreeSpecies_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SIGSpot__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function SIGSpot__updateSpotInputsForBurningPile_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  SIGSpotInputs__updateSpotInputsForBurningPile_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($14 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function SIGSpot__updateSpotInputsForSurfaceFire_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  SIGSpotInputs__updateSpotInputsForSurfaceFire_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($14 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function SIGSpot__updateSpotInputsForTorchingTrees_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20int_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20SpotTreeSpecies_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = +$11;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = +$14;
  $15 = $15 | 0;
  var $18 = 0;
  $18 = __stack_pointer - 112 | 0;
  __stack_pointer = $18;
  HEAP32[($18 + 108 | 0) >> 2] = $0;
  HEAP32[($18 + 104 | 0) >> 2] = $1;
  HEAPF64[($18 + 96 | 0) >> 3] = $2;
  HEAP32[($18 + 92 | 0) >> 2] = $3;
  HEAPF64[($18 + 80 | 0) >> 3] = $4;
  HEAP32[($18 + 76 | 0) >> 2] = $5;
  HEAPF64[($18 + 64 | 0) >> 3] = $6;
  HEAP32[($18 + 60 | 0) >> 2] = $7;
  HEAP32[($18 + 56 | 0) >> 2] = $8;
  HEAPF64[($18 + 48 | 0) >> 3] = $9;
  HEAP32[($18 + 44 | 0) >> 2] = $10;
  HEAPF64[($18 + 32 | 0) >> 3] = $11;
  HEAP32[($18 + 28 | 0) >> 2] = $12;
  HEAP32[($18 + 24 | 0) >> 2] = $13;
  HEAPF64[($18 + 16 | 0) >> 3] = $14;
  HEAP32[($18 + 12 | 0) >> 2] = $15;
  SIGSpotInputs__updateSpotInputsForTorchingTrees_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20int_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20SpotTreeSpecies_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($18 + 108 | 0) >> 2] | 0 | 0, HEAP32[($18 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 96 | 0) >> 3]), HEAP32[($18 + 92 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 80 | 0) >> 3]), HEAP32[($18 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 64 | 0) >> 3]), HEAP32[($18 + 60 | 0) >> 2] | 0 | 0, HEAP32[($18 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 48 | 0) >> 3]), HEAP32[($18 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 32 | 0) >> 3]), HEAP32[($18 + 28 | 0) >> 2] | 0 | 0, HEAP32[($18 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 16 | 0) >> 3]), HEAP32[($18 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $18 + 112 | 0;
  return;
 }
 
 function SIGSpot__getBurningPileFlameHeight_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getBurningPileFlameHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getDBH_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getDBH_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getSurfaceFlameLength_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getSurfaceFlameLength_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getLocation_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpotInputs__getLocation_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGSpot__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getTorchingTrees_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpotInputs__getTorchingTrees_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGSpot__getTreeHeight_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getTreeHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getTreeSpecies_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpotInputs__getTreeSpecies_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGSpot__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function SIGSpot__getCoverHeightUsedForBurningPile_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 608 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getCoverHeightUsedForSurfaceFire_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 600 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getCoverHeightUsedForTorchingTrees_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 616 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getFlameHeightForTorchingTrees_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 624 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getFlameRatioForTorchingTrees_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 632 | 0) >> 3]);
 }
 
 function SIGSpot__getFlameDurationForTorchingTrees_28TimeUnits__TimeUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +TimeUnits__fromBaseUnits_28double_2c_20TimeUnits__TimeUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 648 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxFirebrandHeightFromBurningPile_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 656 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxFirebrandHeightFromSurfaceFire_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 664 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxFirebrandHeightFromTorchingTrees_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 672 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxFlatTerrainSpottingDistanceFromBurningPile_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 680 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxFlatTerrainSpottingDistanceFromSurfaceFire_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 688 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxFlatTerrainSpottingDistanceFromTorchingTrees_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 696 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxMountainousTerrainSpottingDistanceFromBurningPile_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 704 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 712 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function SIGSpot__getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_28LengthUnits__LengthUnitsEnum_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = +LengthUnits__fromBaseUnits_28double_2c_20LengthUnits__LengthUnitsEnum_29(+(+HEAPF64[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 720 | 0) >> 3]), HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$8;
 }
 
 function PalmettoGallberry__PalmettoGallberry_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  PalmettoGallberry__initializeMembers_28_29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function PalmettoGallberry__initializeMembers_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[$4 >> 3] = .4;
  HEAPF64[($4 + 8 | 0) >> 3] = 8300.0;
  HEAPF64[($4 + 16 | 0) >> 3] = 8300.0;
  HEAPF64[($4 + 24 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 48 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 56 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 64 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 72 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 80 | 0) >> 3] = +(0 | 0);
  return;
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyDeadOneHourLoad_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0, $12 = 0.0, $27 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  $12 = +log(+(+HEAPF64[($5 + 16 | 0) >> 3])) * .00379 + -.00121;
  HEAPF64[($6 + 24 | 0) >> 3] = .00118 * +HEAPF64[($5 + 8 | 0) >> 3] * +HEAPF64[($5 + 8 | 0) >> 3] + $12;
  label$1 : {
   if (!(+HEAPF64[($6 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($6 + 24 | 0) >> 3] = +(0 | 0);
  }
  $27 = +HEAPF64[($6 + 24 | 0) >> 3];
  __stack_pointer = $5 + 32 | 0;
  return +$27;
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyDeadTenHourLoad_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 32 | 0) >> 3] = 7.0e-05 * +HEAPF64[($5 + 16 | 0) >> 3] * +HEAPF64[($5 + 16 | 0) >> 3] + (+HEAPF64[($5 + 8 | 0) >> 3] * .00021 + -.00775);
  label$1 : {
   if (!(+HEAPF64[($6 + 32 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($6 + 32 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($6 + 32 | 0) >> 3]);
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyDeadFoliageLoad_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0, $17 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 40 | 0) >> 3] = .00221 * +pow(+(+HEAPF64[($5 + 16 | 0) >> 3]), +(.51263)) * +exp(+(.02482 * +HEAPF64[($5 + 8 | 0) >> 3]));
  $17 = +HEAPF64[($6 + 40 | 0) >> 3];
  __stack_pointer = $5 + 32 | 0;
  return +$17;
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyFuelBedDepth_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAPF64[($5 + 48 | 0) >> 3] = 2.0 * +HEAPF64[$4 >> 3] / 3.0;
  return +(+HEAPF64[($5 + 48 | 0) >> 3]);
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyLitterLoad_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0, $18 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 56 | 0) >> 3] = (+HEAPF64[($5 + 8 | 0) >> 3] * .0005336 + .03632) * (1.0 - +pow(+(.25), +(+HEAPF64[($5 + 16 | 0) >> 3])));
  $18 = +HEAPF64[($6 + 56 | 0) >> 3];
  __stack_pointer = $5 + 32 | 0;
  return +$18;
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyLiveOneHourLoad_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 64 | 0) >> 3] = .00212 * +HEAPF64[($5 + 8 | 0) >> 3] * +HEAPF64[($5 + 8 | 0) >> 3] + (+HEAPF64[($5 + 16 | 0) >> 3] * .00092 + .00546);
  return +(+HEAPF64[($6 + 64 | 0) >> 3]);
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyLiveTenHourLoad_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[($6 + 72 | 0) >> 3] = .00314 * +HEAPF64[($5 + 8 | 0) >> 3] * +HEAPF64[($5 + 8 | 0) >> 3] + (.00014 * +HEAPF64[($5 + 16 | 0) >> 3] * +HEAPF64[($5 + 16 | 0) >> 3] + -.02128);
  label$1 : {
   if (!(+HEAPF64[($6 + 72 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($6 + 72 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($6 + 72 | 0) >> 3]);
 }
 
 function PalmettoGallberry__calculatePalmettoGallberyLiveFoliageLoad_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAPF64[($6 + 16 | 0) >> 3] = $1;
  HEAPF64[($6 + 8 | 0) >> 3] = $2;
  HEAPF64[$6 >> 3] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAPF64[($7 + 80 | 0) >> 3] = .00282 * +HEAPF64[$6 >> 3] * +HEAPF64[$6 >> 3] + (+HEAPF64[($6 + 8 | 0) >> 3] * .00049 + (+HEAPF64[($6 + 16 | 0) >> 3] * .00253 + -.0036));
  label$1 : {
   if (!(+HEAPF64[($7 + 80 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($7 + 80 | 0) >> 3] = +(0 | 0);
  }
  return +(+HEAPF64[($7 + 80 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getMoistureOfExtinctionDead_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 3]);
 }
 
 function PalmettoGallberry__getHeatOfCombustionDead_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getHeatOfCombustionLive_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyDeadOneHourLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyDeadTenHourLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyDeadFoliageLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 40 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyFuelBedDepth_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 48 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyLitterLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 56 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyLiveOneHourLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 64 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyLiveTenHourLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 72 | 0) >> 3]);
 }
 
 function PalmettoGallberry__getPalmettoGallberyLiveFoliageLoad_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 80 | 0) >> 3]);
 }
 
 function WesternAspen__WesternAspen_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function WesternAspen___WesternAspen_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function WesternAspen__initializeMembers_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[$4 >> 3] = +(0 | 0);
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  return;
 }
 
 function WesternAspen__getAspenDBH_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 3]);
 }
 
 function WesternAspen__getAspenMortality_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return +(+HEAPF64[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3]);
 }
 
 function WesternAspen__aspenInterpolate_28double_2c_20double__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0, $14 = 0.0, $23 = 0.0;
  $5 = __stack_pointer - 48 | 0;
  HEAP32[($5 + 44 | 0) >> 2] = $0;
  HEAPF64[($5 + 32 | 0) >> 3] = $1;
  HEAP32[($5 + 28 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($5 + 32 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$2
    }
    $14 = +(0 | 0);
    break label$1;
   }
   $14 = +HEAPF64[($5 + 32 | 0) >> 3];
  }
  HEAPF64[($5 + 32 | 0) >> 3] = $14;
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($5 + 32 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$4
    }
    $23 = 1.0;
    break label$3;
   }
   $23 = +HEAPF64[($5 + 32 | 0) >> 3];
  }
  HEAPF64[($5 + 32 | 0) >> 3] = $23;
  HEAPF64[($5 + 16 | 0) >> 3] = +(0 | 0);
  HEAP32[($5 + 12 | 0) >> 2] = 1;
  HEAP32[($5 + 12 | 0) >> 2] = 1;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5 + 12 | 0) >> 2] | 0) >>> 0 < 47 >>> 0 & 1 | 0)) {
     break label$5
    }
    label$7 : {
     if (!(+HEAPF64[($5 + 32 | 0) >> 3] < +HEAPF64[(19648 + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     HEAPF64[($5 + 16 | 0) >> 3] = 1.0 - (+HEAPF64[(19648 + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($5 + 32 | 0) >> 3]) / (+HEAPF64[(19648 + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[(19648 + (((HEAP32[($5 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]);
     break label$5;
    }
    HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAPF64[$5 >> 3] = +HEAPF64[($5 + 16 | 0) >> 3] * (+HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + (((HEAP32[($5 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) + +HEAPF64[((HEAP32[($5 + 28 | 0) >> 2] | 0) + (((HEAP32[($5 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  return +(+HEAPF64[$5 >> 3]);
 }
 
 function WesternAspen__getAspenFuelBedDepth_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $10 = 0;
  $4 = __stack_pointer - 64 | 0;
  HEAP32[($4 + 60 | 0) >> 2] = $0;
  HEAP32[($4 + 56 | 0) >> 2] = $1;
  HEAP32[($4 + 52 | 0) >> 2] = (HEAP32[($4 + 56 | 0) >> 2] | 0) - 1 | 0;
  i64toi32_i32$0 = 0;
  $10 = 0;
  i64toi32_i32$1 = $4 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $10;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4;
  HEAP32[$4 >> 2] = $10;
  HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[$4 >> 3] = .65;
  HEAPF64[($4 + 8 | 0) >> 3] = .3;
  HEAPF64[($4 + 16 | 0) >> 3] = .18;
  HEAPF64[($4 + 24 | 0) >> 3] = .5;
  HEAPF64[($4 + 32 | 0) >> 3] = .18;
  return +(+HEAPF64[($4 + ((HEAP32[($4 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
 }
 
 function WesternAspen__getAspenMoistureOfExtinctionDead_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return +(.25);
 }
 
 function WesternAspen__getAspenHeatOfCombustionDead_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return +(8.0e3);
 }
 
 function WesternAspen__getAspenHeatOfCombustionLive_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return +(8.0e3);
 }
 
 function WesternAspen__getAspenLoadDeadOneHour_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $6 = 0, $37 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAPF64[($5 + 16 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 24 | 0) >> 2] | 0) - 1 | 0;
  HEAPF64[$5 >> 3] = +(0 | 0);
  label$1 : {
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[$5 >> 3] = +WesternAspen__aspenInterpolate_28double_2c_20double__29($6 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), 19696 + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 48) | 0 | 0);
  }
  $37 = +HEAPF64[$5 >> 3] * 2.0e3 / 43560.0;
  __stack_pointer = $5 + 32 | 0;
  return +$37;
 }
 
 function WesternAspen__getAspenLoadDeadTenHour_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  HEAP32[($4 + 20 | 0) >> 2] = (HEAP32[($4 + 24 | 0) >> 2] | 0) - 1 | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[(19936 + ((HEAP32[($4 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  }
  return +(+HEAPF64[($4 + 8 | 0) >> 3] * 2.0e3 / 43560.0);
 }
 
 function WesternAspen__getAspenLoadLiveHerbaceous_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $6 = 0, $37 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAPF64[($5 + 16 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 24 | 0) >> 2] | 0) - 1 | 0;
  HEAPF64[$5 >> 3] = +(0 | 0);
  label$1 : {
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[$5 >> 3] = +WesternAspen__aspenInterpolate_28double_2c_20double__29($6 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), 19984 + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 48) | 0 | 0);
  }
  $37 = +HEAPF64[$5 >> 3] * 2.0e3 / 43560.0;
  __stack_pointer = $5 + 32 | 0;
  return +$37;
 }
 
 function WesternAspen__getAspenLoadLiveWoody_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $6 = 0, $37 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAPF64[($5 + 16 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 24 | 0) >> 2] | 0) - 1 | 0;
  HEAPF64[$5 >> 3] = +(0 | 0);
  label$1 : {
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[$5 >> 3] = +WesternAspen__aspenInterpolate_28double_2c_20double__29($6 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), 20224 + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 48) | 0 | 0);
  }
  $37 = +HEAPF64[$5 >> 3] * 2.0e3 / 43560.0;
  __stack_pointer = $5 + 32 | 0;
  return +$37;
 }
 
 function WesternAspen__calculateAspenMortality_28int_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  var $6 = 0, $7 = 0, $56 = 0.0, $65 = 0.0, $68 = 0.0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $0;
  HEAP32[($6 + 40 | 0) >> 2] = $1;
  HEAPF64[($6 + 32 | 0) >> 3] = $2;
  HEAPF64[($6 + 24 | 0) >> 3] = $3;
  $7 = HEAP32[($6 + 44 | 0) >> 2] | 0;
  HEAPF64[($6 + 16 | 0) >> 3] = 1.0;
  HEAPF64[($6 + 8 | 0) >> 3] = +HEAPF64[($6 + 32 | 0) >> 3] / 1.8;
  label$1 : {
   label$2 : {
    if (HEAP32[($6 + 40 | 0) >> 2] | 0) {
     break label$2
    }
    HEAPF64[($6 + 16 | 0) >> 3] = 1.0 / (1.0 + +exp(+(+HEAPF64[($6 + 8 | 0) >> 3] * -2.134 + (+HEAPF64[($6 + 24 | 0) >> 3] * .638 + -4.407))));
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($6 + 40 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($6 + 16 | 0) >> 3] = 1.0 / (1.0 + +exp(+(+HEAPF64[($6 + 8 | 0) >> 3] * -3.6 + (+HEAPF64[($6 + 24 | 0) >> 3] * .218 + -2.157))));
   }
  }
  label$4 : {
   label$5 : {
    if (!(+HEAPF64[($6 + 16 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$5
    }
    $56 = +(0 | 0);
    break label$4;
   }
   $56 = +HEAPF64[($6 + 16 | 0) >> 3];
  }
  HEAPF64[($7 + 8 | 0) >> 3] = $56;
  label$6 : {
   label$7 : {
    if (!(+HEAPF64[($6 + 16 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$7
    }
    $65 = 1.0;
    break label$6;
   }
   $65 = +HEAPF64[($6 + 16 | 0) >> 3];
  }
  HEAPF64[($7 + 8 | 0) >> 3] = $65;
  $68 = +HEAPF64[($7 + 8 | 0) >> 3];
  __stack_pointer = $6 + 48 | 0;
  return +$68;
 }
 
 function WesternAspen__getAspenSavrDeadOneHour_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $6 = 0, $32 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAPF64[($5 + 16 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 24 | 0) >> 2] | 0) - 1 | 0;
  HEAPF64[$5 >> 3] = 1440.0;
  label$1 : {
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[$5 >> 3] = +WesternAspen__aspenInterpolate_28double_2c_20double__29($6 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), 20464 + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 48) | 0 | 0);
  }
  $32 = +HEAPF64[$5 >> 3];
  __stack_pointer = $5 + 32 | 0;
  return +$32;
 }
 
 function WesternAspen__getAspenSavrDeadTenHour_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return +(109.0);
 }
 
 function WesternAspen__getAspenSavrLiveHerbaceous_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return +(2800.0);
 }
 
 function WesternAspen__getAspenSavrLiveWoody_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $6 = 0, $38 = 0.0;
  $5 = __stack_pointer - 288 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 284 | 0) >> 2] = $0;
  HEAP32[($5 + 280 | 0) >> 2] = $1;
  HEAPF64[($5 + 272 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 284 | 0) >> 2] | 0;
  HEAP32[($5 + 268 | 0) >> 2] = (HEAP32[($5 + 280 | 0) >> 2] | 0) - 1 | 0;
  __memcpy($5 + 16 | 0 | 0, 4464 | 0, 240 | 0) | 0;
  HEAPF64[($5 + 8 | 0) >> 3] = 2440.0;
  label$1 : {
   if (!((HEAP32[($5 + 268 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($5 + 268 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($5 + 8 | 0) >> 3] = +WesternAspen__aspenInterpolate_28double_2c_20double__29($6 | 0, +(+HEAPF64[($5 + 272 | 0) >> 3]), ($5 + 16 | 0) + Math_imul(HEAP32[($5 + 268 | 0) >> 2] | 0, 48) | 0 | 0);
  }
  $38 = +HEAPF64[($5 + 8 | 0) >> 3];
  __stack_pointer = $5 + 288 | 0;
  return +$38;
 }
 
 function WindSpeedUtility__WindSpeedUtility_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF64[($4 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[$4 >> 3] = +(0 | 0);
  return $4 | 0;
 }
 
 function WindSpeedUtility__windSpeedAtMidflame_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  HEAPF64[$6 >> 3] = +HEAPF64[($5 + 16 | 0) >> 3] * +HEAPF64[($5 + 8 | 0) >> 3];
  return +(+HEAPF64[$6 >> 3]);
 }
 
 function WindSpeedUtility__windSpeedAtTwentyFeetFromTenMeter_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAPF64[($4 + 16 | 0) >> 3] = $1;
  HEAPF64[($4 + 8 | 0) >> 3] = +HEAPF64[($4 + 16 | 0) >> 3] / 1.15;
  return +(+HEAPF64[($4 + 8 | 0) >> 3]);
 }
 
 function emscripten_bind_VoidPtr___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_DoublePtr___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_FireSize_FireSize_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(88 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(14 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_FireSize_calculateFireBasicDimensions_4($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 44 | 0) >> 2] = $0;
  HEAPF64[($7 + 32 | 0) >> 3] = $1;
  HEAP32[($7 + 28 | 0) >> 2] = $2;
  HEAPF64[($7 + 16 | 0) >> 3] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  FireSize__calculateFireBasicDimensions_28double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($7 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7 + 32 | 0) >> 3]), HEAP32[($7 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7 + 16 | 0) >> 3]), HEAP32[($7 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $7 + 48 | 0;
  return;
 }
 
 function emscripten_bind_FireSize_getFireLengthToWidthRatio_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +FireSize__getFireLengthToWidthRatio_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_FireSize_getEccentricity_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +FireSize__getEccentricity_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_FireSize_getBackingSpreadRate_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +FireSize__getBackingSpreadRate_28SpeedUnits__SpeedUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_FireSize_getEllipticalA_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getEllipticalA_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize_getEllipticalB_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getEllipticalB_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize_getEllipticalC_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getEllipticalC_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize_getFireLength_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getFireLength_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize_getMaxFireWidth_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getMaxFireWidth_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize_getFirePerimeter_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getFirePerimeter_28LengthUnits__LengthUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize_getFireArea_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $11 = +FireSize__getFireArea_28AreaUnits__AreaUnitsEnum_2c_20double_2c_20TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), HEAP32[($6 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_FireSize___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[19 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainResource_SIGContainResource_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(56 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(30 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContainResource_SIGContainResource_7($0, $1, $2, $3, $4, $5, $6) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  var $9 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $23 = 0, $34 = 0, $35 = 0;
  $9 = __stack_pointer - 64 | 0;
  __stack_pointer = $9;
  HEAPF64[($9 + 56 | 0) >> 3] = $0;
  HEAPF64[($9 + 48 | 0) >> 3] = $1;
  HEAPF64[($9 + 40 | 0) >> 3] = $2;
  HEAP32[($9 + 36 | 0) >> 2] = $3;
  HEAP32[($9 + 32 | 0) >> 2] = $4;
  HEAPF64[($9 + 24 | 0) >> 3] = $5;
  HEAPF64[($9 + 16 | 0) >> 3] = $6;
  $11 = operator_20new_28unsigned_20long_29(56 | 0) | 0;
  $12 = +HEAPF64[($9 + 56 | 0) >> 3];
  $13 = +HEAPF64[($9 + 48 | 0) >> 3];
  $14 = +HEAPF64[($9 + 40 | 0) >> 3];
  $15 = HEAP32[($9 + 36 | 0) >> 2] | 0;
  $16 = HEAP32[($9 + 32 | 0) >> 2] | 0;
  $17 = +HEAPF64[($9 + 24 | 0) >> 3];
  $18 = +HEAPF64[($9 + 16 | 0) >> 3];
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iidddiidd(3 | 0, $11 | 0, +$12, +$13, +$14, $15 | 0, $16 | 0, +$17, +$18) | 0;
  $23 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($23 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $9 + 64 | 0;
   return $11 | 0;
  }
  $34 = __cxa_find_matching_catch_2() | 0;
  $35 = getTempRet0() | 0;
  HEAP32[($9 + 12 | 0) >> 2] = $34;
  HEAP32[($9 + 8 | 0) >> 2] = $35;
  operator_20delete_28void__29($11 | 0);
  HEAP32[($9 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($9 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContainResource_description_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainResource__description_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainResource_print_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  SIGContainResource__print_28char__2c_20int_29_20const(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainResource_arrival_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainResource__arrival_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainResource_hourCost_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainResource__hourCost_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainResource_duration_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainResource__duration_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainResource_production_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainResource__production_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainResource_baseCost_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainResource__baseCost_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainResource_flank_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainResource__flank_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainResource___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainForce_SIGContainForce_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0, $6 = 0, $11 = 0, $22 = 0, $23 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(16 | 0) | 0;
  $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iii(20 | 0, $5 | 0, $6 | 0) | 0;
  $11 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($11 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $3 + 16 | 0;
   return $5 | 0;
  }
  $22 = __cxa_find_matching_catch_2() | 0;
  $23 = getTempRet0() | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $22;
  HEAP32[($3 + 4 | 0) >> 2] = $23;
  operator_20delete_28void__29($5 | 0);
  HEAP32[($3 + 4 | 0) >> 2] | 0;
  __resumeException(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContainForce_addResource_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainForce__addResource_28SIGContainResource__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainForce_addResource_7($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  var $10 = 0, $19 = 0;
  $10 = __stack_pointer - 64 | 0;
  __stack_pointer = $10;
  HEAP32[($10 + 60 | 0) >> 2] = $0;
  HEAPF64[($10 + 48 | 0) >> 3] = $1;
  HEAPF64[($10 + 40 | 0) >> 3] = $2;
  HEAPF64[($10 + 32 | 0) >> 3] = $3;
  HEAP32[($10 + 28 | 0) >> 2] = $4;
  HEAP32[($10 + 24 | 0) >> 2] = $5;
  HEAPF64[($10 + 16 | 0) >> 3] = $6;
  HEAPF64[($10 + 8 | 0) >> 3] = $7;
  $19 = SIGContainForce__addResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29(HEAP32[($10 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($10 + 48 | 0) >> 3]), +(+HEAPF64[($10 + 40 | 0) >> 3]), +(+HEAPF64[($10 + 32 | 0) >> 3]), HEAP32[($10 + 28 | 0) >> 2] | 0 | 0, HEAP32[($10 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($10 + 16 | 0) >> 3]), +(+HEAPF64[($10 + 8 | 0) >> 3])) | 0;
  __stack_pointer = $10 + 64 | 0;
  return $19 | 0;
 }
 
 function emscripten_bind_SIGContainForce_exhausted_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__exhausted_28ContainFlank_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce_firstArrival_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__firstArrival_28ContainFlank_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce_nextArrival_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAPF64[($6 + 16 | 0) >> 3] = $1;
  HEAPF64[($6 + 8 | 0) >> 3] = $2;
  HEAP32[($6 + 4 | 0) >> 2] = $3;
  $11 = +SIGContainForce__nextArrival_28double_2c_20double_2c_20ContainFlank_29_20const(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), +(+HEAPF64[($6 + 8 | 0) >> 3]), HEAP32[($6 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_SIGContainForce_productionRate_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  $9 = +SIGContainForce__productionRate_28double_2c_20ContainFlank_29_20const(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_SIGContainForce_resources_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainForce__resources_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainForce_resourceArrival_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__resourceArrival_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce_resourceBaseCost_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__resourceBaseCost_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce_resourceCost_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $9 = +SIGContainForce__resourceCost_28int_2c_20double_29_20const(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return +$9;
 }
 
 function emscripten_bind_SIGContainForce_resourceDescription_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainForce__resourceDescription_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainForce_resourceDuration_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__resourceDuration_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce_resourceFlank_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainForce__resourceFlank_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainForce_resourceHourCost_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__resourceHourCost_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce_resourceProduction_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForce__resourceProduction_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForce___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(12 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(15 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContainForceAdapter_addResource_7($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  var $10 = 0;
  $10 = __stack_pointer - 64 | 0;
  __stack_pointer = $10;
  HEAP32[($10 + 60 | 0) >> 2] = $0;
  HEAPF64[($10 + 48 | 0) >> 3] = $1;
  HEAPF64[($10 + 40 | 0) >> 3] = $2;
  HEAPF64[($10 + 32 | 0) >> 3] = $3;
  HEAP32[($10 + 28 | 0) >> 2] = $4;
  HEAP32[($10 + 24 | 0) >> 2] = $5;
  HEAPF64[($10 + 16 | 0) >> 3] = $6;
  HEAPF64[($10 + 8 | 0) >> 3] = $7;
  SIGContainForceAdapter__addResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29(HEAP32[($10 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($10 + 48 | 0) >> 3]), +(+HEAPF64[($10 + 40 | 0) >> 3]), +(+HEAPF64[($10 + 32 | 0) >> 3]), HEAP32[($10 + 28 | 0) >> 2] | 0 | 0, HEAP32[($10 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($10 + 16 | 0) >> 3]), +(+HEAPF64[($10 + 8 | 0) >> 3]));
  __stack_pointer = $10 + 64 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainForceAdapter_firstArrival_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainForceAdapter__firstArrival_28ContainFlank_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainForceAdapter_removeResourceAt_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainForceAdapter__removeResourceAt_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainForceAdapter__removeResourceWithThisDesc_28char_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainForceAdapter__removeAllResourcesWithThisDesc_28char_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainForceAdapter___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[18 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainSim_SIGContainSim_13($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
  $0 = +$0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = +$7;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  var $15 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $38 = 0, $49 = 0, $50 = 0;
  $15 = __stack_pointer - 80 | 0;
  __stack_pointer = $15;
  HEAPF64[($15 + 72 | 0) >> 3] = $0;
  HEAPF64[($15 + 64 | 0) >> 3] = $1;
  HEAP32[($15 + 60 | 0) >> 2] = $2;
  HEAP32[($15 + 56 | 0) >> 2] = $3;
  HEAPF64[($15 + 48 | 0) >> 3] = $4;
  HEAP32[($15 + 44 | 0) >> 2] = $5;
  HEAP32[($15 + 40 | 0) >> 2] = $6;
  HEAPF64[($15 + 32 | 0) >> 3] = $7;
  HEAP8[($15 + 31 | 0) >> 0] = $8;
  HEAP32[($15 + 24 | 0) >> 2] = $9;
  HEAP32[($15 + 20 | 0) >> 2] = $10;
  HEAP32[($15 + 16 | 0) >> 2] = $11;
  HEAP32[($15 + 12 | 0) >> 2] = $12;
  $18 = operator_20new_28unsigned_20long_29(144 | 0) | 0;
  $19 = +HEAPF64[($15 + 72 | 0) >> 3];
  $20 = +HEAPF64[($15 + 64 | 0) >> 3];
  $21 = HEAP32[($15 + 60 | 0) >> 2] | 0;
  $22 = HEAP32[($15 + 56 | 0) >> 2] | 0;
  $23 = +HEAPF64[($15 + 48 | 0) >> 3];
  $24 = HEAP32[($15 + 44 | 0) >> 2] | 0;
  $25 = HEAP32[($15 + 40 | 0) >> 2] | 0;
  $26 = +HEAPF64[($15 + 32 | 0) >> 3];
  $27 = HEAPU8[($15 + 31 | 0) >> 0] | 0;
  $28 = HEAP32[($15 + 24 | 0) >> 2] | 0;
  $29 = HEAP32[($15 + 20 | 0) >> 2] | 0;
  $30 = HEAP32[($15 + 16 | 0) >> 2] | 0;
  $31 = HEAP32[($15 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iiddiidiidiiiii(22 | 0, $18 | 0, +$19, +$20, $21 | 0, $22 | 0, +$23, $24 | 0, $25 | 0, +$26, $27 & 1 | 0 | 0, $28 | 0, $29 | 0, $30 | 0, $31 | 0) | 0;
  $38 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($38 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $15 + 80 | 0;
   return $18 | 0;
  }
  $49 = __cxa_find_matching_catch_2() | 0;
  $50 = getTempRet0() | 0;
  HEAP32[($15 + 8 | 0) >> 2] = $49;
  HEAP32[($15 + 4 | 0) >> 2] = $50;
  operator_20delete_28void__29($18 | 0);
  HEAP32[($15 + 4 | 0) >> 2] | 0;
  __resumeException(HEAP32[($15 + 8 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContainSim_attackDistance_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__attackDistance_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_attackPointX_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__attackPointX_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_attackPointY_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__attackPointY_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_attackTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__attackTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_distanceStep_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__distanceStep_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireBackAtAttack_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireBackAtAttack_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireBackAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireBackAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireHeadAtAttack_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireHeadAtAttack_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireHeadAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireHeadAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireLwRatioAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireLwRatioAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireReportTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireReportTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireSizeAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireSizeAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireSpreadRateAtBack_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__fireSpreadRateAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_force_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__force_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_maximumSimulationSteps_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__maximumSimulationSteps_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_minimumSimulationSteps_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__minimumSimulationSteps_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_status_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__status_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_tactic_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__tactic_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_finalFireCost_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__finalFireCost_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_finalFireLine_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__finalFireLine_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_finalFirePerimeter_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__finalFirePerimeter_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_finalFireSize_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__finalFireSize_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_finalFireSweep_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__finalFireSweep_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_finalFireTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainSim__finalFireTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainSim_finalResourcesUsed_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__finalResourcesUsed_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_fireHeadX_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[(0 + 21132 | 0) >> 2] = SIGContainSim__fireHeadX_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return 21132 | 0;
 }
 
 function emscripten_bind_SIGContainSim_firePerimeterY_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[(0 + 21136 | 0) >> 2] = SIGContainSim__firePerimeterY_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return 21136 | 0;
 }
 
 function emscripten_bind_SIGContainSim_firePerimeterX_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[(0 + 21140 | 0) >> 2] = SIGContainSim__firePerimeterX_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return 21140 | 0;
 }
 
 function emscripten_bind_SIGContainSim_firePoints_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainSim__firePoints_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainSim_checkmem_5($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 28 | 0) >> 2] = $0;
  HEAP32[($8 + 24 | 0) >> 2] = $1;
  HEAP32[($8 + 20 | 0) >> 2] = $2;
  HEAP32[($8 + 16 | 0) >> 2] = $3;
  HEAP32[($8 + 12 | 0) >> 2] = $4;
  HEAP32[($8 + 8 | 0) >> 2] = $5;
  SIGContainSim__checkmem_28char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20int_29(HEAP32[($8 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $8 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainSim_run_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGContainSim__run_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainSim_UncontainedArea_5($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  var $8 = 0, $15 = 0.0;
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 44 | 0) >> 2] = $0;
  HEAPF64[($8 + 32 | 0) >> 3] = $1;
  HEAPF64[($8 + 24 | 0) >> 3] = $2;
  HEAPF64[($8 + 16 | 0) >> 3] = $3;
  HEAPF64[($8 + 8 | 0) >> 3] = $4;
  HEAP32[($8 + 4 | 0) >> 2] = $5;
  $15 = +SIGContainSim__UncontainedArea_28double_2c_20double_2c_20double_2c_20double_2c_20ContainTactic_29(HEAP32[($8 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($8 + 32 | 0) >> 3]), +(+HEAPF64[($8 + 24 | 0) >> 3]), +(+HEAPF64[($8 + 16 | 0) >> 3]), +(+HEAPF64[($8 + 8 | 0) >> 3]), HEAP32[($8 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $8 + 48 | 0;
  return +$15;
 }
 
 function emscripten_bind_SIGContainSim___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[25 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0() {
  var $2 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(12 | 0) | 0;
  SIGDiurnalROS__SIGDiurnalROS_28_29($4 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function emscripten_bind_SIGDiurnalROS_push_1($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  SIGDiurnalROS__push_28double_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[$4 >> 3]));
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGDiurnalROS_at_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGDiurnalROS__at_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGDiurnalROS_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGDiurnalROS__size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGDiurnalROS__size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGDiurnalROS___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   SIGDiurnalROS___SIGDiurnalROS_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContain_SIGContain_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = +$0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  var $13 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $31 = 0, $42 = 0, $43 = 0;
  $13 = __stack_pointer - 80 | 0;
  __stack_pointer = $13;
  HEAPF64[($13 + 72 | 0) >> 3] = $0;
  HEAPF64[($13 + 64 | 0) >> 3] = $1;
  HEAP32[($13 + 60 | 0) >> 2] = $2;
  HEAP32[($13 + 56 | 0) >> 2] = $3;
  HEAPF64[($13 + 48 | 0) >> 3] = $4;
  HEAPF64[($13 + 40 | 0) >> 3] = $5;
  HEAP32[($13 + 36 | 0) >> 2] = $6;
  HEAP32[($13 + 32 | 0) >> 2] = $7;
  HEAPF64[($13 + 24 | 0) >> 3] = $8;
  HEAP32[($13 + 20 | 0) >> 2] = $9;
  HEAPF64[($13 + 8 | 0) >> 3] = $10;
  $15 = operator_20new_28unsigned_20long_29(272 | 0) | 0;
  $16 = +HEAPF64[($13 + 72 | 0) >> 3];
  $17 = +HEAPF64[($13 + 64 | 0) >> 3];
  $18 = HEAP32[($13 + 60 | 0) >> 2] | 0;
  $19 = HEAP32[($13 + 56 | 0) >> 2] | 0;
  $20 = +HEAPF64[($13 + 48 | 0) >> 3];
  $21 = +HEAPF64[($13 + 40 | 0) >> 3];
  $22 = HEAP32[($13 + 36 | 0) >> 2] | 0;
  $23 = HEAP32[($13 + 32 | 0) >> 2] | 0;
  $24 = +HEAPF64[($13 + 24 | 0) >> 3];
  $25 = HEAP32[($13 + 20 | 0) >> 2] | 0;
  $26 = +HEAPF64[($13 + 8 | 0) >> 3];
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iiddiiddiidid(13 | 0, $15 | 0, +$16, +$17, $18 | 0, $19 | 0, +$20, +$21, $22 | 0, $23 | 0, +$24, $25 | 0, +$26) | 0;
  $31 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($31 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $13 + 80 | 0;
   return $15 | 0;
  }
  $42 = __cxa_find_matching_catch_2() | 0;
  $43 = getTempRet0() | 0;
  HEAP32[($13 + 4 | 0) >> 2] = $42;
  HEAP32[$13 >> 2] = $43;
  operator_20delete_28void__29($15 | 0);
  HEAP32[$13 >> 2] | 0;
  __resumeException(HEAP32[($13 + 4 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContain_simulationTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__simulationTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_fireSpreadRateAtBack_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireSpreadRateAtBack_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_fireLwRatioAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireLwRatioAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_force_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContain__force_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContain_resourceHourCost_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContain__resourceHourCost_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContain_attackDistance_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__attackDistance_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_attackPointX_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__attackPointX_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_fireHeadAtAttack_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireHeadAtAttack_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_attackPointY_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__attackPointY_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_attackTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__attackTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_resourceBaseCost_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContain__resourceBaseCost_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContain_fireSpreadRateAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireSpreadRateAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_fireHeadAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireHeadAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_fireReportTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireReportTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_resourceProduction_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContain__resourceProduction_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContain_fireBackAtAttack_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireBackAtAttack_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_simulationStep_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContain__simulationStep_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContain_tactic_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContain__tactic_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContain_resourceDescription_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContain__resourceDescription_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContain_distanceStep_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__distanceStep_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_status_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContain__status_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContain_resourceArrival_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContain__resourceArrival_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContain_fireSizeAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireSizeAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_setFireStartTimeMinutes_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContain__setFireStartTimeMinutes_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContain_fireBackAtReport_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__fireBackAtReport_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain_resourceDuration_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContain__resourceDuration_28int_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContain_resources_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContain__resources_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContain_exhaustedTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContain__exhaustedTime_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContain___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_SIGContainAdapter_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(240 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(31 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGContainAdapter_setReportSize_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGContainAdapter__setReportSize_28double_2c_20AreaUnits__AreaUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_setLwRatio_1($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  SIGContainAdapter__setLwRatio_28double_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[$4 >> 3]));
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_setMaxFireTime_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGContainAdapter__setMaxFireTime_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_doContainRun_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGContainAdapter__doContainRun_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_setReportRate_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGContainAdapter__setReportRate_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getPerimiterAtInitialAttack_28LengthUnits__LengthUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_setTactic_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGContainAdapter__setTactic_28ContainTactic_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_removeAllResources_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGContainAdapter__removeAllResources_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_getFinalFireSize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getFinalFireSize_28AreaUnits__AreaUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getFireSizeAtInitialAttack_28AreaUnits__AreaUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_setAttackDistance_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGContainAdapter__setAttackDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_getContainmentStatus_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainAdapter__getContainmentStatus_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainAdapter__removeResourceWithThisDesc_28char_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getPerimeterAtContainment_28LengthUnits__LengthUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getFinalFireLineLength_28LengthUnits__LengthUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_setRetry_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP8[($4 + 11 | 0) >> 0] = $1;
  SIGContainAdapter__setRetry_28bool_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, (HEAPU8[($4 + 11 | 0) >> 0] | 0) & 1 | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getFinalContainmentArea_28AreaUnits__AreaUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_removeResourceAt_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainAdapter__removeResourceAt_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = SIGContainAdapter__removeAllResourcesWithThisDesc_28char_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGContainAdapter_getFinalCost_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGContainAdapter__getFinalCost_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGContainAdapter__getFinalTimeSinceReport_28TimeUnits__TimeUnitsEnum_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGContainAdapter_setFireStartTime_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGContainAdapter__setFireStartTime_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_setMinSteps_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGContainAdapter__setMinSteps_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_setMaxSteps_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGContainAdapter__setMaxSteps_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_setMaxFireSize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGContainAdapter__setMaxFireSize_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter_addResource_8($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = +$7;
  $8 = +$8;
  var $11 = 0;
  $11 = __stack_pointer - 64 | 0;
  __stack_pointer = $11;
  HEAP32[($11 + 60 | 0) >> 2] = $0;
  HEAPF64[($11 + 48 | 0) >> 3] = $1;
  HEAPF64[($11 + 40 | 0) >> 3] = $2;
  HEAP32[($11 + 36 | 0) >> 2] = $3;
  HEAPF64[($11 + 24 | 0) >> 3] = $4;
  HEAP32[($11 + 20 | 0) >> 2] = $5;
  HEAP32[($11 + 16 | 0) >> 2] = $6;
  HEAPF64[($11 + 8 | 0) >> 3] = $7;
  HEAPF64[$11 >> 3] = $8;
  SIGContainAdapter__addResource_28double_2c_20double_2c_20TimeUnits__TimeUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20char_20const__2c_20double_2c_20double_29(HEAP32[($11 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($11 + 48 | 0) >> 3]), +(+HEAPF64[($11 + 40 | 0) >> 3]), HEAP32[($11 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($11 + 24 | 0) >> 3]), HEAP32[($11 + 20 | 0) >> 2] | 0 | 0, HEAP32[($11 + 16 | 0) >> 2] | 0 | 0, +(+HEAPF64[($11 + 8 | 0) >> 3]), +(+HEAPF64[$11 >> 3]));
  __stack_pointer = $11 + 64 | 0;
  return;
 }
 
 function emscripten_bind_SIGContainAdapter___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[32 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(56 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(27 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGIgniteInputs_initializeMembers_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGIgniteInputs__initializeMembers_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setAirTemperature_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setAirTemperature_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setDuffDepth_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setDuffDepth_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGIgniteInputs__setIgnitionFuelBedType_28IgnitionFuelBedType_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setLightningChargeType_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGIgniteInputs__setLightningChargeType_28LightningCharge_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setMoistureHundredHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_setSunShade_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgniteInputs__setSunShade_28double_2c_20CoverUnits__CoverUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 80 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 76 | 0) >> 2] = $0;
  HEAPF64[($14 + 64 | 0) >> 3] = $1;
  HEAPF64[($14 + 56 | 0) >> 3] = $2;
  HEAP32[($14 + 52 | 0) >> 2] = $3;
  HEAPF64[($14 + 40 | 0) >> 3] = $4;
  HEAP32[($14 + 36 | 0) >> 2] = $5;
  HEAPF64[($14 + 24 | 0) >> 3] = $6;
  HEAP32[($14 + 20 | 0) >> 2] = $7;
  HEAP32[($14 + 16 | 0) >> 2] = $8;
  HEAPF64[($14 + 8 | 0) >> 3] = $9;
  HEAP32[($14 + 4 | 0) >> 2] = $10;
  HEAP32[$14 >> 2] = $11;
  SIGIgniteInputs__updateIgniteInputs_28double_2c_20double_2c_20MoistureUnits__MoistureUnitsEnum_2c_20double_2c_20TemperatureUnits__TemperatureUnitsEnum_2c_20double_2c_20CoverUnits__CoverUnitsEnum_2c_20IgnitionFuelBedType_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20LightningCharge_29(HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), +(+HEAPF64[($14 + 56 | 0) >> 3]), HEAP32[($14 + 52 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 40 | 0) >> 3]), HEAP32[($14 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 24 | 0) >> 3]), HEAP32[($14 + 20 | 0) >> 2] | 0 | 0, HEAP32[($14 + 16 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 8 | 0) >> 3]), HEAP32[($14 + 4 | 0) >> 2] | 0 | 0, HEAP32[$14 >> 2] | 0 | 0);
  __stack_pointer = $14 + 80 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGIgniteInputs__getIgnitionFuelBedType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGIgniteInputs_getLightningChargeType_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGIgniteInputs__getLightningChargeType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGIgniteInputs_getAirTemperature_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getAirTemperature_28TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgniteInputs_getDuffDepth_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getDuffDepth_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getMoistureHundredHour_28MoistureUnits__MoistureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getMoistureOneHour_28MoistureUnits__MoistureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgniteInputs_getSunShade_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgniteInputs__getSunShade_28CoverUnits__CoverUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgniteInputs___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[28 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_SIGIgnite_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(64 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(33 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGIgnite_initializeMembers_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGIgnite__initializeMembers_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_getFuelBedType_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGIgnite__getFuelBedType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGIgnite_getLightningChargeType_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGIgnite__getLightningChargeType_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__calculateFirebrandIgnitionProbability_28ProbabilityUnits__ProbabilityUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__calculateLightningIgnitionProbability_28ProbabilityUnits__ProbabilityUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_setAirTemperature_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgnite__setAirTemperature_28double_2c_20TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_setDuffDepth_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgnite__setDuffDepth_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGIgnite__setIgnitionFuelBedType_28IgnitionFuelBedType_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_setLightningChargeType_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGIgnite__setLightningChargeType_28LightningCharge_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_setMoistureHundredHour_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgnite__setMoistureHundredHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_setMoistureOneHour_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgnite__setMoistureOneHour_28double_2c_20MoistureUnits__MoistureUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_setSunShade_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGIgnite__setSunShade_28double_2c_20CoverUnits__CoverUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_updateIgniteInputs_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 80 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 76 | 0) >> 2] = $0;
  HEAPF64[($14 + 64 | 0) >> 3] = $1;
  HEAPF64[($14 + 56 | 0) >> 3] = $2;
  HEAP32[($14 + 52 | 0) >> 2] = $3;
  HEAPF64[($14 + 40 | 0) >> 3] = $4;
  HEAP32[($14 + 36 | 0) >> 2] = $5;
  HEAPF64[($14 + 24 | 0) >> 3] = $6;
  HEAP32[($14 + 20 | 0) >> 2] = $7;
  HEAP32[($14 + 16 | 0) >> 2] = $8;
  HEAPF64[($14 + 8 | 0) >> 3] = $9;
  HEAP32[($14 + 4 | 0) >> 2] = $10;
  HEAP32[$14 >> 2] = $11;
  SIGIgnite__updateIgniteInputs_28double_2c_20double_2c_20MoistureUnits__MoistureUnitsEnum_2c_20double_2c_20TemperatureUnits__TemperatureUnitsEnum_2c_20double_2c_20CoverUnits__CoverUnitsEnum_2c_20IgnitionFuelBedType_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20LightningCharge_29(HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), +(+HEAPF64[($14 + 56 | 0) >> 3]), HEAP32[($14 + 52 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 40 | 0) >> 3]), HEAP32[($14 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 24 | 0) >> 3]), HEAP32[($14 + 20 | 0) >> 2] | 0 | 0, HEAP32[($14 + 16 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 8 | 0) >> 3]), HEAP32[($14 + 4 | 0) >> 2] | 0 | 0, HEAP32[$14 >> 2] | 0 | 0);
  __stack_pointer = $14 + 80 | 0;
  return;
 }
 
 function emscripten_bind_SIGIgnite_getAirTemperature_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__getAirTemperature_28TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_getDuffDepth_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__getDuffDepth_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_getFuelTemperature_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__getFuelTemperature_28TemperatureUnits__TemperatureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_getMoistureHundredHour_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__getMoistureHundredHour_28MoistureUnits__MoistureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_getMoistureOneHour_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__getMoistureOneHour_28MoistureUnits__MoistureUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_getSunShade_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGIgnite__getSunShade_28CoverUnits__CoverUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGIgnite_isFuelDepthNeeded_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = (SIGIgnite__isFuelDepthNeeded_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function emscripten_bind_SIGIgnite___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[34 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_SIGSpotInputs_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(88 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(29 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGSpotInputs_getLocation_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpotInputs__getLocation_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGSpotInputs_getTreeSpecies_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpotInputs__getTreeSpecies_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setBurningPileFlameHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setDBH_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setDBH_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setLocation_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpotInputs__setLocation_28SpotFireLocation_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setSurfaceFlameLength_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpotInputs__setTorchingTrees_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setTreeHeight_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setTreeHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setTreeSpecies_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpotInputs__setTreeSpecies_28SpotTreeSpecies_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpotInputs__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  SIGSpotInputs__updateSpotInputsForBurningPile_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($14 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  SIGSpotInputs__updateSpotInputsForSurfaceFire_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($14 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = +$11;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = +$14;
  $15 = $15 | 0;
  var $18 = 0;
  $18 = __stack_pointer - 112 | 0;
  __stack_pointer = $18;
  HEAP32[($18 + 108 | 0) >> 2] = $0;
  HEAP32[($18 + 104 | 0) >> 2] = $1;
  HEAPF64[($18 + 96 | 0) >> 3] = $2;
  HEAP32[($18 + 92 | 0) >> 2] = $3;
  HEAPF64[($18 + 80 | 0) >> 3] = $4;
  HEAP32[($18 + 76 | 0) >> 2] = $5;
  HEAPF64[($18 + 64 | 0) >> 3] = $6;
  HEAP32[($18 + 60 | 0) >> 2] = $7;
  HEAP32[($18 + 56 | 0) >> 2] = $8;
  HEAPF64[($18 + 48 | 0) >> 3] = $9;
  HEAP32[($18 + 44 | 0) >> 2] = $10;
  HEAPF64[($18 + 32 | 0) >> 3] = $11;
  HEAP32[($18 + 28 | 0) >> 2] = $12;
  HEAP32[($18 + 24 | 0) >> 2] = $13;
  HEAPF64[($18 + 16 | 0) >> 3] = $14;
  HEAP32[($18 + 12 | 0) >> 2] = $15;
  SIGSpotInputs__updateSpotInputsForTorchingTrees_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20int_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20SpotTreeSpecies_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($18 + 108 | 0) >> 2] | 0 | 0, HEAP32[($18 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 96 | 0) >> 3]), HEAP32[($18 + 92 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 80 | 0) >> 3]), HEAP32[($18 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 64 | 0) >> 3]), HEAP32[($18 + 60 | 0) >> 2] | 0 | 0, HEAP32[($18 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 48 | 0) >> 3]), HEAP32[($18 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 32 | 0) >> 3]), HEAP32[($18 + 28 | 0) >> 2] | 0 | 0, HEAP32[($18 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 16 | 0) >> 3]), HEAP32[($18 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $18 + 112 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getBurningPileFlameHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getDBH_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getDBH_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getSurfaceFlameLength_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getTreeHeight_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getTreeHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpotInputs__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpotInputs_getTorchingTrees_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpotInputs__getTorchingTrees_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGSpotInputs___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_SIGSpot_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(728 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(35 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_SIGSpot_initializeMembers_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGSpot__initializeMembers_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGSpot__calculateSpottingDistanceFromBurningPile_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGSpot__calculateSpottingDistanceFromSurfaceFire_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  SIGSpot__calculateSpottingDistanceFromTorchingTrees_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setBurningPileFlameHeight_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setBurningPileFlameHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setDBH_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setDBH_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setDownwindCoverHeight_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setDownwindCoverHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setFlameLength_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setFlameLength_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setLocation_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpot__setLocation_28SpotFireLocation_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setRidgeToValleyDistance_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setRidgeToValleyDistance_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setRidgeToValleyElevation_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setRidgeToValleyElevation_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpot__setTorchingTrees_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setTreeHeight_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setTreeHeight_28double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setTreeSpecies_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  SIGSpot__setTreeSpecies_28SpotTreeSpecies_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = $2;
  SIGSpot__setWindSpeedAtTwentyFeet_28double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  SIGSpot__updateSpotInputsForBurningPile_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($14 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = +$8;
  $9 = $9 | 0;
  $10 = +$10;
  $11 = $11 | 0;
  var $14 = 0;
  $14 = __stack_pointer - 96 | 0;
  __stack_pointer = $14;
  HEAP32[($14 + 92 | 0) >> 2] = $0;
  HEAP32[($14 + 88 | 0) >> 2] = $1;
  HEAPF64[($14 + 80 | 0) >> 3] = $2;
  HEAP32[($14 + 76 | 0) >> 2] = $3;
  HEAPF64[($14 + 64 | 0) >> 3] = $4;
  HEAP32[($14 + 60 | 0) >> 2] = $5;
  HEAPF64[($14 + 48 | 0) >> 3] = $6;
  HEAP32[($14 + 44 | 0) >> 2] = $7;
  HEAPF64[($14 + 32 | 0) >> 3] = $8;
  HEAP32[($14 + 28 | 0) >> 2] = $9;
  HEAPF64[($14 + 16 | 0) >> 3] = $10;
  HEAP32[($14 + 12 | 0) >> 2] = $11;
  SIGSpot__updateSpotInputsForSurfaceFire_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_29(HEAP32[($14 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 80 | 0) >> 3]), HEAP32[($14 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 64 | 0) >> 3]), HEAP32[($14 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 48 | 0) >> 3]), HEAP32[($14 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 32 | 0) >> 3]), HEAP32[($14 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14 + 16 | 0) >> 3]), HEAP32[($14 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $14 + 96 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = +$9;
  $10 = $10 | 0;
  $11 = +$11;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = +$14;
  $15 = $15 | 0;
  var $18 = 0;
  $18 = __stack_pointer - 112 | 0;
  __stack_pointer = $18;
  HEAP32[($18 + 108 | 0) >> 2] = $0;
  HEAP32[($18 + 104 | 0) >> 2] = $1;
  HEAPF64[($18 + 96 | 0) >> 3] = $2;
  HEAP32[($18 + 92 | 0) >> 2] = $3;
  HEAPF64[($18 + 80 | 0) >> 3] = $4;
  HEAP32[($18 + 76 | 0) >> 2] = $5;
  HEAPF64[($18 + 64 | 0) >> 3] = $6;
  HEAP32[($18 + 60 | 0) >> 2] = $7;
  HEAP32[($18 + 56 | 0) >> 2] = $8;
  HEAPF64[($18 + 48 | 0) >> 3] = $9;
  HEAP32[($18 + 44 | 0) >> 2] = $10;
  HEAPF64[($18 + 32 | 0) >> 3] = $11;
  HEAP32[($18 + 28 | 0) >> 2] = $12;
  HEAP32[($18 + 24 | 0) >> 2] = $13;
  HEAPF64[($18 + 16 | 0) >> 3] = $14;
  HEAP32[($18 + 12 | 0) >> 2] = $15;
  SIGSpot__updateSpotInputsForTorchingTrees_28SpotFireLocation_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20int_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20double_2c_20LengthUnits__LengthUnitsEnum_2c_20SpotTreeSpecies_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29(HEAP32[($18 + 108 | 0) >> 2] | 0 | 0, HEAP32[($18 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 96 | 0) >> 3]), HEAP32[($18 + 92 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 80 | 0) >> 3]), HEAP32[($18 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 64 | 0) >> 3]), HEAP32[($18 + 60 | 0) >> 2] | 0 | 0, HEAP32[($18 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 48 | 0) >> 3]), HEAP32[($18 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 32 | 0) >> 3]), HEAP32[($18 + 28 | 0) >> 2] | 0 | 0, HEAP32[($18 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18 + 16 | 0) >> 3]), HEAP32[($18 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $18 + 112 | 0;
  return;
 }
 
 function emscripten_bind_SIGSpot_getTorchingTrees_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpot__getTorchingTrees_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGSpot_getLocation_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpot__getLocation_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGSpot_getTreeSpecies_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGSpot__getTreeSpecies_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function emscripten_bind_SIGSpot_getBurningPileFlameHeight_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getBurningPileFlameHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getCoverHeightUsedForBurningPile_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getCoverHeightUsedForSurfaceFire_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getCoverHeightUsedForTorchingTrees_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getDBH_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getDBH_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getDownwindCoverHeight_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getDownwindCoverHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getFlameDurationForTorchingTrees_28TimeUnits__TimeUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getFlameHeightForTorchingTrees_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +SIGSpot__getFlameRatioForTorchingTrees_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxFirebrandHeightFromBurningPile_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxFirebrandHeightFromSurfaceFire_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxFirebrandHeightFromTorchingTrees_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxFlatTerrainSpottingDistanceFromBurningPile_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxFlatTerrainSpottingDistanceFromSurfaceFire_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxFlatTerrainSpottingDistanceFromTorchingTrees_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxMountainousTerrainSpottingDistanceFromBurningPile_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getRidgeToValleyDistance_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getRidgeToValleyDistance_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getRidgeToValleyElevation_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getRidgeToValleyElevation_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getSurfaceFlameLength_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getSurfaceFlameLength_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getTreeHeight_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getTreeHeight_28LengthUnits__LengthUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +SIGSpot__getWindSpeedAtTwentyFeet_28SpeedUnits__SpeedUnitsEnum_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_SIGSpot___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[36 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_PalmettoGallberry_PalmettoGallberry_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(88 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(37 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_PalmettoGallberry_initializeMembers_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  PalmettoGallberry__initializeMembers_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getHeatOfCombustionLive_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +PalmettoGallberry__calculatePalmettoGallberyLitterLoad_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyLiveOneHourLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyDeadFoliageLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getHeatOfCombustionDead_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAPF64[($6 + 16 | 0) >> 3] = $1;
  HEAPF64[($6 + 8 | 0) >> 3] = $2;
  HEAPF64[$6 >> 3] = $3;
  $11 = +PalmettoGallberry__calculatePalmettoGallberyLiveFoliageLoad_28double_2c_20double_2c_20double_29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), +(+HEAPF64[($6 + 8 | 0) >> 3]), +(+HEAPF64[$6 >> 3]));
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +PalmettoGallberry__calculatePalmettoGallberyLiveTenHourLoad_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyDeadTenHourLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getMoistureOfExtinctionDead_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyLiveFoliageLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyLitterLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +PalmettoGallberry__calculatePalmettoGallberyDeadTenHourLoad_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +PalmettoGallberry__calculatePalmettoGallberyLiveOneHourLoad_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyFuelBedDepth_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +PalmettoGallberry__calculatePalmettoGallberyDeadFoliageLoad_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +PalmettoGallberry__calculatePalmettoGallberyDeadOneHourLoad_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyLiveTenHourLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +PalmettoGallberry__getPalmettoGallberyDeadOneHourLoad_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  $7 = +PalmettoGallberry__calculatePalmettoGallberyFuelBedDepth_28double_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[$4 >> 3]));
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_PalmettoGallberry___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_WesternAspen_WesternAspen_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(16 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(38 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_WesternAspen_initializeMembers_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  WesternAspen__initializeMembers_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_WesternAspen_calculateAspenMortality_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  var $6 = 0, $11 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAPF64[($6 + 16 | 0) >> 3] = $2;
  HEAPF64[($6 + 8 | 0) >> 3] = $3;
  $11 = +WesternAspen__calculateAspenMortality_28int_2c_20double_2c_20double_29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6 + 16 | 0) >> 3]), +(+HEAPF64[($6 + 8 | 0) >> 3]));
  __stack_pointer = $6 + 32 | 0;
  return +$11;
 }
 
 function emscripten_bind_WesternAspen_getAspenDBH_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenDBH_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenFuelBedDepth_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +WesternAspen__getAspenFuelBedDepth_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenHeatOfCombustionDead_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenHeatOfCombustionLive_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $9 = +WesternAspen__getAspenLoadDeadOneHour_28int_2c_20double_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return +$9;
 }
 
 function emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +WesternAspen__getAspenLoadDeadTenHour_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $9 = +WesternAspen__getAspenLoadLiveHerbaceous_28int_2c_20double_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return +$9;
 }
 
 function emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $9 = +WesternAspen__getAspenLoadLiveWoody_28int_2c_20double_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return +$9;
 }
 
 function emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenMoistureOfExtinctionDead_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenMortality_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenMortality_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $9 = +WesternAspen__getAspenSavrDeadOneHour_28int_2c_20double_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return +$9;
 }
 
 function emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenSavrDeadTenHour_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = +WesternAspen__getAspenSavrLiveHerbaceous_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return +$5;
 }
 
 function emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  $9 = +WesternAspen__getAspenSavrLiveWoody_28int_2c_20double_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return +$9;
 }
 
 function emscripten_bind_WesternAspen___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[39 | 0]($4) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_WindSpeedUtility_WindSpeedUtility_0() {
  var $2 = 0, $4 = 0, $9 = 0, $20 = 0, $21 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(24 | 0) | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_ii(40 | 0, $4 | 0) | 0;
  $9 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($9 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $2 + 16 | 0;
   return $4 | 0;
  }
  $20 = __cxa_find_matching_catch_2() | 0;
  $21 = getTempRet0() | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $20;
  HEAP32[($2 + 8 | 0) >> 2] = $21;
  operator_20delete_28void__29($4 | 0);
  HEAP32[($2 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, $9 = 0.0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  $9 = +WindSpeedUtility__windSpeedAtMidflame_28double_2c_20double_29(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5 + 16 | 0) >> 3]), +(+HEAPF64[($5 + 8 | 0) >> 3]));
  __stack_pointer = $5 + 32 | 0;
  return +$9;
 }
 
 function emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF64[$4 >> 3] = $1;
  $7 = +WindSpeedUtility__windSpeedAtTwentyFeetFromTenMeter_28double_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[$4 >> 3]));
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function emscripten_bind_WindSpeedUtility___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet() {
  return 0 | 0;
 }
 
 function emscripten_enum_AreaUnits_AreaUnitsEnum_Acres() {
  return 1 | 0;
 }
 
 function emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares() {
  return 2 | 0;
 }
 
 function emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters() {
  return 3 | 0;
 }
 
 function emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles() {
  return 4 | 0;
 }
 
 function emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers() {
  return 5 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Feet() {
  return 0 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Inches() {
  return 1 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters() {
  return 2 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Meters() {
  return 3 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Chains() {
  return 4 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Miles() {
  return 5 | 0;
 }
 
 function emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers() {
  return 6 | 0;
 }
 
 function emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot() {
  return 0 | 0;
 }
 
 function emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre() {
  return 1 | 0;
 }
 
 function emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare() {
  return 2 | 0;
 }
 
 function emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter() {
  return 3 | 0;
 }
 
 function emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet() {
  return 0 | 0;
 }
 
 function emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters() {
  return 1 | 0;
 }
 
 function emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches() {
  return 2 | 0;
 }
 
 function emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers() {
  return 3 | 0;
 }
 
 function emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction() {
  return 0 | 0;
 }
 
 function emscripten_enum_CoverUnits_CoverUnitsEnum_Percent() {
  return 1 | 0;
 }
 
 function emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute() {
  return 0 | 0;
 }
 
 function emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour() {
  return 1 | 0;
 }
 
 function emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond() {
  return 2 | 0;
 }
 
 function emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute() {
  return 3 | 0;
 }
 
 function emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour() {
  return 4 | 0;
 }
 
 function emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour() {
  return 5 | 0;
 }
 
 function emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction() {
  return 0 | 0;
 }
 
 function emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent() {
  return 1 | 0;
 }
 
 function emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction() {
  return 0 | 0;
 }
 
 function emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent() {
  return 1 | 0;
 }
 
 function emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees() {
  return 0 | 0;
 }
 
 function emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent() {
  return 1 | 0;
 }
 
 function emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot() {
  return 0 | 0;
 }
 
 function emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter() {
  return 1 | 0;
 }
 
 function emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound() {
  return 0 | 0;
 }
 
 function emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram() {
  return 1 | 0;
 }
 
 function emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot() {
  return 0 | 0;
 }
 
 function emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter() {
  return 1 | 0;
 }
 
 function emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot() {
  return 0 | 0;
 }
 
 function emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond() {
  return 1 | 0;
 }
 
 function emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter() {
  return 2 | 0;
 }
 
 function emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute() {
  return 0 | 0;
 }
 
 function emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond() {
  return 1 | 0;
 }
 
 function emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond() {
  return 2 | 0;
 }
 
 function emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute() {
  return 3 | 0;
 }
 
 function emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter() {
  return 4 | 0;
 }
 
 function emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond() {
  return 0 | 0;
 }
 
 function emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute() {
  return 1 | 0;
 }
 
 function emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond() {
  return 2 | 0;
 }
 
 function emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute() {
  return 3 | 0;
 }
 
 function emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter() {
  return 4 | 0;
 }
 
 function emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit() {
  return 0 | 0;
 }
 
 function emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius() {
  return 1 | 0;
 }
 
 function emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin() {
  return 2 | 0;
 }
 
 function emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes() {
  return 0 | 0;
 }
 
 function emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds() {
  return 1 | 0;
 }
 
 function emscripten_enum_TimeUnits_TimeUnitsEnum_Hours() {
  return 2 | 0;
 }
 
 function emscripten_enum_ContainTactic_HeadAttack() {
  return 0 | 0;
 }
 
 function emscripten_enum_ContainTactic_RearAttack() {
  return 1 | 0;
 }
 
 function emscripten_enum_ContainStatus_Unreported() {
  return 0 | 0;
 }
 
 function emscripten_enum_ContainStatus_Reported() {
  return 1 | 0;
 }
 
 function emscripten_enum_ContainStatus_Attacked() {
  return 2 | 0;
 }
 
 function emscripten_enum_ContainStatus_Contained() {
  return 3 | 0;
 }
 
 function emscripten_enum_ContainStatus_Overrun() {
  return 4 | 0;
 }
 
 function emscripten_enum_ContainStatus_Exhausted() {
  return 5 | 0;
 }
 
 function emscripten_enum_ContainStatus_Overflow() {
  return 6 | 0;
 }
 
 function emscripten_enum_ContainStatus_SizeLimitExceeded() {
  return 7 | 0;
 }
 
 function emscripten_enum_ContainStatus_TimeLimitExceeded() {
  return 8 | 0;
 }
 
 function emscripten_enum_ContainFlank_LeftFlank() {
  return 0 | 0;
 }
 
 function emscripten_enum_ContainFlank_RightFlank() {
  return 1 | 0;
 }
 
 function emscripten_enum_ContainFlank_BothFlanks() {
  return 2 | 0;
 }
 
 function emscripten_enum_ContainFlank_NeitherFlank() {
  return 3 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter() {
  return 0 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky() {
  return 1 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep() {
  return 2 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow() {
  return 3 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff() {
  return 4 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_DouglasFirDuff() {
  return 5 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed() {
  return 6 | 0;
 }
 
 function emscripten_enum_IgnitionFuelBedType_PeatMoss() {
  return 7 | 0;
 }
 
 function emscripten_enum_LightningCharge_Negative() {
  return 0 | 0;
 }
 
 function emscripten_enum_LightningCharge_Positive() {
  return 1 | 0;
 }
 
 function emscripten_enum_LightningCharge_Unknown() {
  return 2 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE() {
  return 0 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR() {
  return 1 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR() {
  return 2 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK() {
  return 3 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE() {
  return 4 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE() {
  return 5 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE() {
  return 6 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_GRAND_FIR() {
  return 7 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_BALSAM_FIR() {
  return 8 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_SLASH_PINE() {
  return 9 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE() {
  return 10 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_POND_PINE() {
  return 11 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE() {
  return 12 | 0;
 }
 
 function emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE() {
  return 13 | 0;
 }
 
 function emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD() {
  return 0 | 0;
 }
 
 function emscripten_enum_SpotFireLocation_VALLEY_BOTTOM() {
  return 1 | 0;
 }
 
 function emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD() {
  return 2 | 0;
 }
 
 function emscripten_enum_SpotFireLocation_RIDGE_TOP() {
  return 3 | 0;
 }
 
 function emscripten_enum_SpotArrayConstants_NUM_COLS() {
  return 2 | 0;
 }
 
 function emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS() {
  return 4 | 0;
 }
 
 function emscripten_enum_SpotArrayConstants_NUM_SPECIES() {
  return 14 | 0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_double__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_std____2__vector_double_2c_20std____2__allocator_double____28std____2__vector_double_2c_20std____2__allocator_double____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_double__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  std____2__allocator_double___allocator_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_double___allocator_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_double______non_trivial_if_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_double______non_trivial_if_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($4 | 0) | 0) + ((std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($4 | 0) | 0) << 3 | 0) | 0 | 0, (std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($4 | 0) | 0) + ((std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const($4 | 0) | 0) << 3 | 0) | 0 | 0, (std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($4 | 0) | 0) + ((std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($4 | 0) | 0) << 3 | 0) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______clear_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double______base_destruct_at_end_28double__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double____second_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_double_2c_20std____2__allocator_double______end_cap_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 3 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_double____deallocate_28std____2__allocator_double___2c_20double__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_double___deallocate_28double__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = double__20std____2____to_address_double__28double__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______base_destruct_at_end_28double__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0, $18 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $14 = std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29($5 | 0) | 0;
     $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -8 | 0;
     HEAP32[($4 + 4 | 0) >> 2] = $17;
     $18 = double__20std____2____to_address_double__28double__29($17 | 0) | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vii(41 | 0, $14 | 0, $18 | 0);
     $23 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($23 | 0) == (1 | 0) & 1 | 0) {
      break label$1
     }
     continue label$3;
    };
   }
   HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2__allocator_double___deallocate_28double__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $9 = 0, $15 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $9 = (HEAP32[($5 + 4 | 0) >> 2] | 0) << 3 | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(42 | 0, $6 | 0, $9 | 0, 8 | 0);
  $15 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($15 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $5 + 16 | 0;
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double____second_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_double__2c_201_2c_20true_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______end_cap_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double____first_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function double__20std____2____to_address_double__28double__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_double____destroy_double_2c_20void__28std____2__allocator_double___2c_20double__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_double___destroy_28double__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_double___destroy_28double__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  void_20std____2____libcpp_operator_delete_void___28void__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____libcpp_operator_delete_void___28void__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  operator_20delete_28void__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_double__2c_201_2c_20true_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double____first_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_double__2c_200_2c_20false_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_double__2c_200_2c_20false_____get_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______end_cap_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double____first_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2__vector_double_2c_20std____2__allocator_double______construct_one_at_end_double_20const___28double_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $35 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double_____ConstructTransaction___ConstructTransaction_28std____2__vector_double_2c_20std____2__allocator_double____2c_20unsigned_20long_29($4 + 8 | 0 | 0, $5 | 0, 1 | 0) | 0;
  $10 = std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29($5 | 0) | 0;
  $12 = double__20std____2____to_address_double__28double__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0;
  $13 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(43 | 0, $10 | 0, $12 | 0, $13 | 0);
  $18 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($18 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0;
   std____2__vector_double_2c_20std____2__allocator_double_____ConstructTransaction____ConstructTransaction_28_29($4 + 8 | 0 | 0) | 0;
   __stack_pointer = $4 + 32 | 0;
   return;
  }
  $35 = __cxa_find_matching_catch_2() | 0;
  $36 = getTempRet0() | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $35;
  HEAP32[$4 >> 2] = $36;
  std____2__vector_double_2c_20std____2__allocator_double_____ConstructTransaction____ConstructTransaction_28_29($4 + 8 | 0 | 0) | 0;
  HEAP32[$4 >> 2] | 0;
  __resumeException(HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function void_20std____2__vector_double_2c_20std____2__allocator_double______push_back_slow_path_double_20const___28double_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $18 = 0, $19 = 0, $24 = 0, $43 = 0, $57 = 0, $58 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 44 | 0) >> 2] = $0;
  HEAP32[($4 + 40 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  HEAP32[($4 + 36 | 0) >> 2] = std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29($5 | 0) | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_double___29($4 + 16 | 0 | 0, std____2__vector_double_2c_20std____2__allocator_double______recommend_28unsigned_20long_29_20const($5 | 0, (std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const($5 | 0) | 0) + 1 | 0 | 0) | 0 | 0, std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const($5 | 0) | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
  $16 = HEAP32[($4 + 36 | 0) >> 2] | 0;
  $18 = double__20std____2____to_address_double__28double__29(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0;
  $19 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(43 | 0, $16 | 0, $18 | 0, $19 | 0);
  $24 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($24 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[($4 + 24 | 0) >> 2] = (HEAP32[($4 + 24 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[(0 + 22372 | 0) >> 2] = 0;
   invoke_vii(44 | 0, $5 | 0, $4 + 16 | 0 | 0);
   $43 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
   HEAP32[(0 + 22372 | 0) >> 2] = 0;
   if (($43 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($4 + 16 | 0 | 0) | 0;
   __stack_pointer = $4 + 48 | 0;
   return;
  }
  $57 = __cxa_find_matching_catch_2() | 0;
  $58 = getTempRet0() | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $57;
  HEAP32[($4 + 8 | 0) >> 2] = $58;
  std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($4 + 16 | 0 | 0) | 0;
  HEAP32[($4 + 8 | 0) >> 2] | 0;
  __resumeException(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double____first_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_double__2c_200_2c_20false_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double_____ConstructTransaction___ConstructTransaction_28std____2__vector_double_2c_20std____2__allocator_double____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  return $6 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_double____construct_double_2c_20double_20const__2c_20void__28std____2__allocator_double___2c_20double__2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_double___construct_double_2c_20double_20const___28double__2c_20double_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______recommend_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_double_2c_20std____2__allocator_double____max_size_28_29_20const($5 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_double_2c_20std____2__allocator_double______throw_length_error_28_29_20const($5 | 0);
   abort();
  }
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($5 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($4 + 8 | 0 | 0, $4 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $36 | 0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_double___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $19 = 0, $26 = 0, $31 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $0;
  HEAP32[($6 + 20 | 0) >> 2] = $1;
  HEAP32[($6 + 16 | 0) >> 2] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $7;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($7 + 12 | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19 = std____2__allocator_traits_std____2__allocator_double____allocate_28std____2__allocator_double___2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19 = 0;
  }
  HEAP32[$7 >> 2] = $19;
  $26 = (HEAP32[$7 >> 2] | 0) + ((HEAP32[($6 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($7 + 8 | 0) >> 2] = $26;
  HEAP32[($7 + 4 | 0) >> 2] = $26;
  $31 = (HEAP32[$7 >> 2] | 0) + ((HEAP32[($6 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[(std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($7 | 0) | 0) >> 2] = $31;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______swap_out_circular_buffer_28std____2____split_buffer_double_2c_20std____2__allocator_double_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double______annotate_delete_28_29_20const($5 | 0);
  void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_double__2c_20double_2c_20void__28std____2__allocator_double___2c_20double__2c_20double__2c_20double___29(std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29($5 | 0) | 0 | 0, HEAP32[$5 >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_double____value_20___20is_move_assignable_double____value_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($5 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_double____value_20___20is_move_assignable_double____value_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($5 + 4 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  std____2__enable_if_is_move_constructible_double____value_20___20is_move_assignable_double____value_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2__vector_double_2c_20std____2__allocator_double______end_cap_28_29($5 | 0) | 0 | 0, std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double______annotate_new_28unsigned_20long_29_20const($5 | 0, std____2__vector_double_2c_20std____2__allocator_double____size_28_29_20const($5 | 0) | 0 | 0);
  std____2__vector_double_2c_20std____2__allocator_double______invalidate_all_iterators_28_29($5 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2____split_buffer_double_2c_20std____2__allocator_double_____clear_28_29($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_double____deallocate_28std____2__allocator_double___2c_20double__2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2____split_buffer_double_2c_20std____2__allocator_double_____capacity_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2____compressed_pair_elem_double__2c_200_2c_20false_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_double___construct_double_2c_20double_20const___28double__2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  HEAPF64[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 3];
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $17 = 0, $19 = 0, $28 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_double____max_size_std____2__allocator_double__2c_20void__28std____2__allocator_double__20const__29(std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_28_29() | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  $17 = invoke_iii(45 | 0, $3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0;
  $19 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($19 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   $28 = HEAP32[$17 >> 2] | 0;
   __stack_pointer = $3 + 16 | 0;
   return $28 | 0;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______throw_length_error_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_28char_20const__29(1115 | 0);
  abort();
 }
 
 function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($6 + 4 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double_____second_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_double____allocate_28std____2__allocator_double___2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2__allocator_double___allocate_28unsigned_20long_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double_____first_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_double__2c_20double_2c_20void__28std____2__allocator_double___2c_20double__2c_20double__2c_20double___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $13 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = ((HEAP32[($6 + 20 | 0) >> 2] | 0) - (HEAP32[($6 + 24 | 0) >> 2] | 0) | 0) >> 3 | 0;
  $13 = HEAP32[($6 + 16 | 0) >> 2] | 0;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + ((0 - (HEAP32[($6 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   __memcpy(HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function std____2__enable_if_is_move_constructible_double____value_20___20is_move_assignable_double____value_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______annotate_new_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_double_2c_20std____2__allocator_double______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($5 | 0) | 0) + ((std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($5 | 0) | 0) << 3 | 0) | 0 | 0, (std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($5 | 0) | 0) + ((std____2__vector_double_2c_20std____2__allocator_double____capacity_28_29_20const($5 | 0) | 0) << 3 | 0) | 0 | 0, (std____2__vector_double_2c_20std____2__allocator_double____data_28_29_20const($5 | 0) | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______invalidate_all_iterators_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_____clear_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______destruct_at_end_28double__29($4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_____capacity_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 3 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double______alloc_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double____second_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_double____max_size_std____2__allocator_double__2c_20void__28std____2__allocator_double__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_double___max_size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__numeric_limits_long___max_28_29() {
  return std____2____libcpp_numeric_limits_long_2c_20true___max_28_29() | 0 | 0;
 }
 
 function unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____throw_length_error_28char_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0, $6 = 0, $11 = 0, $22 = 0, $23 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = __cxa_allocate_exception(8 | 0) | 0;
  $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iii(46 | 0, $5 | 0, $6 | 0) | 0;
  $11 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($11 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __cxa_throw($5 | 0, 19604 | 0, 47 | 0);
   abort();
  }
  $22 = __cxa_find_matching_catch_2() | 0;
  $23 = getTempRet0() | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $22;
  HEAP32[($3 + 4 | 0) >> 2] = $23;
  __cxa_free_exception($5 | 0);
  HEAP32[($3 + 4 | 0) >> 2] | 0;
  __resumeException(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($4 + 8 | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14 = HEAP32[$4 >> 2] | 0;
    break label$1;
   }
   $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($4 + 8 | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14 = HEAP32[$4 >> 2] | 0;
    break label$1;
   }
   $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__allocator_double___max_size_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 536870911 | 0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double____second_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_double__2c_201_2c_20true_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____libcpp_numeric_limits_long_2c_20true___max_28_29() {
  return 2147483647 | 0;
 }
 
 function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  return (HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_double__2c_201_2c_20true_____get_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std__length_error__length_error_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std__logic_error__logic_error_28char_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5 >> 2] = 19564 + 8 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_double___allocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_double____max_size_std____2__allocator_double__2c_20void__28std____2__allocator_double__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_28_29();
   abort();
  }
  $17 = std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29((HEAP32[($4 + 8 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double_____second_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____get_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double_____first_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_double__2c_200_2c_20false_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____throw_bad_array_new_length_28_29() {
  var $1 = 0;
  $1 = __cxa_allocate_exception(4 | 0) | 0;
  std__bad_array_new_length__bad_array_new_length_28_29($1 | 0) | 0;
  __cxa_throw($1 | 0, 19504 | 0, 48 | 0);
  abort();
 }
 
 function std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $6 = void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______destruct_at_end_28double__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______destruct_at_end_28double__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_double__2c_20std____2__allocator_double_____first_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______destruct_at_end_28double__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $13 = 0, $17 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4 >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $13 = std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($5 | 0) | 0;
     $16 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + -8 | 0;
     HEAP32[($5 + 8 | 0) >> 2] = $16;
     $17 = double__20std____2____to_address_double__28double__29($16 | 0) | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vii(41 | 0, $13 | 0, $17 | 0);
     $22 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($22 | 0) == (1 | 0) & 1 | 0) {
      break label$1
     }
     continue label$3;
    };
   }
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double_____first_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_double__2c_200_2c_20false_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_SIGContainResource__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  std____2__allocator_SIGContainResource___allocator_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $17 = 0, $19 = 0, $28 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_SIGContainResource____max_size_std____2__allocator_SIGContainResource__2c_20void__28std____2__allocator_SIGContainResource__20const__29(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_28_29() | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  $17 = invoke_iii(45 | 0, $3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0;
  $19 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($19 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   $28 = HEAP32[$17 >> 2] | 0;
   __stack_pointer = $3 + 16 | 0;
   return $28 | 0;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______throw_length_error_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_28char_20const__29(1115 | 0);
  abort();
 }
 
 function std____2__allocator_traits_std____2__allocator_SIGContainResource____allocate_28std____2__allocator_SIGContainResource___2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2__allocator_SIGContainResource___allocate_28unsigned_20long_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_new_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($5 | 0) | 0, 56) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($5 | 0) | 0, 56) | 0 | 0, (std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($5 | 0) | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction___ConstructTransaction_28std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 56) | 0;
  return $6 | 0;
 }
 
 function SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____construct_SIGContainResource_2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  void_20std____2__allocator_SIGContainResource___construct_SIGContainResource__28SIGContainResource__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_SIGContainResource___allocator_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_SIGContainResource______non_trivial_if_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_SIGContainResource______non_trivial_if_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____second_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_SIGContainResource____max_size_std____2__allocator_SIGContainResource__2c_20void__28std____2__allocator_SIGContainResource__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_SIGContainResource___max_size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_SIGContainResource___allocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_SIGContainResource____max_size_std____2__allocator_SIGContainResource__2c_20void__28std____2__allocator_SIGContainResource__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_28_29();
   abort();
  }
  $17 = std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 56) | 0, 8 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____second_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_SIGContainResource__2c_201_2c_20true_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____first_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____data_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__allocator_SIGContainResource___max_size_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 76695844 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____second_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_SIGContainResource__2c_201_2c_20true_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_SIGContainResource__2c_201_2c_20true_____get_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_SIGContainResource__2c_201_2c_20true_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______end_cap_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____first_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource____first_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____get_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_SIGContainResource___construct_SIGContainResource__28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  FUNCTION_TABLE[30 | 0](HEAP32[($4 + 8 | 0) >> 2] | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______base_destruct_at_end_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0, $18 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $14 = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($5 | 0) | 0;
     $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -56 | 0;
     HEAP32[($4 + 4 | 0) >> 2] = $17;
     $18 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29($17 | 0) | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vii(49 | 0, $14 | 0, $18 | 0);
     $23 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($23 | 0) == (1 | 0) & 1 | 0) {
      break label$1
     }
     continue label$3;
    };
   }
   HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2__allocator_SIGContainResource___deallocate_28SIGContainResource__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $9 = 0, $15 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $9 = Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 56);
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(42 | 0, $6 | 0, $9 | 0, 8 | 0);
  $15 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($15 | 0) == (1 | 0) & 1 | 0) {
    break label$1
   }
   __stack_pointer = $5 + 16 | 0;
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____destroy_SIGContainResource_2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_SIGContainResource___destroy_28SIGContainResource__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_SIGContainResource___destroy_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$5 >> 2] | 0) >> 2] | 0 | 0]($5) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____construct_SIGContainResource_2c_20SIGContainResource_20const__2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20SIGContainResource_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_SIGContainResource___construct_SIGContainResource_2c_20SIGContainResource_20const___28SIGContainResource__2c_20SIGContainResource_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______recommend_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____max_size_28_29_20const($5 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______throw_length_error_28_29_20const($5 | 0);
   abort();
  }
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____capacity_28_29_20const($5 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($4 + 8 | 0 | 0, $4 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $36 | 0;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SIGContainResource___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $19 = 0, $26 = 0, $31 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $0;
  HEAP32[($6 + 20 | 0) >> 2] = $1;
  HEAP32[($6 + 16 | 0) >> 2] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $7;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_SIGContainResource____28std__nullptr_t___2c_20std____2__allocator_SIGContainResource___29($7 + 12 | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19 = std____2__allocator_traits_std____2__allocator_SIGContainResource____allocate_28std____2__allocator_SIGContainResource___2c_20unsigned_20long_29(std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______alloc_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19 = 0;
  }
  HEAP32[$7 >> 2] = $19;
  $26 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 56) | 0;
  HEAP32[($7 + 8 | 0) >> 2] = $26;
  HEAP32[($7 + 4 | 0) >> 2] = $26;
  $31 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 20 | 0) >> 2] | 0, 56) | 0;
  HEAP32[(std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______end_cap_28_29($7 | 0) | 0) >> 2] = $31;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______swap_out_circular_buffer_28std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_delete_28_29_20const($5 | 0);
  void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_SIGContainResource__2c_20SIGContainResource___28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource___29(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______alloc_28_29($5 | 0) | 0 | 0, HEAP32[$5 >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_SIGContainResource____value_20___20is_move_assignable_SIGContainResource____value_2c_20void___type_20std____2__swap_SIGContainResource___28SIGContainResource___2c_20SIGContainResource___29($5 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_SIGContainResource____value_20___20is_move_assignable_SIGContainResource____value_2c_20void___type_20std____2__swap_SIGContainResource___28SIGContainResource___2c_20SIGContainResource___29($5 + 4 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  std____2__enable_if_is_move_constructible_SIGContainResource____value_20___20is_move_assignable_SIGContainResource____value_2c_20void___type_20std____2__swap_SIGContainResource___28SIGContainResource___2c_20SIGContainResource___29(std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______end_cap_28_29($5 | 0) | 0 | 0, std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______end_cap_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______annotate_new_28unsigned_20long_29_20const($5 | 0, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____size_28_29_20const($5 | 0) | 0 | 0);
  std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______invalidate_all_iterators_28_29($5 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource________split_buffer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____clear_28_29($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_SIGContainResource____deallocate_28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20unsigned_20long_29(std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______alloc_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____capacity_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function void_20std____2__allocator_SIGContainResource___construct_SIGContainResource_2c_20SIGContainResource_20const___28SIGContainResource__2c_20SIGContainResource_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  SIGContainResource__SIGContainResource_28SIGContainResource_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function SIGContainResource__SIGContainResource_28SIGContainResource_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = 0, $13 = 0, $4 = 0, $5 = 0, $15 = 0, $19 = 0, $23 = 0, $27 = 0, $31 = 0, $61 = 0, $71 = 0, $81 = 0, $91 = 0, $101 = 0, $111 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 1024 + 8 | 0;
  $10 = $5 + 8 | 0;
  $13 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0;
  i64toi32_i32$2 = $13;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $61 = i64toi32_i32$0;
  i64toi32_i32$0 = $10;
  HEAP32[i64toi32_i32$0 >> 2] = $61;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15 = 40;
  i64toi32_i32$2 = i64toi32_i32$2 + $15 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $71 = i64toi32_i32$1;
  i64toi32_i32$1 = $10 + $15 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $71;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $19 = 32;
  i64toi32_i32$2 = $13 + $19 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81 = i64toi32_i32$0;
  i64toi32_i32$0 = $10 + $19 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $81;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $23 = 24;
  i64toi32_i32$2 = $13 + $23 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $91 = i64toi32_i32$1;
  i64toi32_i32$1 = $10 + $23 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $91;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $27 = 16;
  i64toi32_i32$2 = $13 + $27 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $101 = i64toi32_i32$0;
  i64toi32_i32$0 = $10 + $27 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $101;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $31 = 8;
  i64toi32_i32$2 = $13 + $31 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $111 = i64toi32_i32$1;
  i64toi32_i32$1 = $10 + $31 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $111;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_SIGContainResource____28std__nullptr_t___2c_20std____2__allocator_SIGContainResource___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_SIGContainResource___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_SIGContainResource___2c_20void__28std____2__allocator_SIGContainResource___29($6 + 4 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______alloc_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_____second_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______end_cap_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_____first_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_SIGContainResource__2c_20SIGContainResource___28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $22 = 0, $23 = 0, $14 = 0, $19 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = $1;
  HEAP32[($6 + 4 | 0) >> 2] = $2;
  HEAP32[$6 >> 2] = $3;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    $19 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29((HEAP32[(HEAP32[$6 >> 2] | 0) >> 2] | 0) + -56 | 0 | 0) | 0;
    $22 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + -56 | 0;
    HEAP32[($6 + 4 | 0) >> 2] = $22;
    void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____construct_SIGContainResource_2c_20SIGContainResource_2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20SIGContainResource___29($14 | 0, $19 | 0, $22 | 0);
    $23 = HEAP32[$6 >> 2] | 0;
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + -56 | 0;
    continue label$2;
   };
  }
  __stack_pointer = $6 + 16 | 0;
  return;
 }
 
 function std____2__enable_if_is_move_constructible_SIGContainResource____value_20___20is_move_assignable_SIGContainResource____value_2c_20void___type_20std____2__swap_SIGContainResource___28SIGContainResource___2c_20SIGContainResource___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____clear_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______destruct_at_end_28SIGContainResource__29($4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____capacity_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______end_cap_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (56 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_SIGContainResource___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_SIGContainResource___2c_20void__28std____2__allocator_SIGContainResource___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_____second_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_elem_std____2__allocator_SIGContainResource___2c_201_2c_20false_____get_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_____first_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_SIGContainResource___2c_201_2c_20false_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____construct_SIGContainResource_2c_20SIGContainResource_2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20SIGContainResource___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_SIGContainResource___construct_SIGContainResource_2c_20SIGContainResource__28SIGContainResource__2c_20SIGContainResource___29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_SIGContainResource___construct_SIGContainResource_2c_20SIGContainResource__28SIGContainResource__2c_20SIGContainResource___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  SIGContainResource__SIGContainResource_28SIGContainResource_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______destruct_at_end_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______destruct_at_end_28SIGContainResource__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______end_cap_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_____first_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______destruct_at_end_28SIGContainResource__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $13 = 0, $17 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4 >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $13 = std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_______alloc_28_29($5 | 0) | 0;
     $16 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + -56 | 0;
     HEAP32[($5 + 8 | 0) >> 2] = $16;
     $17 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29($16 | 0) | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     invoke_vii(49 | 0, $13 | 0, $17 | 0);
     $22 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
     HEAP32[(0 + 22372 | 0) >> 2] = 0;
     if (($22 | 0) == (1 | 0) & 1 | 0) {
      break label$1
     }
     continue label$3;
    };
   }
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2____compressed_pair_SIGContainResource__2c_20std____2__allocator_SIGContainResource_____first_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_SIGContainResource__2c_200_2c_20false_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource______wrap_iter_28SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource_20const____base_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource____begin_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______make_iter_28SIGContainResource_20const__29_20const($4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function decltype_28std____2____unwrap_iter_impl_SIGContainResource__2c_20true_____apply_28declval_SIGContainResource___28_29_29_29_20std____2____unwrap_iter_SIGContainResource__2c_20std____2____unwrap_iter_impl_SIGContainResource__2c_20true___28SIGContainResource__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____unwrap_iter_impl_SIGContainResource__2c_20true_____apply_28SIGContainResource__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGContainResource__20std____2____move_SIGContainResource__2c_20SIGContainResource___28SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $9 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $9 = SIGContainResource__20std____2____move_constexpr_SIGContainResource__2c_20SIGContainResource___28SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $9 | 0;
 }
 
 function SIGContainResource__20std____2____rewrap_iter_SIGContainResource___28SIGContainResource__2c_20SIGContainResource__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[($4 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______make_iter_28SIGContainResource_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $0;
  HEAP32[$4 >> 2] = $1;
  std____2____wrap_iter_SIGContainResource_20const______wrap_iter_28SIGContainResource_20const__29($4 + 8 | 0 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2____wrap_iter_SIGContainResource_20const______wrap_iter_28SIGContainResource_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function SIGContainResource__20std____2____move_constexpr_SIGContainResource__2c_20SIGContainResource___28SIGContainResource__2c_20SIGContainResource__2c_20SIGContainResource__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $21 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    SIGContainResource__operator__28SIGContainResource_20const__29(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 56 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) + 56 | 0;
    continue label$2;
   };
  }
  $21 = HEAP32[($5 + 4 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return $21 | 0;
 }
 
 function std____2____unwrap_iter_impl_SIGContainResource__2c_20true_____apply_28SIGContainResource__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = SIGContainResource__20std____2____to_address_SIGContainResource__28SIGContainResource__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function SIGContainResource__operator__28SIGContainResource_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7 = 0, $10 = 0, $4 = 0, $5 = 0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $28 = 0, $53 = 0, $63 = 0, $73 = 0, $83 = 0, $93 = 0, $103 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  $7 = $5 + 8 | 0;
  $10 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0;
  i64toi32_i32$2 = $10;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $53 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[i64toi32_i32$0 >> 2] = $53;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12 = 40;
  i64toi32_i32$2 = i64toi32_i32$2 + $12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $63 = i64toi32_i32$1;
  i64toi32_i32$1 = $7 + $12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16 = 32;
  i64toi32_i32$2 = $10 + $16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $73 = i64toi32_i32$0;
  i64toi32_i32$0 = $7 + $16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $73;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $20 = 24;
  i64toi32_i32$2 = $10 + $20 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83 = i64toi32_i32$1;
  i64toi32_i32$1 = $7 + $20 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $83;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $24 = 16;
  i64toi32_i32$2 = $10 + $24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $93 = i64toi32_i32$0;
  i64toi32_i32$0 = $7 + $24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $93;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $28 = 8;
  i64toi32_i32$2 = $10 + $28 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $103 = i64toi32_i32$1;
  i64toi32_i32$1 = $7 + $28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $103;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  return HEAP32[($3 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  std____2__allocator_char___allocator_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_char___allocator_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_char______non_trivial_if_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_char______non_trivial_if_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__char_traits_char___length_28char_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = strlen(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $16 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $16 = (((HEAPU8[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $6;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = HEAP32[(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP8[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] = $6;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = std____2__pointer_traits_char____pointer_to_28char__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function char__20std____2____to_address_char__28char__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $8 = 0, $9 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    if (HEAP32[($5 + 4 | 0) >> 2] | 0) {
     break label$2
    }
    $8 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $9 = HEAP32[($5 + 12 | 0) >> 2] | 0;
   memmove($9 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
   $8 = $9;
  }
  __stack_pointer = $5 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP8[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 0] | 0;
  return;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pointer_traits_char____pointer_to_28char__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($4 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_28_29_20const($4 | 0) | 0;
    break label$1;
   }
   $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_28_29_20const($4 | 0) | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function char_20const__20std____2____to_address_char_20const__28char_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = HEAP32[(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = std____2__pointer_traits_char_20const____pointer_to_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__pointer_traits_char_20const____pointer_to_28char_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function acos($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $1 = 0, $2 = 0, $1$hi = 0, $4 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $65 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $12 & 2147483647 | 0;
   if ($2 >>> 0 < 1072693248 >>> 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$1 = $1$hi;
    if ($2 + -1072693248 | 0 | $1 | 0) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $13 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $14 = 0
      } else {
       $14 = 1
      }
      $15 = $14;
     } else {
      $15 = 0
     }
     $13 = $15;
    }
    return +($13 ? 0.0 : 3.141592653589793);
   }
   return +(0.0 / ($0 - $0));
  }
  label$3 : {
   label$4 : {
    if ($2 >>> 0 > 1071644671 >>> 0) {
     break label$4
    }
    $3 = 1.5707963267948966;
    if ($2 >>> 0 < 1012924417 >>> 0) {
     break label$3
    }
    return +(6.123233995736766e-17 - $0 * +R(+($0 * $0)) - $0 + 1.5707963267948966);
   }
   label$5 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $16 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $17 = 0
      } else {
       $17 = 1
      }
      $18 = $17;
     } else {
      $18 = 0
     }
     $16 = $18;
    }
    if ($16) {
     break label$5
    }
    $0 = ($0 + 1.0) * .5;
    $3 = +sqrt(+$0);
    $0 = 1.5707963267948966 - ($3 + ($3 * +R(+$0) + -6.123233995736766e-17));
    return +($0 + $0);
   }
   $3 = (1.0 - $0) * .5;
   $4 = +sqrt(+$3);
   $65 = $4 * +R(+$3);
   wasm2js_scratch_store_f64(+$4);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $0 = $65 + ($3 - $0 * $0) / ($4 + $0) + $0;
   $3 = $0 + $0;
  }
  return +$3;
 }
 
 function R($0) {
  $0 = +$0;
  return +(($0 * ($0 * ($0 * ($0 * ($0 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) * $0 / ($0 * ($0 * ($0 * ($0 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0));
 }
 
 function atan($0) {
  $0 = +$0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5 = 0.0, $2 = 0, i64toi32_i32$4 = 0, $3 = 0, $4 = 0.0, $1 = 0, $21 = 0, $6 = 0.0, $23 = 0, $24 = 0, $25 = 0, $1$hi = 0, $17 = 0, $17$hi = 0, $20 = 0, $20$hi = 0, $22 = 0.0, $124 = 0.0, $125 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $21 & 2147483647 | 0;
   if ($2 >>> 0 < 1141899264 >>> 0) {
    break label$1
   }
   wasm2js_scratch_store_f64(+(1.5707963267948966));
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = 2147483647;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $17 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $17$hi = i64toi32_i32$2;
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $20 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$2 = $17;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$3 = $20;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $22 = +wasm2js_scratch_load_f64();
   i64toi32_i32$1 = __DOUBLE_BITS(+$0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 2146435072;
   i64toi32_i32$3 = 0;
   return +(i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0 ? $0 : $22);
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if ($2 >>> 0 > 1071382527 >>> 0) {
      break label$4
     }
     $3 = -1;
     if ($2 >>> 0 >= 1044381696 >>> 0) {
      break label$3
     }
     break label$2;
    }
    $0 = +fabs(+$0);
    label$5 : {
     if ($2 >>> 0 > 1072889855 >>> 0) {
      break label$5
     }
     label$6 : {
      if ($2 >>> 0 > 1072037887 >>> 0) {
       break label$6
      }
      $0 = ($0 + $0 + -1.0) / ($0 + 2.0);
      $3 = 0;
      break label$3;
     }
     $0 = ($0 + -1.0) / ($0 + 1.0);
     $3 = 1;
     break label$3;
    }
    label$7 : {
     if ($2 >>> 0 > 1073971199 >>> 0) {
      break label$7
     }
     $0 = ($0 + -1.5) / ($0 * 1.5 + 1.0);
     $3 = 2;
     break label$3;
    }
    $0 = -1.0 / $0;
    $3 = 3;
   }
   $4 = $0 * $0;
   $5 = $4 * $4;
   $6 = $5 * ($5 * ($5 * ($5 * ($5 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
   $5 = $4 * ($5 * ($5 * ($5 * ($5 * ($5 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
   label$8 : {
    if ($2 >>> 0 > 1071382527 >>> 0) {
     break label$8
    }
    return +($0 - $0 * ($6 + $5));
   }
   $2 = $3 << 3 | 0;
   $0 = +HEAPF64[($2 + 4800 | 0) >> 3] - ($0 * ($6 + $5) - +HEAPF64[($2 + 4832 | 0) >> 3] - $0);
   $124 = -$0;
   $125 = $0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
    $23 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $24 = 0
     } else {
      $24 = 1
     }
     $25 = $24;
    } else {
     $25 = 0
    }
    $23 = $25;
   }
   $0 = $23 ? $124 : $125;
  }
  return +$0;
 }
 
 function __DOUBLE_BITS($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __cos($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $16 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $16 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return +($4 + ($16 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1)));
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0.0, $11 = 0, $6 = 0, $5 = 0, $19 = 0.0, $14 = 0, $15 = 0, $9 = 0, $8 = 0, $22 = 0, $10 = 0, $20 = 0, $13 = 0, $23 = 0.0, $7 = 0, $17 = 0, $21 = 0, $16 = 0, $18 = 0, $206 = 0, $209 = 0, $526 = 0.0, $564 = 0.0;
  $5 = __stack_pointer - 560 | 0;
  __stack_pointer = $5;
  $6 = ($2 + -3 | 0 | 0) / (24 | 0) | 0;
  $7 = ($6 | 0) > (0 | 0) ? $6 : 0;
  $8 = Math_imul($7, -24) + $2 | 0;
  label$1 : {
   $9 = HEAP32[(($4 << 2 | 0) + 4864 | 0) >> 2] | 0;
   $10 = $3 + -1 | 0;
   if (($9 + $10 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11 = $9 + $3 | 0;
   $2 = $7 - $10 | 0;
   $6 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2 | 0) >= (0 | 0)) {
       break label$4
      }
      $12 = 0.0;
      break label$3;
     }
     $12 = +(HEAP32[(($2 << 2 | 0) + 4880 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = $12;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($11 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $13 = $8 + -24 | 0;
  $11 = 0;
  $14 = ($9 | 0) > (0 | 0) ? $9 : 0;
  $15 = ($3 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$15) {
      break label$7
     }
     $12 = 0.0;
     break label$6;
    }
    $6 = $11 + $10 | 0;
    $2 = 0;
    $12 = 0.0;
    label$8 : while (1) {
     $12 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $12;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
   $2 = ($11 | 0) == ($14 | 0);
   $11 = $11 + 1 | 0;
   if (!$2) {
    continue label$5
   }
   break label$5;
  };
  $16 = 47 - $8 | 0;
  $17 = 48 - $8 | 0;
  $18 = $8 + -25 | 0;
  $11 = $9;
  label$9 : {
   label$10 : while (1) {
    $12 = +HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3];
    $2 = 0;
    $6 = $11;
    label$11 : {
     $10 = ($11 | 0) < (1 | 0);
     if ($10) {
      break label$11
     }
     label$12 : while (1) {
      $14 = $2 << 2 | 0;
      label$13 : {
       label$14 : {
        $19 = $12 * 5.9604644775390625e-08;
        if (!(Math_abs($19) < 2147483648.0)) {
         break label$14
        }
        $15 = ~~$19;
        break label$13;
       }
       $15 = -2147483648;
      }
      $14 = ($5 + 480 | 0) + $14 | 0;
      label$15 : {
       label$16 : {
        $19 = +($15 | 0);
        $12 = $19 * -16777216.0 + $12;
        if (!(Math_abs($12) < 2147483648.0)) {
         break label$16
        }
        $15 = ~~$12;
        break label$15;
       }
       $15 = -2147483648;
      }
      HEAP32[$14 >> 2] = $15;
      $6 = $6 + -1 | 0;
      $12 = +HEAPF64[($5 + ($6 << 3 | 0) | 0) >> 3] + $19;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $12 = +scalbn(+$12, $13 | 0);
    label$17 : {
     label$18 : {
      $12 = $12 + +floor(+($12 * .125)) * -8.0;
      if (!(Math_abs($12) < 2147483648.0)) {
       break label$18
      }
      $20 = ~~$12;
      break label$17;
     }
     $20 = -2147483648;
    }
    $12 = $12 - +($20 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $21 = ($13 | 0) < (1 | 0);
         if ($21) {
          break label$23
         }
         $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
         $206 = $2;
         $2 = HEAP32[$2 >> 2] | 0;
         $209 = $2;
         $2 = $2 >> $17 | 0;
         $6 = $209 - ($2 << $17 | 0) | 0;
         HEAP32[$206 >> 2] = $6;
         $22 = $6 >> $16 | 0;
         $20 = $2 + $20 | 0;
         break label$22;
        }
        if ($13) {
         break label$21
        }
        $22 = (HEAP32[((($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($22 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $22 = 2;
      if ($12 >= .5) {
       break label$20
      }
      $22 = 0;
      break label$19;
     }
     $2 = 0;
     $15 = 0;
     label$24 : {
      if ($10) {
       break label$24
      }
      label$25 : while (1) {
       $10 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
       $6 = HEAP32[$10 >> 2] | 0;
       $14 = 16777215;
       label$26 : {
        label$27 : {
         if ($15) {
          break label$27
         }
         $14 = 16777216;
         if ($6) {
          break label$27
         }
         $15 = 0;
         break label$26;
        }
        HEAP32[$10 >> 2] = $14 - $6 | 0;
        $15 = 1;
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($21) {
       break label$28
      }
      $2 = 8388607;
      label$29 : {
       switch ($18 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break label$29;
       default:
        break label$28;
       };
      }
      $6 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) & $2 | 0;
     }
     $20 = $20 + 1 | 0;
     if (($22 | 0) != (2 | 0)) {
      break label$19
     }
     $12 = 1.0 - $12;
     $22 = 2;
     if (!$15) {
      break label$19
     }
     $12 = $12 - +scalbn(+(1.0), $13 | 0);
    }
    label$31 : {
     if ($12 != 0.0) {
      break label$31
     }
     $6 = 0;
     $2 = $11;
     label$32 : {
      if (($2 | 0) <= ($9 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $2 = $2 + -1 | 0;
       $6 = HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | $6 | 0;
       if (($2 | 0) > ($9 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$6) {
       break label$32
      }
      $8 = $13;
      label$34 : while (1) {
       $8 = $8 + -24 | 0;
       $11 = $11 + -1 | 0;
       if (!(HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     $2 = 1;
     label$35 : while (1) {
      $6 = $2;
      $2 = $2 + 1 | 0;
      if (!(HEAP32[(($5 + 480 | 0) + (($9 - $6 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $14 = $6 + $11 | 0;
     label$36 : while (1) {
      $6 = $11 + $3 | 0;
      $11 = $11 + 1 | 0;
      HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11 + $7 | 0) << 2 | 0) + 4880 | 0) >> 2] | 0 | 0);
      $2 = 0;
      $12 = 0.0;
      label$37 : {
       if (($3 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $12 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $12;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($3 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
      if (($11 | 0) < ($14 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11 = $14;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $12 = +scalbn(+$12, 24 - $8 | 0 | 0);
     if (!($12 >= 16777216.0)) {
      break label$40
     }
     $3 = $11 << 2 | 0;
     label$41 : {
      label$42 : {
       $19 = $12 * 5.9604644775390625e-08;
       if (!(Math_abs($19) < 2147483648.0)) {
        break label$42
       }
       $2 = ~~$19;
       break label$41;
      }
      $2 = -2147483648;
     }
     $3 = ($5 + 480 | 0) + $3 | 0;
     label$43 : {
      label$44 : {
       $12 = +($2 | 0) * -16777216.0 + $12;
       if (!(Math_abs($12) < 2147483648.0)) {
        break label$44
       }
       $6 = ~~$12;
       break label$43;
      }
      $6 = -2147483648;
     }
     HEAP32[$3 >> 2] = $6;
     $11 = $11 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($12) < 2147483648.0)) {
       break label$46
      }
      $2 = ~~$12;
      break label$45;
     }
     $2 = -2147483648;
    }
    $8 = $13;
   }
   HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] = $2;
  }
  $12 = +scalbn(+(1.0), $8 | 0);
  label$47 : {
   if (($11 | 0) <= (-1 | 0)) {
    break label$47
   }
   $3 = $11;
   label$48 : while (1) {
    $2 = $3;
    HEAPF64[($5 + ($2 << 3 | 0) | 0) >> 3] = $12 * +(HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3 = $2 + -1 | 0;
    $12 = $12 * 5.9604644775390625e-08;
    if ($2) {
     continue label$48
    }
    break label$48;
   };
   $14 = 0;
   if (($11 | 0) < (0 | 0)) {
    break label$47
   }
   $9 = ($9 | 0) > (0 | 0) ? $9 : 0;
   $6 = $11;
   label$49 : while (1) {
    $0 = $9 >>> 0 < $14 >>> 0 ? $9 : $14;
    $15 = $11 - $6 | 0;
    $2 = 0;
    $12 = 0.0;
    label$50 : while (1) {
     $12 = +HEAPF64[(($2 << 3 | 0) + 7648 | 0) >> 3] * +HEAPF64[($5 + (($2 + $6 | 0) << 3 | 0) | 0) >> 3] + $12;
     $3 = ($2 | 0) != ($0 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue label$50
     }
     break label$50;
    };
    HEAPF64[(($5 + 160 | 0) + ($15 << 3 | 0) | 0) >> 3] = $12;
    $6 = $6 + -1 | 0;
    $2 = ($14 | 0) != ($11 | 0);
    $14 = $14 + 1 | 0;
    if ($2) {
     continue label$49
    }
    break label$49;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4 | 0) {
     case 3:
      $23 = 0.0;
      label$56 : {
       if (($11 | 0) < (1 | 0)) {
        break label$56
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$57 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $526 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($526 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = $2 >>> 0 > 1 >>> 0;
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label$57
        }
        break label$57;
       };
       if (($11 | 0) < (2 | 0)) {
        break label$56
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$58 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $564 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($564 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = $2 >>> 0 > 2 >>> 0;
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label$58
        }
        break label$58;
       };
       $23 = 0.0;
       if (($11 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23 = $23 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (2 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$59
        }
        break label$59;
       };
      }
      $12 = +HEAPF64[($5 + 160 | 0) >> 3];
      if ($22) {
       break label$52
      }
      HEAPF64[$1 >> 3] = $12;
      $12 = +HEAPF64[($5 + 168 | 0) >> 3];
      HEAPF64[($1 + 16 | 0) >> 3] = $23;
      HEAPF64[($1 + 8 | 0) >> 3] = $12;
      break label$51;
     case 0:
      $12 = 0.0;
      label$60 : {
       if (($11 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $2 = $11;
        $11 = $2 + -1 | 0;
        $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
        if ($2) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1 >> 3] = $22 ? -$12 : $12;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $12 = 0.0;
    label$62 : {
     if (($11 | 0) < (0 | 0)) {
      break label$62
     }
     $3 = $11;
     label$63 : while (1) {
      $2 = $3;
      $3 = $2 + -1 | 0;
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      if ($2) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1 >> 3] = $22 ? -$12 : $12;
    $12 = +HEAPF64[($5 + 160 | 0) >> 3] - $12;
    $2 = 1;
    label$64 : {
     if (($11 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) != ($11 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $22 ? -$12 : $12;
    break label$51;
   }
   HEAPF64[$1 >> 3] = -$12;
   $12 = +HEAPF64[($5 + 168 | 0) >> 3];
   HEAPF64[($1 + 16 | 0) >> 3] = -$23;
   HEAPF64[($1 + 8 | 0) >> 3] = -$12;
  }
  __stack_pointer = $5 + 560 | 0;
  return $20 & 7 | 0 | 0;
 }
 
 function __rem_pio2($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $6 = 0.0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $7 = 0.0, $2 = 0, $5 = 0, $10 = 0, $8 = 0.0, $9 = 0.0, $3 = 0, $3$hi = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $188 = 0, $214 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4 = $20;
      $5 = $4 & 2147483647 | 0;
      if ($5 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($4 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($5 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $21 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $22 = 0
          } else {
           $22 = 1
          }
          $23 = $22;
         } else {
          $23 = 0
         }
         $21 = $23;
        }
        if ($21) {
         break label$6
        }
        $0 = $0 + -1.5707963267341256;
        $6 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $6;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -6.077100506506192e-11;
        $4 = 1;
        break label$1;
       }
       $0 = $0 + 1.5707963267341256;
       $6 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 6.077100506506192e-11;
       $4 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $24 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $25 = 0
         } else {
          $25 = 1
         }
         $26 = $25;
        } else {
         $26 = 0
        }
        $24 = $26;
       }
       if ($24) {
        break label$7
       }
       $0 = $0 + -3.1415926534682512;
       $6 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -1.2154201013012384e-10;
       $4 = 2;
       break label$1;
      }
      $0 = $0 + 3.1415926534682512;
      $6 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $6;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 1.2154201013012384e-10;
      $4 = -2;
      break label$1;
     }
     label$8 : {
      if ($5 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($5 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($5 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $27 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $28 = 0
          } else {
           $28 = 1
          }
          $29 = $28;
         } else {
          $29 = 0
         }
         $27 = $29;
        }
        if ($27) {
         break label$10
        }
        $0 = $0 + -4.712388980202377;
        $6 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $6;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -1.8231301519518578e-10;
        $4 = 3;
        break label$1;
       }
       $0 = $0 + 4.712388980202377;
       $6 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 1.8231301519518578e-10;
       $4 = -3;
       break label$1;
      }
      if (($5 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $30 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $31 = 0
         } else {
          $31 = 1
         }
         $32 = $31;
        } else {
         $32 = 0
        }
        $30 = $32;
       }
       if ($30) {
        break label$11
       }
       $0 = $0 + -6.2831853069365025;
       $6 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -2.430840202602477e-10;
       $4 = 4;
       break label$1;
      }
      $0 = $0 + 6.2831853069365025;
      $6 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $6;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 2.430840202602477e-10;
      $4 = -4;
      break label$1;
     }
     if ($5 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $6 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $7 = $0 + $6 * -1.5707963267341256;
    $8 = $6 * 6.077100506506192e-11;
    $9 = $7 - $8;
    $10 = $9 < -.7853981633974483;
    label$12 : {
     label$13 : {
      if (!(Math_abs($6) < 2147483648.0)) {
       break label$13
      }
      $4 = ~~$6;
      break label$12;
     }
     $4 = -2147483648;
    }
    label$14 : {
     label$15 : {
      if (!$10) {
       break label$15
      }
      $4 = $4 + -1 | 0;
      $6 = $6 + -1.0;
      $8 = $6 * 6.077100506506192e-11;
      $7 = $0 + $6 * -1.5707963267341256;
      break label$14;
     }
     if (!($9 > .7853981633974483)) {
      break label$14
     }
     $4 = $4 + 1 | 0;
     $6 = $6 + 1.0;
     $8 = $6 * 6.077100506506192e-11;
     $7 = $0 + $6 * -1.5707963267341256;
    }
    $0 = $7 - $8;
    HEAPF64[$1 >> 3] = $0;
    label$16 : {
     $10 = $5 >>> 20 | 0;
     $188 = $10;
     wasm2js_scratch_store_f64(+$0);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $33 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $33 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if (($188 - ($33 & 2047 | 0) | 0 | 0) < (17 | 0)) {
      break label$16
     }
     $0 = $6 * 6.077100506303966e-11;
     $9 = $7 - $0;
     $8 = $6 * 2.0222662487959506e-21 - ($7 - $9 - $0);
     $0 = $9 - $8;
     HEAPF64[$1 >> 3] = $0;
     label$17 : {
      $214 = $10;
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $34 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($214 - ($34 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$17
      }
      $7 = $9;
      break label$16;
     }
     $0 = $6 * 2.0222662487111665e-21;
     $7 = $9 - $0;
     $8 = $6 * 8.4784276603689e-32 - ($9 - $7 - $0);
     $0 = $7 - $8;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $7 - $0 - $8;
    break label$1;
   }
   label$18 : {
    if ($5 >>> 0 < 2146435072 >>> 0) {
     break label$18
    }
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[($1 + 8 | 0) >> 3] = $0;
    $4 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $4 = 0;
   $10 = 1;
   label$19 : while (1) {
    $4 = ($2 + 16 | 0) + ($4 << 3 | 0) | 0;
    label$20 : {
     label$21 : {
      if (!(Math_abs($0) < 2147483648.0)) {
       break label$21
      }
      $11 = ~~$0;
      break label$20;
     }
     $11 = -2147483648;
    }
    $6 = +($11 | 0);
    HEAPF64[$4 >> 3] = $6;
    $0 = ($0 - $6) * 16777216.0;
    $4 = 1;
    $11 = $10 & 1 | 0;
    $10 = 0;
    if ($11) {
     continue label$19
    }
    break label$19;
   };
   HEAPF64[($2 + 32 | 0) >> 3] = $0;
   $4 = 2;
   label$22 : while (1) {
    $10 = $4;
    $4 = $4 + -1 | 0;
    if (+HEAPF64[(($2 + 16 | 0) + ($10 << 3 | 0) | 0) >> 3] == 0.0) {
     continue label$22
    }
    break label$22;
   };
   $4 = __rem_pio2_large($2 + 16 | 0 | 0, $2 | 0, ($5 >>> 20 | 0) + -1046 | 0 | 0, $10 + 1 | 0 | 0, 1 | 0) | 0;
   $0 = +HEAPF64[$2 >> 3];
   label$23 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$23
    }
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[($1 + 8 | 0) >> 3] = -+HEAPF64[($2 + 8 | 0) >> 3];
    $4 = 0 - $4 | 0;
    break label$1;
   }
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[($1 + 8 | 0) >> 3] = +HEAPF64[($2 + 8 | 0) >> 3];
  }
  __stack_pointer = $2 + 48 | 0;
  return $4 | 0;
 }
 
 function __sin($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $5 = 0.0, $4 = 0.0;
  $3 = $0 * $0;
  $4 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5 = $3 * $0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return +($5 * ($3 * $4 + -.16666666666666632) + $0);
  }
  return +($0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $5 * .16666666666666632));
 }
 
 function cos($0) {
  $0 = +$0;
  var $1 = 0, $3 = 0.0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9 = 0, i64toi32_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2 = $9 & 2147483647 | 0;
    if ($2 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    $3 = 1.0;
    if ($2 >>> 0 < 1044816030 >>> 0) {
     break label$1
    }
    $3 = +__cos(+$0, +(0.0));
    break label$1;
   }
   label$3 : {
    if ($2 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $3 = $0 - $0;
    break label$1;
   }
   label$4 : {
    switch ((__rem_pio2(+$0, $1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $3 = +__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    case 1:
     $3 = -+__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 2:
     $3 = -+__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$4;
    };
   }
   $3 = +__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return +$3;
 }
 
 function __memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0);
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0 & 3 | 0) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($2) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3 | 0)) {
       break label$4
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    $3 = $0 + $2 | 0;
    if (($1 - $3 | 0) >>> 0 > (0 - ($2 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return __memcpy($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
   }
   $4 = ($1 ^ $0 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $3 = $0;
       break label$3;
      }
      label$7 : {
       if ($0 & 3 | 0) {
        break label$7
       }
       $3 = $0;
       break label$4;
      }
      $3 = $0;
      label$8 : while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $3 = $3 + 1 | 0;
       if (!($3 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4) {
       break label$9
      }
      label$10 : {
       if (!($3 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $3 = $0 + $2 | 0;
        HEAP8[$3 >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
        if ($3 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[($0 + $2 | 0) >> 2] = HEAP32[($1 + $2 | 0) >> 2] | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2) {
      break label$1
     }
     label$13 : while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[($0 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
      if ($2) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, $5 = 0, $6$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP8[$0 >> 0] = $1;
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __math_xflow($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +(+fp_barrier(+($0 ? -$1 : $1)) * $1);
 }
 
 function fp_barrier($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[($1 + 8 | 0) >> 3] = $0;
  return +(+HEAPF64[($1 + 8 | 0) >> 3]);
 }
 
 function __math_uflow($0) {
  $0 = $0 | 0;
  return +(+__math_xflow($0 | 0, +(1.2882297539194267e-231)));
 }
 
 function __math_oflow($0) {
  $0 = $0 | 0;
  return +(+__math_xflow($0 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function exp($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $2 = 0, $1 = 0, i64toi32_i32$5 = 0, $1$hi = 0, $6$hi = 0, $20 = 0, $3 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0.0, $24 = 0, $6 = 0, $62 = 0.0, $69 = 0.0, $85 = 0, $85$hi = 0, $87$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     wasm2js_scratch_store_f64(+$0);
     i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $2 = $20 & 2047 | 0;
     if (($2 + -969 | 0) >>> 0 >= 63 >>> 0) {
      break label$3
     }
     $3 = $2;
     break label$2;
    }
    label$4 : {
     if ($2 >>> 0 > 968 >>> 0) {
      break label$4
     }
     return +($0 + 1.0);
    }
    $3 = 0;
    if ($2 >>> 0 < 1033 >>> 0) {
     break label$2
    }
    $4 = 0.0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    label$5 : {
     if (($2 | 0) != (2047 | 0)) {
      break label$5
     }
     return +($0 + 1.0);
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $21 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $22 = 0
       } else {
        $22 = 1
       }
       $23 = $22;
      } else {
       $23 = 0
      }
      $21 = $23;
     }
     if ($21) {
      break label$6
     }
     return +(+__math_uflow(0 | 0));
    }
    return +(+__math_oflow(0 | 0));
   }
   $4 = +HEAPF64[(0 + 7720 | 0) >> 3];
   $5 = +HEAPF64[(0 + 7712 | 0) >> 3] * $0 + $4;
   $4 = $5 - $4;
   $0 = $4 * +HEAPF64[(0 + 7736 | 0) >> 3] + ($4 * +HEAPF64[(0 + 7728 | 0) >> 3] + $0);
   $4 = $0 * $0;
   $62 = $4 * $4 * ($0 * +HEAPF64[(0 + 7768 | 0) >> 3] + +HEAPF64[(0 + 7760 | 0) >> 3]);
   $69 = $4 * ($0 * +HEAPF64[(0 + 7752 | 0) >> 3] + +HEAPF64[(0 + 7744 | 0) >> 3]);
   wasm2js_scratch_store_f64(+$5);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$3;
   $2 = ($1 << 4 | 0) & 2032 | 0;
   $0 = $62 + ($69 + (+HEAPF64[($2 + 7824 | 0) >> 3] + $0));
   i64toi32_i32$2 = $2 + 7832 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $85 = i64toi32_i32$3;
   $85$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 45;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $24 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $24 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $87$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $85$hi;
   i64toi32_i32$0 = $85;
   i64toi32_i32$2 = $87$hi;
   i64toi32_i32$1 = $24;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   label$7 : {
    if ($3) {
     break label$7
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = $1$hi;
    return +(+specialcase(+$0, $6 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$0 | 0));
   }
   i64toi32_i32$0 = $6$hi;
   wasm2js_scratch_store_i32(0 | 0, $6 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $4 = $4 * $0 + $4;
  }
  return +$4;
 }
 
 function specialcase($0, $1, $1$hi, $2, $2$hi) {
  $0 = +$0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4 = 0.0, i64toi32_i32$5 = 0, $5 = 0.0, $6 = 0.0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $4 = +wasm2js_scratch_load_f64();
   return +(($4 * $0 + $4) * 5486124068793688683255936.0e279);
  }
  label$2 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $5 = $4 * $0;
   $0 = $5 + $4;
   if (!($0 < 1.0)) {
    break label$2
   }
   i64toi32_i32$0 = $3;
   i64toi32_i32$4 = 1048576;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$4;
   HEAPF64[(i64toi32_i32$0 + 8 | 0) >> 3] = +HEAPF64[(i64toi32_i32$0 + 8 | 0) >> 3] * 2.2250738585072014e-308;
   $6 = $0 + 1.0;
   $0 = $6 + ($5 + ($4 - $0) + ($0 + (1.0 - $6))) + -1.0;
   $0 = $0 == 0.0 ? 0.0 : $0;
  }
  return +($0 * 2.2250738585072014e-308);
 }
 
 function fabs($0) {
  $0 = +$0;
  return +Math_abs($0);
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   $1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 21e3 | 0) >> 2] | 0)) {
     break label$2
    }
    $1 = fflush(HEAP32[(0 + 21e3 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 20848 | 0) >> 2] | 0)) {
     break label$3
    }
    $1 = fflush(HEAP32[(0 + 20848 | 0) >> 2] | 0 | 0) | 0 | $1 | 0;
   }
   label$4 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$4
    }
    label$5 : while (1) {
     $2 = 0;
     label$6 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2 = __lockfile($0 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1 = fflush($0 | 0) | 0 | $1 | 0;
     }
     label$8 : {
      if (!$2) {
       break label$8
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$5
     }
     break label$5;
    };
   }
   __ofl_unlock();
   return $1 | 0;
  }
  $2 = 0;
  label$9 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$9
   }
   $2 = __lockfile($0 | 0) | 0;
  }
  label$10 : {
   label$11 : {
    label$12 : {
     if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$12
     }
     $1 = -1;
     if ($2) {
      break label$11
     }
     break label$10;
    }
    label$13 : {
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($1 | 0) == ($3 | 0)) {
      break label$13
     }
     i64toi32_i32$1 = $1 - $3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1 = 0;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    if (!$2) {
     break label$10
    }
   }
   __unlockfile($0 | 0);
  }
  return $1 | 0;
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function fprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vfprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function __math_divzero($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[($1 + 8 | 0) >> 3] = $0 ? -1.0 : 1.0;
  return +(+HEAPF64[($1 + 8 | 0) >> 3] / 0.0);
 }
 
 function __math_invalid($0) {
  $0 = +$0;
  $0 = $0 - $0;
  return +($0 / $0);
 }
 
 function log($0) {
  $0 = +$0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $2 = 0.0, $1 = 0, $1$hi = 0, $8 = 0, $6 = 0.0, $7 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $22 = 0, $9 = 0, $9$hi = 0, $23 = 0, $24 = 0, $129 = 0.0, $142 = 0.0, $145 = 0, $145$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = -1072562176;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = 198911;
   i64toi32_i32$3 = -1;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 1072693248;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$2
    }
    return +(0.0);
   }
   $0 = $0 + -1.0;
   $2 = $0 * 134217728.0;
   $2 = $0 + $2 - $2;
   $3 = +HEAPF64[(0 + 9928 | 0) >> 3];
   $4 = $2 * $2 * $3;
   $5 = $0 + $4;
   $6 = $0 * $0;
   $7 = $0 * $6;
   return +($5 + ($7 * ($7 * ($7 * ($7 * +HEAPF64[(0 + 10008 | 0) >> 3] + ($6 * +HEAPF64[(0 + 1e4 | 0) >> 3] + ($0 * +HEAPF64[(0 + 9992 | 0) >> 3] + +HEAPF64[(0 + 9984 | 0) >> 3]))) + ($6 * +HEAPF64[(0 + 9976 | 0) >> 3] + ($0 * +HEAPF64[(0 + 9968 | 0) >> 3] + +HEAPF64[(0 + 9960 | 0) >> 3]))) + ($6 * +HEAPF64[(0 + 9952 | 0) >> 3] + ($0 * +HEAPF64[(0 + 9944 | 0) >> 3] + +HEAPF64[(0 + 9936 | 0) >> 3]))) + (($0 - $2) * $3 * ($0 + $2) + ($4 + ($0 - $5)))));
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $22 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $22 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
    }
    $8 = $22;
    if (($8 + -32752 | 0) >>> 0 > -32737 >>> 0) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$5 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$5
     }
     return +(+__math_divzero(1 | 0));
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    label$6 : {
     label$7 : {
      if ($8 >>> 0 > 32767 >>> 0) {
       break label$7
      }
      if (($8 & 32752 | 0 | 0) != (32752 | 0)) {
       break label$6
      }
     }
     return +(+__math_invalid(+$0));
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -54525952;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$3 = -1072037888;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 52;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $23 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
    $23 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $6 = +($23 | 0);
   $129 = $6 * +HEAPF64[(0 + 9872 | 0) >> 3];
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 45;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $24 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $24 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8 = ($24 & 127 | 0) << 4 | 0;
   $7 = $129 + +HEAPF64[($8 + 10024 | 0) >> 3];
   $142 = +HEAPF64[($8 + 10016 | 0) >> 3];
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$5 = $9;
   i64toi32_i32$1 = -1048576;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $145 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   $145$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$5 = $145$hi;
   i64toi32_i32$2 = $145;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = $142 * (+wasm2js_scratch_load_f64() - +HEAPF64[($8 + 12064 | 0) >> 3] - +HEAPF64[($8 + 12072 | 0) >> 3]);
   $3 = $7 + $0;
   $2 = $0 * $0;
   $0 = $3 + ($0 * $2 * ($2 * ($0 * +HEAPF64[(0 + 9920 | 0) >> 3] + +HEAPF64[(0 + 9912 | 0) >> 3]) + ($0 * +HEAPF64[(0 + 9904 | 0) >> 3] + +HEAPF64[(0 + 9896 | 0) >> 3])) + ($2 * +HEAPF64[(0 + 9888 | 0) >> 3] + ($6 * +HEAPF64[(0 + 9880 | 0) >> 3] + ($0 + ($7 - $3)))));
  }
  return +$0;
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function __ofl_lock() {
  __lock(21144 | 0);
  return 21148 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(21144 | 0);
 }
 
 function pow($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $11 = 0.0, $7 = 0, $7$hi = 0, $3 = 0, $3$hi = 0, $6 = 0, $8 = 0, $9 = 0, $14 = 0.0, $13 = 0.0, $15 = 0.0, $2 = 0, $10 = 0, $45 = 0, $4 = 0, $5 = 0, $46 = 0, $47 = 0, $10$hi = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $12 = 0.0, $62 = 0, $16 = 0.0, $63 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $64 = 0.0, $66 = 0, $137 = 0.0, $138 = 0, $138$hi = 0, $142$hi = 0, $148 = 0.0, $167 = 0.0, $221 = 0.0, $302 = 0.0, $333 = 0.0, $340 = 0.0, $356 = 0, $356$hi = 0, $359$hi = 0, $361$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  wasm2js_scratch_store_f64(+$1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $45 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $4 = $45;
  $5 = $4 & 2047 | 0;
  $6 = $5 + -1086 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     wasm2js_scratch_store_f64(+$0);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $7 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $46 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $46 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $8 = $46;
     if (($8 + -2047 | 0) >>> 0 < -2046 >>> 0) {
      break label$3
     }
     $9 = 0;
     if ($6 >>> 0 > -129 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $47 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $47 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $10 = $47;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $10;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = -2097153;
     i64toi32_i32$3 = -1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$4
     }
     $11 = 1.0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$5 = 1072693248;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$3 = $10$hi;
     if (!($10 | i64toi32_i32$3 | 0)) {
      break label$1
     }
     label$5 : {
      label$6 : {
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$2 = $7;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = 1;
       i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
        $48 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       }
       $7 = $48;
       $7$hi = i64toi32_i32$0;
       i64toi32_i32$3 = $7;
       i64toi32_i32$2 = -2097152;
       i64toi32_i32$5 = 0;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0) {
        break label$6
       }
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$5 = $10;
       i64toi32_i32$0 = -2097152;
       i64toi32_i32$2 = 1;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$5
       }
      }
      $11 = $0 + $1;
      break label$1;
     }
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$2 = $7;
     i64toi32_i32$3 = 2145386496;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0) {
      break label$1
     }
     $64 = $1 * $1;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$5 = 2145386495;
     i64toi32_i32$3 = -1;
     $66 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = -1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$2 | 0)) {
      $49 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0) {
        $50 = 0
       } else {
        $50 = 1
       }
       $51 = $50;
      } else {
       $51 = 0
      }
      $49 = $51;
     }
     $11 = $66 ^ $49 | 0 ? 0.0 : $64;
     break label$1;
    }
    label$7 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$5 = $7;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $52 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $52 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     i64toi32_i32$3 = $52;
     i64toi32_i32$5 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = -2097153;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$7
     }
     $11 = $0 * $0;
     label$8 : {
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7;
      i64toi32_i32$4 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$4 | 0)) {
       $53 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $54 = 0
        } else {
         $54 = 1
        }
        $55 = $54;
       } else {
        $55 = 0
       }
       $53 = $55;
      }
      if ($53) {
       break label$8
      }
      i64toi32_i32$2 = $3$hi;
      $11 = (checkint($3 | 0, i64toi32_i32$2 | 0) | 0 | 0) == (1 | 0) ? -$11 : $11;
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
      $56 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $57 = 0
       } else {
        $57 = 1
       }
       $58 = $57;
      } else {
       $58 = 0
      }
      $56 = $58;
     }
     if ($56) {
      break label$1
     }
     HEAPF64[($2 + 8 | 0) >> 3] = 1.0 / $11;
     $11 = +HEAPF64[($2 + 8 | 0) >> 3];
     break label$1;
    }
    $9 = 0;
    label$9 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $59 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $60 = 0
       } else {
        $60 = 1
       }
       $61 = $60;
      } else {
       $61 = 0
      }
      $59 = $61;
     }
     if ($59) {
      break label$9
     }
     label$10 : {
      i64toi32_i32$4 = $3$hi;
      $9 = checkint($3 | 0, i64toi32_i32$4 | 0) | 0;
      if ($9) {
       break label$10
      }
      $11 = +__math_invalid(+$0);
      break label$1;
     }
     $8 = $8 & 2047 | 0;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$3 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $7 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$3;
     $9 = (($9 | 0) == (1 | 0)) << 18 | 0;
    }
    label$11 : {
     if ($6 >>> 0 > -129 >>> 0) {
      break label$11
     }
     $11 = 1.0;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$0 = 1072693248;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$12 : {
      if ($5 >>> 0 > 957 >>> 0) {
       break label$12
      }
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$2 = $7;
      i64toi32_i32$3 = 1072693248;
      i64toi32_i32$0 = 0;
      $11 = (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? $1 : -$1) + 1.0;
      break label$1;
     }
     label$13 : {
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$0 = $7;
      i64toi32_i32$4 = 1072693248;
      i64toi32_i32$3 = 1;
      if (($4 >>> 0 < 2048 >>> 0 | 0) == (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0)) {
       break label$13
      }
      $11 = +__math_oflow(0 | 0);
      break label$1;
     }
     $11 = +__math_uflow(0 | 0);
     break label$1;
    }
    if ($8) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    i64toi32_i32$3 = -54525952;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$1;
   }
   label$14 : {
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = -1;
    i64toi32_i32$4 = -134217728;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $12 = +wasm2js_scratch_load_f64();
    $137 = $12;
    i64toi32_i32$0 = $7$hi;
    $138 = $7;
    $138$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $7;
    i64toi32_i32$2 = -1072076117;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$1 = -1048576;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $142$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $138$hi;
    i64toi32_i32$5 = $138;
    i64toi32_i32$0 = $142$hi;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    $7 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = -2147483648;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $11 = +wasm2js_scratch_load_f64();
    $148 = $11;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 45;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $62 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $62 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $6 = ($62 & 127 | 0) << 5 | 0;
    $13 = +HEAPF64[($6 + 14184 | 0) >> 3];
    $0 = $148 * $13 + -1.0;
    $14 = +HEAPF64[(0 + 14128 | 0) >> 3];
    $15 = $0 * $14;
    $16 = $0 * $15;
    $167 = $16;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 52;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
     $63 = i64toi32_i32$3 >> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$3 >> i64toi32_i32$5 | 0;
     $63 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
    }
    $17 = +($63 | 0);
    $18 = $17 * +HEAPF64[(0 + 14112 | 0) >> 3] + +HEAPF64[($6 + 14200 | 0) >> 3];
    i64toi32_i32$2 = $7$hi;
    wasm2js_scratch_store_i32(0 | 0, $7 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $19 = $13 * (+wasm2js_scratch_load_f64() - $11);
    $0 = $0 + $19;
    $11 = $18 + $0;
    $13 = $167 + $11;
    $14 = $14 * $0;
    $221 = $16 + ($11 - $13) + ($19 * ($15 + $14) + ($17 * +HEAPF64[(0 + 14120 | 0) >> 3] + +HEAPF64[($6 + 14208 | 0) >> 3] + ($0 + ($18 - $11))));
    $11 = $0 * $14;
    $15 = $221 + $0 * $11 * ($11 * ($11 * ($0 * +HEAPF64[(0 + 14176 | 0) >> 3] + +HEAPF64[(0 + 14168 | 0) >> 3]) + ($0 * +HEAPF64[(0 + 14160 | 0) >> 3] + +HEAPF64[(0 + 14152 | 0) >> 3])) + ($0 * +HEAPF64[(0 + 14144 | 0) >> 3] + +HEAPF64[(0 + 14136 | 0) >> 3]));
    $11 = $13 + $15;
    wasm2js_scratch_store_f64(+$11);
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = -134217728;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $14 = +wasm2js_scratch_load_f64();
    $0 = $137 * $14;
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $7 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 52;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $65 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $65 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $6 = $65 & 2047 | 0;
    if (($6 + -969 | 0) >>> 0 < 63 >>> 0) {
     break label$14
    }
    label$15 : {
     if ($6 >>> 0 > 968 >>> 0) {
      break label$15
     }
     $0 = $0 + 1.0;
     $11 = $9 ? -$0 : $0;
     break label$1;
    }
    $8 = $6 >>> 0 < 1033 >>> 0;
    $6 = 0;
    if ($8) {
     break label$14
    }
    label$16 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $67 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $68 = 0
       } else {
        $68 = 1
       }
       $69 = $68;
      } else {
       $69 = 0
      }
      $67 = $69;
     }
     if ($67) {
      break label$16
     }
     $11 = +__math_uflow($9 | 0);
     break label$1;
    }
    $11 = +__math_oflow($9 | 0);
    break label$1;
   }
   $302 = ($1 - $12) * $14 + ($15 + ($13 - $11) + ($11 - $14)) * $1;
   $1 = +HEAPF64[(0 + 7720 | 0) >> 3];
   $11 = $0 * +HEAPF64[(0 + 7712 | 0) >> 3] + $1;
   $1 = $11 - $1;
   $0 = $302 + ($1 * +HEAPF64[(0 + 7736 | 0) >> 3] + ($1 * +HEAPF64[(0 + 7728 | 0) >> 3] + $0));
   $1 = $0 * $0;
   $333 = $1 * $1 * ($0 * +HEAPF64[(0 + 7768 | 0) >> 3] + +HEAPF64[(0 + 7760 | 0) >> 3]);
   $340 = $1 * ($0 * +HEAPF64[(0 + 7752 | 0) >> 3] + +HEAPF64[(0 + 7744 | 0) >> 3]);
   wasm2js_scratch_store_f64(+$11);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$1;
   $8 = ($7 << 4 | 0) & 2032 | 0;
   $0 = $333 + ($340 + (+HEAPF64[($8 + 7824 | 0) >> 3] + $0));
   i64toi32_i32$4 = $8 + 7832 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $356 = i64toi32_i32$1;
   $356$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = 0;
   $359$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$4 = $7;
   i64toi32_i32$1 = $359$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 45;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $70 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $70 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $361$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $356$hi;
   i64toi32_i32$0 = $356;
   i64toi32_i32$3 = $361$hi;
   i64toi32_i32$2 = $70;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   label$17 : {
    if ($6) {
     break label$17
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $7$hi;
    $11 = +specialcase_1(+$0, $3 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$0 | 0);
    break label$1;
   }
   i64toi32_i32$0 = $3$hi;
   wasm2js_scratch_store_i32(0 | 0, $3 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $1 = +wasm2js_scratch_load_f64();
   $11 = $1 * $0 + $1;
  }
  __stack_pointer = $2 + 16 | 0;
  return +$11;
 }
 
 function checkint($0, $0$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0, $14 = 0, $15 = 0, $3 = 0, $3$hi = 0, $14$hi = 0, $17$hi = 0;
  $1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $14 & 2047 | 0;
   if ($2 >>> 0 < 1023 >>> 0) {
    break label$1
   }
   $1 = 2;
   if ($2 >>> 0 > 1075 >>> 0) {
    break label$1
   }
   $1 = 0;
   i64toi32_i32$1 = 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = 1075 - $2 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $15 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $3 = $15;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $1 = !(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0) ? 2 : 1;
  }
  return $1 | 0;
 }
 
 function specialcase_1($0, $1, $1$hi, $2, $2$hi) {
  $0 = +$0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $4 = 0.0, $3 = 0, $6 = 0.0, $5 = 0.0, $7 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = -1058013184;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $0 = ($4 * $0 + $4) * 5486124068793688683255936.0e279;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 1071644672;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $2 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$4;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $5 = $4 * $0;
    $0 = $5 + $4;
    if (!(+fabs(+$0) < 1.0)) {
     break label$3
    }
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 1048576;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$4;
    HEAPF64[(i64toi32_i32$0 + 8 | 0) >> 3] = +HEAPF64[(i64toi32_i32$0 + 8 | 0) >> 3] * 2.2250738585072014e-308;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $6 = $0 < 0.0 ? -1.0 : 1.0;
    $7 = $0 + $6;
    $0 = $7 + ($5 + ($4 - $0) + ($0 + ($6 - $7))) - $6;
    $0 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0, wasm2js_i32$0 = $0 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
   }
   $0 = $0 * 2.2250738585072014e-308;
  }
  __stack_pointer = $3 + 16 | 0;
  return +$0;
 }
 
 function printf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  $1 = vfprintf(20856 | 0, $0 | 0, $1 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   label$4 : {
    if ($1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1 = $1 + 969 | 0;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = (($1 | 0) > (-2960 | 0) ? $1 : -2960) + 1938 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function sin($0) {
  $0 = +$0;
  var $1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, i64toi32_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2 = $8 & 2147483647 | 0;
    if ($2 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2 >>> 0 < 1045430272 >>> 0) {
     break label$1
    }
    $0 = +__sin(+$0, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0 = $0 - $0;
    break label$1;
   }
   label$4 : {
    switch ((__rem_pio2(+$0, $1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0 = +__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 1:
     $0 = +__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $0 = -+__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    default:
     break label$4;
    };
   }
   $0 = -+__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
  }
  __stack_pointer = $1 + 16 | 0;
  return +$0;
 }
 
 function sprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function sqrt($0) {
  $0 = +$0;
  return +Math_sqrt($0);
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(dummy(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $4 = $3 + 16 | 0;
  $7 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $5 = $4;
       break label$4;
      }
      label$6 : while (1) {
       $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$3
       }
       label$7 : {
        if (($1 | 0) > (-1 | 0)) {
         break label$7
        }
        $5 = $4;
        break label$2;
       }
       $8 = HEAP32[($4 + 4 | 0) >> 2] | 0;
       $9 = $1 >>> 0 > $8 >>> 0;
       $5 = $4 + ($9 << 3 | 0) | 0;
       $8 = $1 - ($9 ? $8 : 0) | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $8 | 0;
       $4 = $4 + ($9 ? 12 : 4) | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - $8 | 0;
       $6 = $6 - $1 | 0;
       $4 = $5;
       $7 = $7 - $9 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $4 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($6 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $1 = $2;
    break label$1;
   }
   $1 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break label$1
   }
   $1 = $2 - (HEAP32[($5 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function __lseek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $2 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2 ? -1 : $1;
  i64toi32_i32$2 = $2 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __lseek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($1 & 3 | 0)) {
     break label$2
    }
    $1 = $0;
    label$3 : while (1) {
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     $1 = $1 + 1 | 0;
     if ($1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 >> 0] | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function __towrite($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function isdigit($0) {
  $0 = $0 | 0;
  return ($0 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     if (!$2) {
      break label$3
     }
     $4 = $1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
       break label$2
      }
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != (0 | 0);
      $0 = $0 + 1 | 0;
      if (!($0 & 3 | 0)) {
       break label$3
      }
      if ($2) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3) {
     break label$1
    }
   }
   label$5 : {
    label$6 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
      break label$6
     }
     if ($2 >>> 0 < 4 >>> 0) {
      break label$6
     }
     $4 = Math_imul($1 & 255 | 0, 16843009);
     label$7 : while (1) {
      $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   $3 = $1 & 255 | 0;
   label$8 : while (1) {
    label$9 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) != ($3 | 0)) {
      break label$9
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$8
    }
    break label$8;
   };
  }
  return 0 | 0;
 }
 
 function strnlen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = memchr($0 | 0, 0 | 0, $1 | 0) | 0;
  return ($2 ? $2 - $0 | 0 : $1) | 0;
 }
 
 function __errno_location() {
  return 22200 | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $3 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __fwritex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    if (__towrite($2 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if (($3 - $5 | 0) >>> 0 >= $1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3 = 0;
     break label$4;
    }
    $4 = $1;
    label$6 : while (1) {
     label$7 : {
      $3 = $4;
      if ($3) {
       break label$7
      }
      $3 = 0;
      break label$4;
     }
     $4 = $3 + -1 | 0;
     if ((HEAPU8[($0 + $4 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4 = FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0 = $0 + $3 | 0;
    $1 = $1 - $3 | 0;
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   __memcpy($5 | 0, $0 | 0, $1 | 0) | 0;
   HEAP32[($2 + 20 | 0) >> 2] = (HEAP32[($2 + 20 | 0) >> 2] | 0) + $1 | 0;
   $4 = $3 + $1 | 0;
  }
  return $4 | 0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, $8 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 204 | 0) >> 2] = $2;
  $6 = 0;
  memset($5 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5 + 200 | 0) >> 2] = HEAP32[($5 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((printf_core(0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6 = __lockfile($0 | 0) | 0;
   }
   $7 = HEAP32[$0 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0 >> 2] = $7 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0 + 48 | 0) >> 2] = 80;
       HEAP32[($0 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8 = HEAP32[($0 + 44 | 0) >> 2] | 0;
       HEAP32[($0 + 44 | 0) >> 2] = $5;
       break label$7;
      }
      $8 = 0;
      if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2 = -1;
     if (__towrite($0 | 0) | 0) {
      break label$5
     }
    }
    $2 = printf_core($0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0;
   }
   $4 = $7 & 32 | 0;
   label$9 : {
    if (!$8) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
    HEAP32[($0 + 48 | 0) >> 2] = 0;
    HEAP32[($0 + 44 | 0) >> 2] = $8;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2 = $3 ? $2 : -1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 | $4 | 0;
   $4 = $3 & 32 | 0 ? -1 : $2;
   if (!$6) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $5 + 208 | 0;
  return $4 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $12 = 0, $7 = 0, $15 = 0, $20 = 0, i64toi32_i32$1 = 0, $17 = 0, $18 = 0, $14 = 0, $13 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11 = 0, $16 = 0, $19 = 0, $22 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9 = 0, $24 = 0, $10 = 0, $25 = 0, $25$hi = 0, $21 = 0, $23 = 0, $33 = 0, $34 = 0, $35 = 0, $8 = 0, $272 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 76 | 0) >> 2] = $1;
  $8 = $7 + 55 | 0;
  $9 = $7 + 56 | 0;
  $10 = 0;
  $11 = 0;
  $12 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $13 = $1;
       if (($12 | 0) > ($11 ^ 2147483647 | 0 | 0)) {
        break label$4
       }
       $11 = $12 + $11 | 0;
       $12 = $13;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $14 = HEAPU8[$12 >> 0] | 0;
            if (!$14) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $14 = $14 & 255 | 0;
                if ($14) {
                 break label$14
                }
                $1 = $12;
                break label$13;
               }
               if (($14 | 0) != (37 | 0)) {
                break label$12
               }
               $14 = $12;
               label$15 : while (1) {
                label$16 : {
                 if ((HEAPU8[($14 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                  break label$16
                 }
                 $1 = $14;
                 break label$13;
                }
                $12 = $12 + 1 | 0;
                $15 = HEAPU8[($14 + 2 | 0) >> 0] | 0;
                $1 = $14 + 2 | 0;
                $14 = $1;
                if (($15 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $12 = $12 - $13 | 0;
              $14 = $11 ^ 2147483647 | 0;
              if (($12 | 0) > ($14 | 0)) {
               break label$4
              }
              label$17 : {
               if (!$0) {
                break label$17
               }
               out($0 | 0, $13 | 0, $12 | 0);
              }
              if ($12) {
               continue label$5
              }
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              $12 = $1 + 1 | 0;
              $16 = -1;
              label$18 : {
               if (!(isdigit(HEAP8[($1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$18
               }
               if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$18
               }
               $12 = $1 + 3 | 0;
               $16 = (HEAP8[($1 + 1 | 0) >> 0] | 0) + -48 | 0;
               $10 = 1;
              }
              HEAP32[($7 + 76 | 0) >> 2] = $12;
              $17 = 0;
              label$19 : {
               label$20 : {
                $18 = HEAP8[$12 >> 0] | 0;
                $1 = $18 + -32 | 0;
                if ($1 >>> 0 <= 31 >>> 0) {
                 break label$20
                }
                $15 = $12;
                break label$19;
               }
               $17 = 0;
               $15 = $12;
               $1 = 1 << $1 | 0;
               if (!($1 & 75913 | 0)) {
                break label$19
               }
               label$21 : while (1) {
                $15 = $12 + 1 | 0;
                HEAP32[($7 + 76 | 0) >> 2] = $15;
                $17 = $1 | $17 | 0;
                $18 = HEAP8[($12 + 1 | 0) >> 0] | 0;
                $1 = $18 + -32 | 0;
                if ($1 >>> 0 >= 32 >>> 0) {
                 break label$19
                }
                $12 = $15;
                $1 = 1 << $1 | 0;
                if ($1 & 75913 | 0) {
                 continue label$21
                }
                break label$21;
               };
              }
              label$22 : {
               label$23 : {
                if (($18 | 0) != (42 | 0)) {
                 break label$23
                }
                label$24 : {
                 label$25 : {
                  if (!(isdigit(HEAP8[($15 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$25
                  }
                  if ((HEAPU8[($15 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$25
                  }
                  HEAP32[((((HEAP8[($15 + 1 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $18 = $15 + 3 | 0;
                  $19 = HEAP32[((((HEAP8[($15 + 1 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  $10 = 1;
                  break label$24;
                 }
                 if ($10) {
                  break label$9
                 }
                 $18 = $15 + 1 | 0;
                 label$26 : {
                  if ($0) {
                   break label$26
                  }
                  HEAP32[($7 + 76 | 0) >> 2] = $18;
                  $10 = 0;
                  $19 = 0;
                  break label$22;
                 }
                 $12 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $12 + 4 | 0;
                 $19 = HEAP32[$12 >> 2] | 0;
                 $10 = 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $18;
                if (($19 | 0) > (-1 | 0)) {
                 break label$22
                }
                $19 = 0 - $19 | 0;
                $17 = $17 | 8192 | 0;
                break label$22;
               }
               $19 = getint($7 + 76 | 0 | 0) | 0;
               if (($19 | 0) < (0 | 0)) {
                break label$4
               }
               $18 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              $12 = 0;
              $20 = -1;
              label$27 : {
               label$28 : {
                if ((HEAPU8[$18 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$28
                }
                $1 = $18;
                $21 = 0;
                break label$27;
               }
               label$29 : {
                if ((HEAPU8[($18 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$29
                }
                label$30 : {
                 label$31 : {
                  if (!(isdigit(HEAP8[($18 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$31
                  }
                  if ((HEAPU8[($18 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$31
                  }
                  HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $1 = $18 + 4 | 0;
                  $20 = HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  break label$30;
                 }
                 if ($10) {
                  break label$9
                 }
                 $1 = $18 + 2 | 0;
                 label$32 : {
                  if ($0) {
                   break label$32
                  }
                  $20 = 0;
                  break label$30;
                 }
                 $15 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $15 + 4 | 0;
                 $20 = HEAP32[$15 >> 2] | 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $1;
                $21 = ($20 ^ -1 | 0) >>> 31 | 0;
                break label$27;
               }
               HEAP32[($7 + 76 | 0) >> 2] = $18 + 1 | 0;
               $21 = 1;
               $20 = getint($7 + 76 | 0 | 0) | 0;
               $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              label$33 : {
               label$34 : while (1) {
                $18 = $12;
                $15 = $1;
                $12 = HEAP8[$15 >> 0] | 0;
                if (($12 + -123 | 0) >>> 0 < -58 >>> 0) {
                 break label$33
                }
                $1 = $15 + 1 | 0;
                $12 = HEAPU8[(($12 + Math_imul($18, 58) | 0) + 18223 | 0) >> 0] | 0;
                if (($12 + -1 | 0) >>> 0 < 8 >>> 0) {
                 continue label$34
                }
                break label$34;
               };
               HEAP32[($7 + 76 | 0) >> 2] = $1;
               $22 = 28;
               label$35 : {
                label$36 : {
                 label$37 : {
                  if (($12 | 0) == (27 | 0)) {
                   break label$37
                  }
                  if (!$12) {
                   break label$3
                  }
                  label$38 : {
                   if (($16 | 0) < (0 | 0)) {
                    break label$38
                   }
                   HEAP32[($4 + ($16 << 2 | 0) | 0) >> 2] = $12;
                   i64toi32_i32$2 = $3 + ($16 << 3 | 0) | 0;
                   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                   $272 = i64toi32_i32$0;
                   i64toi32_i32$0 = $7;
                   HEAP32[($7 + 64 | 0) >> 2] = $272;
                   HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$1;
                   break label$36;
                  }
                  if (!$0) {
                   break label$6
                  }
                  pop_arg($7 + 64 | 0 | 0, $12 | 0, $2 | 0, $6 | 0);
                  break label$35;
                 }
                 if (($16 | 0) > (-1 | 0)) {
                  break label$3
                 }
                }
                $12 = 0;
                if (!$0) {
                 continue label$5
                }
               }
               $23 = $17 & -65537 | 0;
               $17 = $17 & 8192 | 0 ? $23 : $17;
               $16 = 0;
               $24 = 1062;
               $22 = $9;
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              label$54 : {
                               $12 = HEAP8[$15 >> 0] | 0;
                               $12 = $18 ? (($12 & 15 | 0 | 0) == (3 | 0) ? $12 & -33 | 0 : $12) : $12;
                               switch ($12 + -88 | 0 | 0) {
                               case 11:
                                break label$39;
                               case 9:
                               case 13:
                               case 14:
                               case 15:
                                break label$40;
                               case 27:
                                break label$45;
                               case 12:
                               case 17:
                                break label$48;
                               case 23:
                                break label$49;
                               case 0:
                               case 32:
                                break label$50;
                               case 24:
                                break label$51;
                               case 22:
                                break label$52;
                               case 29:
                                break label$53;
                               case 1:
                               case 2:
                               case 3:
                               case 4:
                               case 5:
                               case 6:
                               case 7:
                               case 8:
                               case 10:
                               case 16:
                               case 18:
                               case 19:
                               case 20:
                               case 21:
                               case 25:
                               case 26:
                               case 28:
                               case 30:
                               case 31:
                                break label$7;
                               default:
                                break label$54;
                               };
                              }
                              $22 = $9;
                              label$55 : {
                               switch ($12 + -65 | 0 | 0) {
                               case 0:
                               case 4:
                               case 5:
                               case 6:
                                break label$40;
                               case 2:
                                break label$43;
                               case 1:
                               case 3:
                                break label$7;
                               default:
                                break label$55;
                               };
                              }
                              if (($12 | 0) == (83 | 0)) {
                               break label$44
                              }
                              break label$8;
                             }
                             $16 = 0;
                             $24 = 1062;
                             i64toi32_i32$2 = $7;
                             i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                             i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                             $25 = i64toi32_i32$1;
                             $25$hi = i64toi32_i32$0;
                             break label$47;
                            }
                            $12 = 0;
                            label$56 : {
                             switch ($18 & 255 | 0 | 0) {
                             case 0:
                              HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                              continue label$5;
                             case 1:
                              HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                              continue label$5;
                             case 2:
                              i64toi32_i32$1 = $11;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                              HEAP32[i64toi32_i32$1 >> 2] = $11;
                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                              continue label$5;
                             case 3:
                              HEAP16[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 1] = $11;
                              continue label$5;
                             case 4:
                              HEAP8[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 0] = $11;
                              continue label$5;
                             case 6:
                              HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                              continue label$5;
                             case 7:
                              break label$56;
                             default:
                              continue label$5;
                             };
                            }
                            i64toi32_i32$1 = $11;
                            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                            i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                            HEAP32[i64toi32_i32$1 >> 2] = $11;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            continue label$5;
                           }
                           $20 = $20 >>> 0 > 8 >>> 0 ? $20 : 8;
                           $17 = $17 | 8 | 0;
                           $12 = 120;
                          }
                          i64toi32_i32$2 = $7;
                          i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                          $13 = fmt_x(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0, $12 & 32 | 0 | 0) | 0;
                          $16 = 0;
                          $24 = 1062;
                          i64toi32_i32$2 = $7;
                          i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                          if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                           break label$46
                          }
                          if (!($17 & 8 | 0)) {
                           break label$46
                          }
                          $24 = ($12 >>> 4 | 0) + 1062 | 0;
                          $16 = 2;
                          break label$46;
                         }
                         $16 = 0;
                         $24 = 1062;
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         $13 = fmt_o(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0) | 0;
                         if (!($17 & 8 | 0)) {
                          break label$46
                         }
                         $12 = $9 - $13 | 0;
                         $20 = ($20 | 0) > ($12 | 0) ? $20 : $12 + 1 | 0;
                         break label$46;
                        }
                        label$63 : {
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         $25 = i64toi32_i32$1;
                         $25$hi = i64toi32_i32$0;
                         i64toi32_i32$2 = i64toi32_i32$1;
                         i64toi32_i32$1 = -1;
                         i64toi32_i32$3 = -1;
                         if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                          $33 = 1
                         } else {
                          if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                           if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                            $34 = 0
                           } else {
                            $34 = 1
                           }
                           $35 = $34;
                          } else {
                           $35 = 0
                          }
                          $33 = $35;
                         }
                         if ($33) {
                          break label$63
                         }
                         i64toi32_i32$2 = $25$hi;
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$3 = 0;
                         i64toi32_i32$0 = $25$hi;
                         i64toi32_i32$1 = $25;
                         i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                         i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                         $25 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                         $25$hi = i64toi32_i32$5;
                         i64toi32_i32$3 = $7;
                         HEAP32[($7 + 64 | 0) >> 2] = $25;
                         HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$5;
                         $16 = 1;
                         $24 = 1062;
                         break label$47;
                        }
                        label$64 : {
                         if (!($17 & 2048 | 0)) {
                          break label$64
                         }
                         $16 = 1;
                         $24 = 1063;
                         break label$47;
                        }
                        $16 = $17 & 1 | 0;
                        $24 = $16 ? 1064 : 1062;
                       }
                       i64toi32_i32$5 = $25$hi;
                       $13 = fmt_u($25 | 0, i64toi32_i32$5 | 0, $9 | 0) | 0;
                      }
                      label$65 : {
                       if (!$21) {
                        break label$65
                       }
                       if (($20 | 0) < (0 | 0)) {
                        break label$4
                       }
                      }
                      $17 = $21 ? $17 & -65537 | 0 : $17;
                      label$66 : {
                       i64toi32_i32$2 = $7;
                       i64toi32_i32$5 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                       i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                       $25 = i64toi32_i32$5;
                       $25$hi = i64toi32_i32$3;
                       i64toi32_i32$2 = i64toi32_i32$5;
                       i64toi32_i32$5 = 0;
                       i64toi32_i32$1 = 0;
                       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                        break label$66
                       }
                       if ($20) {
                        break label$66
                       }
                       $13 = $9;
                       $22 = $13;
                       $20 = 0;
                       break label$7;
                      }
                      i64toi32_i32$2 = $25$hi;
                      $12 = ($9 - $13 | 0) + !($25 | i64toi32_i32$2 | 0) | 0;
                      $20 = ($20 | 0) > ($12 | 0) ? $20 : $12;
                      break label$8;
                     }
                     $12 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                     $13 = $12 ? $12 : 1628;
                     $12 = strnlen($13 | 0, ($20 >>> 0 < 2147483647 >>> 0 ? $20 : 2147483647) | 0) | 0;
                     $22 = $13 + $12 | 0;
                     label$67 : {
                      if (($20 | 0) <= (-1 | 0)) {
                       break label$67
                      }
                      $17 = $23;
                      $20 = $12;
                      break label$7;
                     }
                     $17 = $23;
                     $20 = $12;
                     if (HEAPU8[$22 >> 0] | 0) {
                      break label$4
                     }
                     break label$7;
                    }
                    label$68 : {
                     if (!$20) {
                      break label$68
                     }
                     $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                     break label$42;
                    }
                    $12 = 0;
                    pad($0 | 0, 32 | 0, $19 | 0, 0 | 0, $17 | 0);
                    break label$41;
                   }
                   HEAP32[($7 + 12 | 0) >> 2] = 0;
                   i64toi32_i32$1 = $7;
                   i64toi32_i32$2 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                   i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                   HEAP32[($7 + 8 | 0) >> 2] = i64toi32_i32$2;
                   HEAP32[($7 + 64 | 0) >> 2] = $7 + 8 | 0;
                   $14 = $7 + 8 | 0;
                   $20 = -1;
                  }
                  $12 = 0;
                  label$69 : {
                   label$70 : while (1) {
                    $15 = HEAP32[$14 >> 2] | 0;
                    if (!$15) {
                     break label$69
                    }
                    label$71 : {
                     $15 = wctomb($7 + 4 | 0 | 0, $15 | 0) | 0;
                     $13 = ($15 | 0) < (0 | 0);
                     if ($13) {
                      break label$71
                     }
                     if ($15 >>> 0 > ($20 - $12 | 0) >>> 0) {
                      break label$71
                     }
                     $14 = $14 + 4 | 0;
                     $12 = $15 + $12 | 0;
                     if ($20 >>> 0 > $12 >>> 0) {
                      continue label$70
                     }
                     break label$69;
                    }
                    break label$70;
                   };
                   if ($13) {
                    break label$2
                   }
                  }
                  $22 = 61;
                  if (($12 | 0) < (0 | 0)) {
                   break label$3
                  }
                  pad($0 | 0, 32 | 0, $19 | 0, $12 | 0, $17 | 0);
                  label$72 : {
                   if ($12) {
                    break label$72
                   }
                   $12 = 0;
                   break label$41;
                  }
                  $15 = 0;
                  $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                  label$73 : while (1) {
                   $13 = HEAP32[$14 >> 2] | 0;
                   if (!$13) {
                    break label$41
                   }
                   $13 = wctomb($7 + 4 | 0 | 0, $13 | 0) | 0;
                   $15 = $13 + $15 | 0;
                   if ($15 >>> 0 > $12 >>> 0) {
                    break label$41
                   }
                   out($0 | 0, $7 + 4 | 0 | 0, $13 | 0);
                   $14 = $14 + 4 | 0;
                   if ($15 >>> 0 < $12 >>> 0) {
                    continue label$73
                   }
                   break label$73;
                  };
                 }
                 pad($0 | 0, 32 | 0, $19 | 0, $12 | 0, $17 ^ 8192 | 0 | 0);
                 $12 = ($19 | 0) > ($12 | 0) ? $19 : $12;
                 continue label$5;
                }
                label$74 : {
                 if (!$21) {
                  break label$74
                 }
                 if (($20 | 0) < (0 | 0)) {
                  break label$4
                 }
                }
                $22 = 61;
                $12 = FUNCTION_TABLE[$5 | 0]($0, +HEAPF64[($7 + 64 | 0) >> 3], $19, $20, $17, $12) | 0;
                if (($12 | 0) >= (0 | 0)) {
                 continue label$5
                }
                break label$3;
               }
               i64toi32_i32$1 = $7;
               i64toi32_i32$3 = HEAP32[($7 + 64 | 0) >> 2] | 0;
               i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
               HEAP8[($7 + 55 | 0) >> 0] = i64toi32_i32$3;
               $20 = 1;
               $13 = $8;
               $22 = $9;
               $17 = $23;
               break label$7;
              }
              HEAP32[($7 + 76 | 0) >> 2] = $15;
              break label$9;
             }
             $14 = HEAPU8[($12 + 1 | 0) >> 0] | 0;
             $12 = $12 + 1 | 0;
             continue label$11;
            };
           }
           if ($0) {
            break label$1
           }
           if (!$10) {
            break label$6
           }
           $12 = 1;
           label$75 : {
            label$76 : while (1) {
             $14 = HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0;
             if (!$14) {
              break label$75
             }
             pop_arg($3 + ($12 << 3 | 0) | 0 | 0, $14 | 0, $2 | 0, $6 | 0);
             $11 = 1;
             $12 = $12 + 1 | 0;
             if (($12 | 0) != (10 | 0)) {
              continue label$76
             }
             break label$1;
            };
           }
           $11 = 1;
           if ($12 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           label$77 : while (1) {
            if (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) {
             break label$9
            }
            $11 = 1;
            $12 = $12 + 1 | 0;
            if (($12 | 0) == (10 | 0)) {
             break label$1
            }
            continue label$77;
           };
          }
          $22 = 28;
          break label$3;
         }
         $22 = $9;
        }
        $18 = $22 - $13 | 0;
        $20 = ($20 | 0) > ($18 | 0) ? $20 : $18;
        if (($20 | 0) > ($16 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $22 = 61;
        $15 = $16 + $20 | 0;
        $12 = ($19 | 0) > ($15 | 0) ? $19 : $15;
        if (($12 | 0) > ($14 | 0)) {
         break label$3
        }
        pad($0 | 0, 32 | 0, $12 | 0, $15 | 0, $17 | 0);
        out($0 | 0, $24 | 0, $16 | 0);
        pad($0 | 0, 48 | 0, $12 | 0, $15 | 0, $17 ^ 65536 | 0 | 0);
        pad($0 | 0, 48 | 0, $20 | 0, $18 | 0, 0 | 0);
        out($0 | 0, $13 | 0, $18 | 0);
        pad($0 | 0, 32 | 0, $12 | 0, $15 | 0, $17 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11 = 0;
      break label$1;
     }
     $22 = 61;
    }
    HEAP32[(__errno_location() | 0) >> 2] = $22;
   }
   $11 = -1;
  }
  __stack_pointer = $7 + 80 | 0;
  return $11 | 0;
 }
 
 function out($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ((HEAPU8[$0 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   __fwritex($1 | 0, $2 | 0, $0 | 0) | 0;
  }
 }
 
 function getint($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if (isdigit(HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] | 0 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = -1;
   label$3 : {
    if ($1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $3 = (HEAP8[$2 >> 0] | 0) + -48 | 0;
    $1 = Math_imul($1, 10);
    $3 = ($3 | 0) > ($1 ^ 2147483647 | 0 | 0) ? -1 : $3 + $1 | 0;
   }
   HEAP32[$0 >> 2] = $2 + 1 | 0;
   $1 = $3;
   if (isdigit(HEAP8[($2 + 1 | 0) >> 0] | 0 | 0) | 0) {
    continue label$2
   }
   break label$2;
  };
  return $3 | 0;
 }
 
 function pop_arg($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21 = 0, $29 = 0, $37 = 0, $45 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $87 = 0, $97 = 0, $105 = 0, $115 = 0, $125 = 0, $133 = 0, $141 = 0;
  label$1 : {
   switch ($1 + -9 | 0 | 0) {
   case 0:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    return;
   case 1:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $29;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $37;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $45;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $55 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $55;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $63;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $71;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $79;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $87;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $97 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $97;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $105;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $115 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $115;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $125 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $125;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $133;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $141;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3 | 0]($0, $2);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function fmt_x($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10 = 0, $3 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = HEAPU8[(($0 & 15 | 0) + 18752 | 0) >> 0] | 0 | $2 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $10;
    $0$hi = i64toi32_i32$0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_o($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9 = 0, $2 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = $0 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $9;
    $0$hi = i64toi32_i32$0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_u($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$3 = 0, $2 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4 = 0, $16 = 0, $16$hi = 0, $5 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2 = $0;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16;
    i64toi32_i32$5 = ($0 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1 >> 0] = $0 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0 = $2;
    $0$hi = i64toi32_i32$2;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3 = $2;
   if (!$3) {
    break label$4
   }
   label$5 : while (1) {
    $1 = $1 + -1 | 0;
    $4 = ($3 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1 >> 0] = $3 - Math_imul($4, 10) | 0 | 48 | 0;
    $5 = $3 >>> 0 > 9 >>> 0;
    $3 = $4;
    if ($5) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 | 0;
 }
 
 function pad($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   if ($4 & 73728 | 0) {
    break label$1
   }
   $3 = $2 - $3 | 0;
   $2 = $3 >>> 0 < 256 >>> 0;
   memset($5 | 0, $1 & 255 | 0 | 0, ($2 ? $3 : 256) | 0) | 0;
   label$2 : {
    if ($2) {
     break label$2
    }
    label$3 : while (1) {
     out($0 | 0, $5 | 0, 256 | 0);
     $3 = $3 + -256 | 0;
     if ($3 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   out($0 | 0, $5 | 0, $3 | 0);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function vfprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 58 | 0, 59 | 0) | 0 | 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $11 = 0, $12 = 0, $13 = 0, $19 = 0, $23 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $16 = 0, i64toi32_i32$4 = 0, $24 = 0, $25 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $18 = 0, $21 = 0, $9 = 0, $26 = 0.0, $8 = 0, $14 = 0, $8$hi = 0, $15 = 0, $17 = 0, $10 = 0, $22 = 0, $7 = 0, $45 = 0, $46 = 0, $47 = 0, $20$hi = 0, $48 = 0, $20 = 0, $167 = 0, $169$hi = 0, $171$hi = 0, $173 = 0, $173$hi = 0, $175$hi = 0, $179 = 0, $179$hi = 0, $388 = 0.0, $852 = 0;
  $6 = __stack_pointer - 560 | 0;
  __stack_pointer = $6;
  $7 = 0;
  HEAP32[($6 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = __DOUBLE_BITS_1(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46 = 0
      } else {
       $46 = 1
      }
      $47 = $46;
     } else {
      $47 = 0
     }
     $45 = $47;
    }
    if ($45) {
     break label$2
    }
    $9 = 1;
    $10 = 1072;
    $1 = -$1;
    i64toi32_i32$2 = __DOUBLE_BITS_1(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4 & 2048 | 0)) {
     break label$3
    }
    $9 = 1;
    $10 = 1075;
    break label$1;
   }
   $9 = $4 & 1 | 0;
   $10 = $9 ? 1078 : 1073;
   $7 = !$9;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $11 = $9 + 3 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 & -65537 | 0 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    $12 = $5 & 32 | 0;
    out($0 | 0, ($1 != $1 ? ($12 ? 1286 : 1561) : $12 ? 1335 : 1565) | 0, 3 | 0);
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
    $13 = ($11 | 0) > ($2 | 0) ? $11 : $2;
    break label$4;
   }
   $14 = $6 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1 = +frexp(+$1, $6 + 44 | 0 | 0);
       $1 = $1 + $1;
       if ($1 == 0.0) {
        break label$9
       }
       $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
       HEAP32[($6 + 44 | 0) >> 2] = $11 + -1 | 0;
       $15 = $5 | 32 | 0;
       if (($15 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $15 = $5 | 32 | 0;
      if (($15 | 0) == (97 | 0)) {
       break label$6
      }
      $16 = ($3 | 0) < (0 | 0) ? 6 : $3;
      $17 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $17 = $11 + -29 | 0;
     HEAP32[($6 + 44 | 0) >> 2] = $17;
     $16 = ($3 | 0) < (0 | 0) ? 6 : $3;
     $1 = $1 * 268435456.0;
    }
    $18 = ($6 + 48 | 0) + (($17 | 0) < (0 | 0) ? 0 : 288) | 0;
    $12 = $18;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1 < 4294967296.0 & $1 >= 0.0 | 0)) {
        break label$12
       }
       $11 = ~~$1 >>> 0;
       break label$11;
      }
      $11 = 0;
     }
     HEAP32[$12 >> 2] = $11;
     $12 = $12 + 4 | 0;
     $1 = ($1 - +($11 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($17 | 0) >= (1 | 0)) {
       break label$14
      }
      $3 = $17;
      $11 = $12;
      $19 = $18;
      break label$13;
     }
     $19 = $18;
     $3 = $17;
     label$15 : while (1) {
      $3 = ($3 | 0) < (29 | 0) ? $3 : 29;
      label$16 : {
       $11 = $12 + -4 | 0;
       if ($11 >>> 0 < $19 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $20 = $3;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $8 = 0;
       $8$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $167 = $11;
        i64toi32_i32$0 = $11;
        i64toi32_i32$1 = HEAP32[$11 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $169$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$3 = $20;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $171$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $8;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $173 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $173$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $171$hi;
        i64toi32_i32$1 = $48;
        i64toi32_i32$2 = $173$hi;
        i64toi32_i32$3 = $173;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $8 = i64toi32_i32$4;
        $8$hi = i64toi32_i32$5;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $8 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179 = i64toi32_i32$1;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $175$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $179$hi;
        i64toi32_i32$3 = $179;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$167 >> 2] = i64toi32_i32$2;
        $11 = $11 + -4 | 0;
        if ($11 >>> 0 >= $19 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $8$hi;
       $11 = $8;
       if (!$11) {
        break label$16
       }
       $19 = $19 + -4 | 0;
       HEAP32[$19 >> 2] = $11;
      }
      label$18 : {
       label$19 : while (1) {
        $11 = $12;
        if ($11 >>> 0 <= $19 >>> 0) {
         break label$18
        }
        $12 = $11 + -4 | 0;
        if (!(HEAP32[$12 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) - $3 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $12 = $11;
      if (($3 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3 | 0) > (-1 | 0)) {
      break label$20
     }
     $21 = ((($16 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $22 = ($15 | 0) == (102 | 0);
     label$21 : while (1) {
      $12 = 0 - $3 | 0;
      $23 = ($12 | 0) < (9 | 0) ? $12 : 9;
      label$22 : {
       label$23 : {
        if ($19 >>> 0 < $11 >>> 0) {
         break label$23
        }
        $12 = HEAP32[$19 >> 2] | 0;
        break label$22;
       }
       $24 = 1e9 >>> $23 | 0;
       $25 = (-1 << $23 | 0) ^ -1 | 0;
       $3 = 0;
       $12 = $19;
       label$24 : while (1) {
        $13 = HEAP32[$12 >> 2] | 0;
        HEAP32[$12 >> 2] = ($13 >>> $23 | 0) + $3 | 0;
        $3 = Math_imul($13 & $25 | 0, $24);
        $12 = $12 + 4 | 0;
        if ($12 >>> 0 < $11 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $12 = HEAP32[$19 >> 2] | 0;
       if (!$3) {
        break label$22
       }
       HEAP32[$11 >> 2] = $3;
       $11 = $11 + 4 | 0;
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + $23 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $19 = $19 + (!$12 << 2 | 0) | 0;
      $12 = $22 ? $18 : $19;
      $11 = (($11 - $12 | 0) >> 2 | 0 | 0) > ($21 | 0) ? $12 + ($21 << 2 | 0) | 0 : $11;
      if (($3 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3 = 0;
    label$25 : {
     if ($19 >>> 0 >= $11 >>> 0) {
      break label$25
     }
     $3 = Math_imul(($18 - $19 | 0) >> 2 | 0, 9);
     $12 = 10;
     $13 = HEAP32[$19 >> 2] | 0;
     if ($13 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3 = $3 + 1 | 0;
      $12 = Math_imul($12, 10);
      if ($13 >>> 0 >= $12 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $12 = ($16 - (($15 | 0) == (102 | 0) ? 0 : $3) | 0) - (($16 | 0) != (0 | 0) & ($15 | 0) == (103 | 0) | 0) | 0;
     if (($12 | 0) >= (Math_imul(($11 - $18 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $13 = $12 + 9216 | 0;
     $24 = ($13 | 0) / (9 | 0) | 0;
     $23 = (($24 << 2 | 0) + (($6 + 48 | 0) + (($17 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $12 = 10;
     label$28 : {
      $13 = $13 - Math_imul($24, 9) | 0;
      if (($13 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $12 = Math_imul($12, 10);
       $13 = $13 + 1 | 0;
       if (($13 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $25 = $23 + 4 | 0;
     label$30 : {
      label$31 : {
       $13 = HEAP32[$23 >> 2] | 0;
       $21 = ($13 >>> 0) / ($12 >>> 0) | 0;
       $24 = $13 - Math_imul($21, $12) | 0;
       if ($24) {
        break label$31
       }
       if (($25 | 0) == ($11 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($21 & 1 | 0) {
         break label$33
        }
        $1 = 9007199254740992.0;
        if (($12 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($23 >>> 0 <= $19 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($23 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1 = 9007199254740994.0;
      }
      $388 = ($25 | 0) == ($11 | 0) ? 1.0 : 1.5;
      $25 = $12 >>> 1 | 0;
      $26 = $24 >>> 0 < $25 >>> 0 ? .5 : ($24 | 0) == ($25 | 0) ? $388 : 1.5;
      label$34 : {
       if ($7) {
        break label$34
       }
       if ((HEAPU8[$10 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26 = -$26;
       $1 = -$1;
      }
      $13 = $13 - $24 | 0;
      HEAP32[$23 >> 2] = $13;
      if ($1 + $26 == $1) {
       break label$30
      }
      $12 = $13 + $12 | 0;
      HEAP32[$23 >> 2] = $12;
      label$35 : {
       if ($12 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$23 >> 2] = 0;
        label$37 : {
         $23 = $23 + -4 | 0;
         if ($23 >>> 0 >= $19 >>> 0) {
          break label$37
         }
         $19 = $19 + -4 | 0;
         HEAP32[$19 >> 2] = 0;
        }
        $12 = (HEAP32[$23 >> 2] | 0) + 1 | 0;
        HEAP32[$23 >> 2] = $12;
        if ($12 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3 = Math_imul(($18 - $19 | 0) >> 2 | 0, 9);
      $12 = 10;
      $13 = HEAP32[$19 >> 2] | 0;
      if ($13 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3 = $3 + 1 | 0;
       $12 = Math_imul($12, 10);
       if ($13 >>> 0 >= $12 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $12 = $23 + 4 | 0;
     $11 = $11 >>> 0 > $12 >>> 0 ? $12 : $11;
    }
    label$39 : {
     label$40 : while (1) {
      $12 = $11;
      $13 = $11 >>> 0 <= $19 >>> 0;
      if ($13) {
       break label$39
      }
      $11 = $12 + -4 | 0;
      if (!(HEAP32[$11 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($15 | 0) == (103 | 0)) {
       break label$42
      }
      $23 = $4 & 8 | 0;
      break label$41;
     }
     $11 = $16 ? $16 : 1;
     $23 = ($11 | 0) > ($3 | 0) & ($3 | 0) > (-5 | 0) | 0;
     $16 = ($23 ? $3 ^ -1 | 0 : -1) + $11 | 0;
     $5 = ($23 ? -1 : -2) + $5 | 0;
     $23 = $4 & 8 | 0;
     if ($23) {
      break label$41
     }
     $11 = -9;
     label$43 : {
      if ($13) {
       break label$43
      }
      $23 = HEAP32[($12 + -4 | 0) >> 2] | 0;
      if (!$23) {
       break label$43
      }
      $13 = 10;
      $11 = 0;
      if (($23 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $24 = $11;
       $11 = $11 + 1 | 0;
       $13 = Math_imul($13, 10);
       if (!(($23 >>> 0) % ($13 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $11 = $24 ^ -1 | 0;
     }
     $13 = Math_imul(($12 - $18 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $23 = 0;
      $11 = ($13 + $11 | 0) + -9 | 0;
      $11 = ($11 | 0) > (0 | 0) ? $11 : 0;
      $16 = ($16 | 0) < ($11 | 0) ? $16 : $11;
      break label$41;
     }
     $23 = 0;
     $11 = (($3 + $13 | 0) + $11 | 0) + -9 | 0;
     $11 = ($11 | 0) > (0 | 0) ? $11 : 0;
     $16 = ($16 | 0) < ($11 | 0) ? $16 : $11;
    }
    $13 = -1;
    $24 = $16 | $23 | 0;
    if (($16 | 0) > (($24 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $25 = ($16 + (($24 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $22 = $5 & -33 | 0;
      if (($22 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3 | 0) > ($25 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $11 = ($3 | 0) > (0 | 0) ? $3 : 0;
      break label$46;
     }
     label$48 : {
      $11 = $3 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11 = fmt_u(($3 ^ $11 | 0) - $11 | 0 | 0, i64toi32_i32$4 | 0, $14 | 0) | 0;
      if (($14 - $11 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $11 = $11 + -1 | 0;
       HEAP8[$11 >> 0] = 48;
       if (($14 - $11 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $21 = $11 + -2 | 0;
     HEAP8[$21 >> 0] = $5;
     $13 = -1;
     HEAP8[($11 + -1 | 0) >> 0] = ($3 | 0) < (0 | 0) ? 45 : 43;
     $11 = $14 - $21 | 0;
     if (($11 | 0) > ($25 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $13 = -1;
    $11 = $11 + $25 | 0;
    if (($11 | 0) > ($9 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $25 = $11 + $9 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $25 | 0, $4 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    pad($0 | 0, 48 | 0, $2 | 0, $25 | 0, $4 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($22 | 0) != (70 | 0)) {
         break label$53
        }
        $23 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $13 = $19 >>> 0 > $18 >>> 0 ? $18 : $19;
        $19 = $13;
        label$54 : while (1) {
         i64toi32_i32$5 = $19;
         i64toi32_i32$4 = HEAP32[$19 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($19 | 0) == ($13 | 0)) {
            break label$56
           }
           if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $11 = $11 + -1 | 0;
            HEAP8[$11 >> 0] = 48;
            if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($11 | 0) != ($3 | 0)) {
           break label$55
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $11 = $23;
         }
         out($0 | 0, $11 | 0, $3 - $11 | 0 | 0);
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 <= $18 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$24) {
          break label$58
         }
         out($0 | 0, 1626 | 0, 1 | 0);
        }
        if ($19 >>> 0 >= $12 >>> 0) {
         break label$52
        }
        if (($16 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $19;
          i64toi32_i32$0 = HEAP32[$19 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11 = fmt_u(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3 | 0) | 0;
          if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $11 = $11 + -1 | 0;
           HEAP8[$11 >> 0] = 48;
           if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         out($0 | 0, $11 | 0, (($16 | 0) < (9 | 0) ? $16 : 9) | 0);
         $11 = $16 + -9 | 0;
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 >= $12 >>> 0) {
          break label$51
         }
         $13 = ($16 | 0) > (9 | 0);
         $16 = $11;
         if ($13) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($16 | 0) < (0 | 0)) {
         break label$62
        }
        $24 = $12 >>> 0 > $19 >>> 0 ? $12 : $19 + 4 | 0;
        $18 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $12 = $19;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $12;
          i64toi32_i32$4 = HEAP32[$12 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
          if (($11 | 0) != ($3 | 0)) {
           break label$64
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $11 = $18;
         }
         label$65 : {
          label$66 : {
           if (($12 | 0) == ($19 | 0)) {
            break label$66
           }
           if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $11 = $11 + -1 | 0;
            HEAP8[$11 >> 0] = 48;
            if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          out($0 | 0, $11 | 0, 1 | 0);
          $11 = $11 + 1 | 0;
          if (!($16 | $23 | 0)) {
           break label$65
          }
          out($0 | 0, 1626 | 0, 1 | 0);
         }
         $13 = $3 - $11 | 0;
         out($0 | 0, $11 | 0, (($16 | 0) < ($13 | 0) ? $16 : $13) | 0);
         $16 = $16 - $13 | 0;
         $12 = $12 + 4 | 0;
         if ($12 >>> 0 >= $24 >>> 0) {
          break label$62
         }
         if (($16 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       pad($0 | 0, 48 | 0, $16 + 18 | 0 | 0, 18 | 0, 0 | 0);
       out($0 | 0, $21 | 0, $14 - $21 | 0 | 0);
       break label$50;
      }
      $11 = $16;
     }
     pad($0 | 0, 48 | 0, $11 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    pad($0 | 0, 32 | 0, $2 | 0, $25 | 0, $4 ^ 8192 | 0 | 0);
    $13 = ($25 | 0) > ($2 | 0) ? $25 : $2;
    break label$4;
   }
   $25 = $10 + ((($5 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $11 = 12 - $3 | 0;
    $26 = 16.0;
    label$69 : while (1) {
     $26 = $26 * 16.0;
     $11 = $11 + -1 | 0;
     if ($11) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$25 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1 = -($26 + (-$1 - $26));
     break label$68;
    }
    $1 = $1 + $26 - $26;
   }
   label$71 : {
    $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
    $852 = $11;
    $11 = $11 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11 = fmt_u(($852 ^ $11 | 0) - $11 | 0 | 0, i64toi32_i32$0 | 0, $14 | 0) | 0;
    if (($11 | 0) != ($14 | 0)) {
     break label$71
    }
    HEAP8[($6 + 15 | 0) >> 0] = 48;
    $11 = $6 + 15 | 0;
   }
   $23 = $9 | 2 | 0;
   $19 = $5 & 32 | 0;
   $12 = HEAP32[($6 + 44 | 0) >> 2] | 0;
   $24 = $11 + -2 | 0;
   HEAP8[$24 >> 0] = $5 + 15 | 0;
   HEAP8[($11 + -1 | 0) >> 0] = ($12 | 0) < (0 | 0) ? 45 : 43;
   $13 = $4 & 8 | 0;
   $12 = $6 + 16 | 0;
   label$72 : while (1) {
    $11 = $12;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1) < 2147483648.0)) {
       break label$74
      }
      $12 = ~~$1;
      break label$73;
     }
     $12 = -2147483648;
    }
    HEAP8[$11 >> 0] = HEAPU8[($12 + 18752 | 0) >> 0] | 0 | $19 | 0;
    $1 = ($1 - +($12 | 0)) * 16.0;
    label$75 : {
     $12 = $11 + 1 | 0;
     if (($12 - ($6 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($13) {
       break label$76
      }
      if (($3 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($11 + 1 | 0) >> 0] = 46;
     $12 = $11 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $13 = -1;
   $21 = $14 - $24 | 0;
   $11 = $23 + $21 | 0;
   if ((2147483645 - $11 | 0 | 0) < ($3 | 0)) {
    break label$4
   }
   label$77 : {
    label$78 : {
     if (!$3) {
      break label$78
     }
     $19 = $12 - ($6 + 16 | 0) | 0;
     if (($19 + -2 | 0 | 0) >= ($3 | 0)) {
      break label$78
     }
     $12 = $3 + 2 | 0;
     break label$77;
    }
    $19 = $12 - ($6 + 16 | 0) | 0;
    $12 = $19;
   }
   $11 = $11 + $12 | 0;
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 | 0);
   out($0 | 0, $25 | 0, $23 | 0);
   pad($0 | 0, 48 | 0, $2 | 0, $11 | 0, $4 ^ 65536 | 0 | 0);
   out($0 | 0, $6 + 16 | 0 | 0, $19 | 0);
   pad($0 | 0, 48 | 0, $12 - $19 | 0 | 0, 0 | 0, 0 | 0);
   out($0 | 0, $24 | 0, $21 | 0);
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
   $13 = ($11 | 0) > ($2 | 0) ? $11 : $2;
  }
  __stack_pointer = $6 + 560 | 0;
  return $13 | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $12 = 0, $12$hi = 0, $15 = 0, $15$hi = 0;
  $2 = ((HEAP32[$1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1 >> 2] = $2 + 16 | 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0 >> 3] = +__trunctfdf2($12 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$1 | 0);
 }
 
 function __DOUBLE_BITS_1($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  $5 = -1;
  HEAP32[($4 + 148 | 0) >> 2] = $1 ? $1 + -1 | 0 : 0;
  $0 = $1 ? $0 : $4 + 158 | 0;
  HEAP32[($4 + 144 | 0) >> 2] = $0;
  $4 = memset($4 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4 + 76 | 0) >> 2] = -1;
  HEAP32[($4 + 36 | 0) >> 2] = 60;
  HEAP32[($4 + 80 | 0) >> 2] = -1;
  HEAP32[($4 + 44 | 0) >> 2] = $4 + 159 | 0;
  HEAP32[($4 + 84 | 0) >> 2] = $4 + 144 | 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP32[(__errno_location() | 0) >> 2] = 61;
    break label$1;
   }
   HEAP8[$0 >> 0] = 0;
   $5 = vfprintf($4 | 0, $2 | 0, $3 | 0) | 0;
  }
  __stack_pointer = $4 + 160 | 0;
  return $5 | 0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $6 = (HEAP32[($0 + 20 | 0) >> 2] | 0) - $5 | 0;
   $6 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
   if (!$6) {
    break label$1
   }
   __memcpy(HEAP32[$3 >> 2] | 0 | 0, $5 | 0, $6 | 0) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $6 | 0;
   $4 = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $6 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $4;
  }
  $6 = HEAP32[$3 >> 2] | 0;
  label$2 : {
   $4 = $4 >>> 0 < $2 >>> 0 ? $4 : $2;
   if (!$4) {
    break label$2
   }
   __memcpy($6 | 0, $1 | 0, $4 | 0) | 0;
   $6 = (HEAP32[$3 >> 2] | 0) + $4 | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $4 | 0;
  }
  HEAP8[$6 >> 0] = 0;
  $3 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $3;
  HEAP32[($0 + 20 | 0) >> 2] = $3;
  return $2 | 0;
 }
 
 function vsprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return vsnprintf($0 | 0, 2147483647 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = $0;
  return -1 | 0;
 }
 
 function __syscall_getpid() {
  return 42 | 0;
 }
 
 function getpid() {
  return __syscall_getpid() | 0 | 0;
 }
 
 function __get_tp() {
  return 22260 | 0;
 }
 
 function init_pthread_self() {
  HEAP32[(0 + 22348 | 0) >> 2] = 22236;
  HEAP32[(0 + 22276 | 0) >> 2] = getpid() | 0;
 }
 
 function wcrtomb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 1;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[((__get_tp() | 0) + 88 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[(__errno_location() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0 + 1 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0 + 2 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0 + 3 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 25;
    }
    $3 = -1;
   }
   return $3 | 0;
  }
  HEAP8[$0 >> 0] = $1;
  return 1 | 0;
 }
 
 function wctomb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return wcrtomb($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function setThrew($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (HEAP32[(0 + 22372 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[22372 >> 2] = $0;
   HEAP32[(0 + 22376 | 0) >> 2] = $1;
  }
 }
 
 function setTempRet0($0) {
  $0 = $0 | 0;
  tempRet0 = $0;
 }
 
 function getTempRet0() {
  return tempRet0 | 0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $3 = 0, $3$hi = 0, $4$hi = 0, $4 = 0, $2 = 0, $5 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $17 = 0, $17$hi = 0, $19$hi = 0, $33 = 0, $33$hi = 0, $36 = 0, $38 = 0, $43 = 0, $43$hi = 0, $45$hi = 0, $73 = 0, $73$hi = 0, $77$hi = 0, $80 = 0, $80$hi = 0, $82 = 0, $82$hi = 0, $86 = 0, $86$hi = 0, $88 = 0, $89$hi = 0, $98$hi = 0, $105 = 0, $105$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17 = $44;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36 : $38) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43 = $46;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $4 = 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $5 = $48;
   if ($5 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $3 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0, $5 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, 15361 - $5 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73 = $49;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $3 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $3;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$3 = $4;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function emscripten_get_heap_size() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[(0 + 21004 | 0) >> 2] | 0;
  $2 = ($0 + 7 | 0) & -8 | 0;
  $0 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if ($0 >>> 0 <= $1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
     break label$3
    }
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 21004 | 0) >> 2] = $0;
   return $1 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $8 = 0, $3 = 0, $2 = 0, $11 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9 = 0, i64toi32_i32$2 = 0, $10 = 0, $1 = 0, $79 = 0, $92 = 0, $103 = 0, $111 = 0, $119 = 0, $209 = 0, $220 = 0, $228 = 0, $236 = 0, $271 = 0, $338 = 0, $345 = 0, $352 = 0, $443 = 0, $454 = 0, $462 = 0, $470 = 0, $1156 = 0, $1163 = 0, $1170 = 0, $1292 = 0, $1294 = 0, $1354 = 0, $1361 = 0, $1368 = 0, $1599 = 0, $1606 = 0, $1613 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2 = HEAP32[(0 + 22380 | 0) >> 2] | 0;
               $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
               $4 = $3 >>> 3 | 0;
               $0 = $2 >>> $4 | 0;
               if (!($0 & 3 | 0)) {
                break label$13
               }
               label$14 : {
                label$15 : {
                 $5 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
                 $4 = $5 << 3 | 0;
                 $0 = $4 + 22420 | 0;
                 $4 = HEAP32[($4 + 22428 | 0) >> 2] | 0;
                 $3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                 if (($0 | 0) != ($3 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 22380 | 0) >> 2] = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[($3 + 12 | 0) >> 2] = $0;
                HEAP32[($0 + 8 | 0) >> 2] = $3;
               }
               $0 = $4 + 8 | 0;
               $5 = $5 << 3 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = $5 | 3 | 0;
               $4 = $4 + $5 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $6 = HEAP32[(0 + 22388 | 0) >> 2] | 0;
              if ($3 >>> 0 <= $6 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79 = $0 << $4 | 0;
                 $0 = 2 << $4 | 0;
                 $0 = $79 & ($0 | (0 - $0 | 0) | 0) | 0;
                 $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                 $92 = $0;
                 $0 = ($0 >>> 12 | 0) & 16 | 0;
                 $4 = $92 >>> $0 | 0;
                 $5 = ($4 >>> 5 | 0) & 8 | 0;
                 $103 = $5 | $0 | 0;
                 $0 = $4 >>> $5 | 0;
                 $4 = ($0 >>> 2 | 0) & 4 | 0;
                 $111 = $103 | $4 | 0;
                 $0 = $0 >>> $4 | 0;
                 $4 = ($0 >>> 1 | 0) & 2 | 0;
                 $119 = $111 | $4 | 0;
                 $0 = $0 >>> $4 | 0;
                 $4 = ($0 >>> 1 | 0) & 1 | 0;
                 $4 = ($119 | $4 | 0) + ($0 >>> $4 | 0) | 0;
                 $0 = $4 << 3 | 0;
                 $5 = $0 + 22420 | 0;
                 $0 = HEAP32[($0 + 22428 | 0) >> 2] | 0;
                 $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                 if (($5 | 0) != ($7 | 0)) {
                  break label$18
                 }
                 $2 = $2 & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
                 HEAP32[(0 + 22380 | 0) >> 2] = $2;
                 break label$17;
                }
                HEAP32[($7 + 12 | 0) >> 2] = $5;
                HEAP32[($5 + 8 | 0) >> 2] = $7;
               }
               HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
               $7 = $0 + $3 | 0;
               $4 = $4 << 3 | 0;
               $5 = $4 - $3 | 0;
               HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
               HEAP32[($0 + $4 | 0) >> 2] = $5;
               label$19 : {
                if (!$6) {
                 break label$19
                }
                $3 = ($6 & -8 | 0) + 22420 | 0;
                $4 = HEAP32[(0 + 22400 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8 = 1 << ($6 >>> 3 | 0) | 0;
                  if ($2 & $8 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 22380 | 0) >> 2] = $2 | $8 | 0;
                  $8 = $3;
                  break label$20;
                 }
                 $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3 + 8 | 0) >> 2] = $4;
                HEAP32[($8 + 12 | 0) >> 2] = $4;
                HEAP32[($4 + 12 | 0) >> 2] = $3;
                HEAP32[($4 + 8 | 0) >> 2] = $8;
               }
               $0 = $0 + 8 | 0;
               HEAP32[(0 + 22400 | 0) >> 2] = $7;
               HEAP32[(0 + 22388 | 0) >> 2] = $5;
               break label$1;
              }
              $9 = HEAP32[(0 + 22384 | 0) >> 2] | 0;
              if (!$9) {
               break label$11
              }
              $0 = ($9 & (0 - $9 | 0) | 0) + -1 | 0;
              $209 = $0;
              $0 = ($0 >>> 12 | 0) & 16 | 0;
              $4 = $209 >>> $0 | 0;
              $5 = ($4 >>> 5 | 0) & 8 | 0;
              $220 = $5 | $0 | 0;
              $0 = $4 >>> $5 | 0;
              $4 = ($0 >>> 2 | 0) & 4 | 0;
              $228 = $220 | $4 | 0;
              $0 = $0 >>> $4 | 0;
              $4 = ($0 >>> 1 | 0) & 2 | 0;
              $236 = $228 | $4 | 0;
              $0 = $0 >>> $4 | 0;
              $4 = ($0 >>> 1 | 0) & 1 | 0;
              $7 = HEAP32[(((($236 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 22684 | 0) >> 2] | 0;
              $4 = ((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
              $5 = $7;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
                 if ($0) {
                  break label$24
                 }
                 $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
                 if (!$0) {
                  break label$22
                 }
                }
                $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                $271 = $5;
                $5 = $5 >>> 0 < $4 >>> 0;
                $4 = $5 ? $271 : $4;
                $7 = $5 ? $0 : $7;
                $5 = $0;
                continue label$23;
               };
              }
              $10 = HEAP32[($7 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8 = HEAP32[($7 + 12 | 0) >> 2] | 0;
               if (($8 | 0) == ($7 | 0)) {
                break label$25
               }
               $0 = HEAP32[($7 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 22396 | 0) >> 2] | 0;
               HEAP32[($0 + 12 | 0) >> 2] = $8;
               HEAP32[($8 + 8 | 0) >> 2] = $0;
               break label$2;
              }
              label$26 : {
               $5 = $7 + 20 | 0;
               $0 = HEAP32[$5 >> 2] | 0;
               if ($0) {
                break label$26
               }
               $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
               if (!$0) {
                break label$10
               }
               $5 = $7 + 16 | 0;
              }
              label$27 : while (1) {
               $11 = $5;
               $8 = $0;
               $5 = $0 + 20 | 0;
               $0 = HEAP32[$5 >> 2] | 0;
               if ($0) {
                continue label$27
               }
               $5 = $8 + 16 | 0;
               $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
               if ($0) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11 >> 2] = 0;
              break label$2;
             }
             $3 = -1;
             if ($0 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0 = $0 + 11 | 0;
             $3 = $0 & -8 | 0;
             $6 = HEAP32[(0 + 22384 | 0) >> 2] | 0;
             if (!$6) {
              break label$11
             }
             $11 = 0;
             label$28 : {
              if ($3 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11 = 31;
              if ($3 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0 = $0 >>> 8 | 0;
              $338 = $0;
              $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4 = $338 << $0 | 0;
              $345 = $4;
              $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5 = $345 << $4 | 0;
              $352 = $5;
              $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0 = (($352 << $5 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $5 | 0) | 0;
              $11 = ($0 << 1 | 0 | (($3 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4 = 0 - $3 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5 = HEAP32[(($11 << 2 | 0) + 22684 | 0) >> 2] | 0;
                 if ($5) {
                  break label$32
                 }
                 $0 = 0;
                 $8 = 0;
                 break label$31;
                }
                $0 = 0;
                $7 = $3 << (($11 | 0) == (31 | 0) ? 0 : 25 - ($11 >>> 1 | 0) | 0) | 0;
                $8 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                  if ($2 >>> 0 >= $4 >>> 0) {
                   break label$34
                  }
                  $4 = $2;
                  $8 = $5;
                  if ($4) {
                   break label$34
                  }
                  $4 = 0;
                  $8 = $5;
                  $0 = $5;
                  break label$30;
                 }
                 $2 = HEAP32[($5 + 20 | 0) >> 2] | 0;
                 $5 = HEAP32[(($5 + (($7 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0 = $2 ? (($2 | 0) == ($5 | 0) ? $0 : $2) : $0;
                 $7 = $7 << 1 | 0;
                 if ($5) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0 | $8 | 0) {
                 break label$35
                }
                $8 = 0;
                $0 = 2 << $11 | 0;
                $0 = ($0 | (0 - $0 | 0) | 0) & $6 | 0;
                if (!$0) {
                 break label$11
                }
                $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                $443 = $0;
                $0 = ($0 >>> 12 | 0) & 16 | 0;
                $5 = $443 >>> $0 | 0;
                $7 = ($5 >>> 5 | 0) & 8 | 0;
                $454 = $7 | $0 | 0;
                $0 = $5 >>> $7 | 0;
                $5 = ($0 >>> 2 | 0) & 4 | 0;
                $462 = $454 | $5 | 0;
                $0 = $0 >>> $5 | 0;
                $5 = ($0 >>> 1 | 0) & 2 | 0;
                $470 = $462 | $5 | 0;
                $0 = $0 >>> $5 | 0;
                $5 = ($0 >>> 1 | 0) & 1 | 0;
                $0 = HEAP32[(((($470 | $5 | 0) + ($0 >>> $5 | 0) | 0) << 2 | 0) + 22684 | 0) >> 2] | 0;
               }
               if (!$0) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
               $7 = $2 >>> 0 < $4 >>> 0;
               label$37 : {
                $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
                if ($5) {
                 break label$37
                }
                $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
               }
               $4 = $7 ? $2 : $4;
               $8 = $7 ? $0 : $8;
               $0 = $5;
               if ($0) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8) {
              break label$11
             }
             if ($4 >>> 0 >= ((HEAP32[(0 + 22388 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
              break label$11
             }
             $11 = HEAP32[($8 + 24 | 0) >> 2] | 0;
             label$38 : {
              $7 = HEAP32[($8 + 12 | 0) >> 2] | 0;
              if (($7 | 0) == ($8 | 0)) {
               break label$38
              }
              $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 22396 | 0) >> 2] | 0;
              HEAP32[($0 + 12 | 0) >> 2] = $7;
              HEAP32[($7 + 8 | 0) >> 2] = $0;
              break label$3;
             }
             label$39 : {
              $5 = $8 + 20 | 0;
              $0 = HEAP32[$5 >> 2] | 0;
              if ($0) {
               break label$39
              }
              $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
              if (!$0) {
               break label$9
              }
              $5 = $8 + 16 | 0;
             }
             label$40 : while (1) {
              $2 = $5;
              $7 = $0;
              $5 = $0 + 20 | 0;
              $0 = HEAP32[$5 >> 2] | 0;
              if ($0) {
               continue label$40
              }
              $5 = $7 + 16 | 0;
              $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
              if ($0) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0 = HEAP32[(0 + 22388 | 0) >> 2] | 0;
             if ($0 >>> 0 < $3 >>> 0) {
              break label$41
             }
             $4 = HEAP32[(0 + 22400 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5 = $0 - $3 | 0;
               if ($5 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 22388 | 0) >> 2] = $5;
               $7 = $4 + $3 | 0;
               HEAP32[(0 + 22400 | 0) >> 2] = $7;
               HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
               HEAP32[($4 + $0 | 0) >> 2] = $5;
               HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 22400 | 0) >> 2] = 0;
              HEAP32[(0 + 22388 | 0) >> 2] = 0;
              HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
              $0 = $4 + $0 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0 = $4 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $7 = HEAP32[(0 + 22392 | 0) >> 2] | 0;
             if ($7 >>> 0 <= $3 >>> 0) {
              break label$44
             }
             $4 = $7 - $3 | 0;
             HEAP32[(0 + 22392 | 0) >> 2] = $4;
             $0 = HEAP32[(0 + 22404 | 0) >> 2] | 0;
             $5 = $0 + $3 | 0;
             HEAP32[(0 + 22404 | 0) >> 2] = $5;
             HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
             HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 22852 | 0) >> 2] | 0)) {
               break label$46
              }
              $4 = HEAP32[(0 + 22860 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 22864 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 22868 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 22856 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 22860 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 22852 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 22872 | 0) >> 2] = 0;
             HEAP32[(0 + 22824 | 0) >> 2] = 0;
             $4 = 4096;
            }
            $0 = 0;
            $6 = $3 + 47 | 0;
            $2 = $4 + $6 | 0;
            $11 = 0 - $4 | 0;
            $8 = $2 & $11 | 0;
            if ($8 >>> 0 <= $3 >>> 0) {
             break label$1
            }
            $0 = 0;
            label$47 : {
             $4 = HEAP32[(0 + 22820 | 0) >> 2] | 0;
             if (!$4) {
              break label$47
             }
             $5 = HEAP32[(0 + 22812 | 0) >> 2] | 0;
             $9 = $5 + $8 | 0;
             if ($9 >>> 0 <= $5 >>> 0) {
              break label$1
             }
             if ($9 >>> 0 > $4 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 22824 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4 = HEAP32[(0 + 22404 | 0) >> 2] | 0;
               if (!$4) {
                break label$50
               }
               $0 = 22828;
               label$51 : while (1) {
                label$52 : {
                 $5 = HEAP32[$0 >> 2] | 0;
                 if ($5 >>> 0 > $4 >>> 0) {
                  break label$52
                 }
                 if (($5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
                  break label$49
                 }
                }
                $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                if ($0) {
                 continue label$51
                }
                break label$51;
               };
              }
              $7 = sbrk(0 | 0) | 0;
              if (($7 | 0) == (-1 | 0)) {
               break label$7
              }
              $2 = $8;
              label$53 : {
               $0 = HEAP32[(0 + 22856 | 0) >> 2] | 0;
               $4 = $0 + -1 | 0;
               if (!($4 & $7 | 0)) {
                break label$53
               }
               $2 = ($8 - $7 | 0) + (($4 + $7 | 0) & (0 - $0 | 0) | 0) | 0;
              }
              if ($2 >>> 0 <= $3 >>> 0) {
               break label$7
              }
              if ($2 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0 = HEAP32[(0 + 22820 | 0) >> 2] | 0;
               if (!$0) {
                break label$54
               }
               $4 = HEAP32[(0 + 22812 | 0) >> 2] | 0;
               $5 = $4 + $2 | 0;
               if ($5 >>> 0 <= $4 >>> 0) {
                break label$7
               }
               if ($5 >>> 0 > $0 >>> 0) {
                break label$7
               }
              }
              $0 = sbrk($2 | 0) | 0;
              if (($0 | 0) != ($7 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2 = ($2 - $7 | 0) & $11 | 0;
             if ($2 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $7 = sbrk($2 | 0) | 0;
             if (($7 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0 = $7;
            }
            label$55 : {
             if (($0 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3 + 48 | 0) >>> 0 <= $2 >>> 0) {
              break label$55
             }
             label$56 : {
              $4 = HEAP32[(0 + 22860 | 0) >> 2] | 0;
              $4 = (($6 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
              if ($4 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $7 = $0;
              break label$5;
             }
             label$57 : {
              if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2 = $4 + $2 | 0;
              $7 = $0;
              break label$5;
             }
             sbrk(0 - $2 | 0 | 0) | 0;
             break label$7;
            }
            $7 = $0;
            if (($0 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8 = 0;
           break label$2;
          }
          $7 = 0;
          break label$3;
         }
         if (($7 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 22824 | 0) >> 2] = HEAP32[(0 + 22824 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $7 = sbrk($8 | 0) | 0;
       $0 = sbrk(0 | 0) | 0;
       if (($7 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($7 >>> 0 >= $0 >>> 0) {
        break label$4
       }
       $2 = $0 - $7 | 0;
       if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0 = (HEAP32[(0 + 22812 | 0) >> 2] | 0) + $2 | 0;
      HEAP32[(0 + 22812 | 0) >> 2] = $0;
      label$58 : {
       if ($0 >>> 0 <= (HEAP32[(0 + 22816 | 0) >> 2] | 0) >>> 0) {
        break label$58
       }
       HEAP32[(0 + 22816 | 0) >> 2] = $0;
      }
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          $4 = HEAP32[(0 + 22404 | 0) >> 2] | 0;
          if (!$4) {
           break label$62
          }
          $0 = 22828;
          label$63 : while (1) {
           $5 = HEAP32[$0 >> 2] | 0;
           $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($7 | 0) == ($5 + $8 | 0 | 0)) {
            break label$61
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label$63
           }
           break label$60;
          };
         }
         label$64 : {
          label$65 : {
           $0 = HEAP32[(0 + 22396 | 0) >> 2] | 0;
           if (!$0) {
            break label$65
           }
           if ($7 >>> 0 >= $0 >>> 0) {
            break label$64
           }
          }
          HEAP32[(0 + 22396 | 0) >> 2] = $7;
         }
         $0 = 0;
         HEAP32[(0 + 22832 | 0) >> 2] = $2;
         HEAP32[(0 + 22828 | 0) >> 2] = $7;
         HEAP32[(0 + 22412 | 0) >> 2] = -1;
         HEAP32[(0 + 22416 | 0) >> 2] = HEAP32[(0 + 22852 | 0) >> 2] | 0;
         HEAP32[(0 + 22840 | 0) >> 2] = 0;
         label$66 : while (1) {
          $4 = $0 << 3 | 0;
          $5 = $4 + 22420 | 0;
          HEAP32[($4 + 22428 | 0) >> 2] = $5;
          HEAP32[($4 + 22432 | 0) >> 2] = $5;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != (32 | 0)) {
           continue label$66
          }
          break label$66;
         };
         $0 = $2 + -40 | 0;
         $4 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
         $5 = $0 - $4 | 0;
         HEAP32[(0 + 22392 | 0) >> 2] = $5;
         $4 = $7 + $4 | 0;
         HEAP32[(0 + 22404 | 0) >> 2] = $4;
         HEAP32[($4 + 4 | 0) >> 2] = $5 | 1 | 0;
         HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 22408 | 0) >> 2] = HEAP32[(0 + 22868 | 0) >> 2] | 0;
         break label$59;
        }
        if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$60
        }
        if ($4 >>> 0 < $5 >>> 0) {
         break label$60
        }
        if ($4 >>> 0 >= $7 >>> 0) {
         break label$60
        }
        HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
        $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
        $5 = $4 + $0 | 0;
        HEAP32[(0 + 22404 | 0) >> 2] = $5;
        $7 = (HEAP32[(0 + 22392 | 0) >> 2] | 0) + $2 | 0;
        $0 = $7 - $0 | 0;
        HEAP32[(0 + 22392 | 0) >> 2] = $0;
        HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 22408 | 0) >> 2] = HEAP32[(0 + 22868 | 0) >> 2] | 0;
        break label$59;
       }
       label$67 : {
        $8 = HEAP32[(0 + 22396 | 0) >> 2] | 0;
        if ($7 >>> 0 >= $8 >>> 0) {
         break label$67
        }
        HEAP32[(0 + 22396 | 0) >> 2] = $7;
        $8 = $7;
       }
       $5 = $7 + $2 | 0;
       $0 = 22828;
       label$68 : {
        label$69 : {
         label$70 : {
          label$71 : {
           label$72 : {
            label$73 : {
             label$74 : {
              label$75 : while (1) {
               if ((HEAP32[$0 >> 2] | 0 | 0) == ($5 | 0)) {
                break label$74
               }
               $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
               if ($0) {
                continue label$75
               }
               break label$73;
              };
             }
             if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$72
             }
            }
            $0 = 22828;
            label$76 : while (1) {
             label$77 : {
              $5 = HEAP32[$0 >> 2] | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$77
              }
              $5 = $5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$71
              }
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             continue label$76;
            };
           }
           HEAP32[$0 >> 2] = $7;
           HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
           $11 = $7 + (($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11 + 4 | 0) >> 2] = $3 | 3 | 0;
           $2 = $5 + (($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0) | 0;
           $3 = $11 + $3 | 0;
           $0 = $2 - $3 | 0;
           label$78 : {
            if (($2 | 0) != ($4 | 0)) {
             break label$78
            }
            HEAP32[(0 + 22404 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 22392 | 0) >> 2] | 0) + $0 | 0;
            HEAP32[(0 + 22392 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            break label$69;
           }
           label$79 : {
            if (($2 | 0) != (HEAP32[(0 + 22400 | 0) >> 2] | 0 | 0)) {
             break label$79
            }
            HEAP32[(0 + 22400 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 22388 | 0) >> 2] | 0) + $0 | 0;
            HEAP32[(0 + 22388 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            HEAP32[($3 + $0 | 0) >> 2] = $0;
            break label$69;
           }
           label$80 : {
            $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
            if (($4 & 3 | 0 | 0) != (1 | 0)) {
             break label$80
            }
            $6 = $4 & -8 | 0;
            label$81 : {
             label$82 : {
              if ($4 >>> 0 > 255 >>> 0) {
               break label$82
              }
              $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
              $8 = $4 >>> 3 | 0;
              $7 = ($8 << 3 | 0) + 22420 | 0;
              label$83 : {
               $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
               if (($4 | 0) != ($5 | 0)) {
                break label$83
               }
               HEAP32[(0 + 22380 | 0) >> 2] = (HEAP32[(0 + 22380 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($5 + 12 | 0) >> 2] = $4;
              HEAP32[($4 + 8 | 0) >> 2] = $5;
              break label$81;
             }
             $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
             label$84 : {
              label$85 : {
               $7 = HEAP32[($2 + 12 | 0) >> 2] | 0;
               if (($7 | 0) == ($2 | 0)) {
                break label$85
               }
               $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
               HEAP32[($4 + 12 | 0) >> 2] = $7;
               HEAP32[($7 + 8 | 0) >> 2] = $4;
               break label$84;
              }
              label$86 : {
               $4 = $2 + 20 | 0;
               $5 = HEAP32[$4 >> 2] | 0;
               if ($5) {
                break label$86
               }
               $4 = $2 + 16 | 0;
               $5 = HEAP32[$4 >> 2] | 0;
               if ($5) {
                break label$86
               }
               $7 = 0;
               break label$84;
              }
              label$87 : while (1) {
               $8 = $4;
               $7 = $5;
               $4 = $5 + 20 | 0;
               $5 = HEAP32[$4 >> 2] | 0;
               if ($5) {
                continue label$87
               }
               $4 = $7 + 16 | 0;
               $5 = HEAP32[($7 + 16 | 0) >> 2] | 0;
               if ($5) {
                continue label$87
               }
               break label$87;
              };
              HEAP32[$8 >> 2] = 0;
             }
             if (!$9) {
              break label$81
             }
             label$88 : {
              label$89 : {
               $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
               $4 = ($5 << 2 | 0) + 22684 | 0;
               if (($2 | 0) != (HEAP32[$4 >> 2] | 0 | 0)) {
                break label$89
               }
               HEAP32[$4 >> 2] = $7;
               if ($7) {
                break label$88
               }
               HEAP32[(0 + 22384 | 0) >> 2] = (HEAP32[(0 + 22384 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $7;
              if (!$7) {
               break label$81
              }
             }
             HEAP32[($7 + 24 | 0) >> 2] = $9;
             label$90 : {
              $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
              if (!$4) {
               break label$90
              }
              HEAP32[($7 + 16 | 0) >> 2] = $4;
              HEAP32[($4 + 24 | 0) >> 2] = $7;
             }
             $4 = HEAP32[($2 + 20 | 0) >> 2] | 0;
             if (!$4) {
              break label$81
             }
             HEAP32[($7 + 20 | 0) >> 2] = $4;
             HEAP32[($4 + 24 | 0) >> 2] = $7;
            }
            $0 = $6 + $0 | 0;
            $2 = $2 + $6 | 0;
            $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
           }
           HEAP32[($2 + 4 | 0) >> 2] = $4 & -2 | 0;
           HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
           HEAP32[($3 + $0 | 0) >> 2] = $0;
           label$91 : {
            if ($0 >>> 0 > 255 >>> 0) {
             break label$91
            }
            $4 = ($0 & -8 | 0) + 22420 | 0;
            label$92 : {
             label$93 : {
              $5 = HEAP32[(0 + 22380 | 0) >> 2] | 0;
              $0 = 1 << ($0 >>> 3 | 0) | 0;
              if ($5 & $0 | 0) {
               break label$93
              }
              HEAP32[(0 + 22380 | 0) >> 2] = $5 | $0 | 0;
              $0 = $4;
              break label$92;
             }
             $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($4 + 8 | 0) >> 2] = $3;
            HEAP32[($0 + 12 | 0) >> 2] = $3;
            HEAP32[($3 + 12 | 0) >> 2] = $4;
            HEAP32[($3 + 8 | 0) >> 2] = $0;
            break label$69;
           }
           $4 = 31;
           label$94 : {
            if ($0 >>> 0 > 16777215 >>> 0) {
             break label$94
            }
            $4 = $0 >>> 8 | 0;
            $1156 = $4;
            $4 = (($4 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $5 = $1156 << $4 | 0;
            $1163 = $5;
            $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $7 = $1163 << $5 | 0;
            $1170 = $7;
            $7 = (($7 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4 = (($1170 << $7 | 0) >>> 15 | 0) - ($4 | $5 | 0 | $7 | 0) | 0;
            $4 = ($4 << 1 | 0 | (($0 >>> ($4 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3 + 28 | 0) >> 2] = $4;
           i64toi32_i32$1 = $3;
           i64toi32_i32$0 = 0;
           HEAP32[($3 + 16 | 0) >> 2] = 0;
           HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
           $5 = ($4 << 2 | 0) + 22684 | 0;
           label$95 : {
            label$96 : {
             $7 = HEAP32[(0 + 22384 | 0) >> 2] | 0;
             $8 = 1 << $4 | 0;
             if ($7 & $8 | 0) {
              break label$96
             }
             HEAP32[(0 + 22384 | 0) >> 2] = $7 | $8 | 0;
             HEAP32[$5 >> 2] = $3;
             HEAP32[($3 + 24 | 0) >> 2] = $5;
             break label$95;
            }
            $4 = $0 << (($4 | 0) == (31 | 0) ? 0 : 25 - ($4 >>> 1 | 0) | 0) | 0;
            $7 = HEAP32[$5 >> 2] | 0;
            label$97 : while (1) {
             $5 = $7;
             if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
              break label$70
             }
             $7 = $4 >>> 29 | 0;
             $4 = $4 << 1 | 0;
             $8 = ($5 + ($7 & 4 | 0) | 0) + 16 | 0;
             $7 = HEAP32[$8 >> 2] | 0;
             if ($7) {
              continue label$97
             }
             break label$97;
            };
            HEAP32[$8 >> 2] = $3;
            HEAP32[($3 + 24 | 0) >> 2] = $5;
           }
           HEAP32[($3 + 12 | 0) >> 2] = $3;
           HEAP32[($3 + 8 | 0) >> 2] = $3;
           break label$69;
          }
          $0 = $2 + -40 | 0;
          $8 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
          $11 = $0 - $8 | 0;
          HEAP32[(0 + 22392 | 0) >> 2] = $11;
          $8 = $7 + $8 | 0;
          HEAP32[(0 + 22404 | 0) >> 2] = $8;
          HEAP32[($8 + 4 | 0) >> 2] = $11 | 1 | 0;
          HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 22408 | 0) >> 2] = HEAP32[(0 + 22868 | 0) >> 2] | 0;
          $0 = ($5 + (($5 + -39 | 0) & 7 | 0 ? (39 - $5 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
          HEAP32[($8 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 22836 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 22840 | 0) >> 2] | 0;
          $1292 = i64toi32_i32$0;
          i64toi32_i32$0 = $8 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1292;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 22828 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 22832 | 0) >> 2] | 0;
          $1294 = i64toi32_i32$1;
          i64toi32_i32$1 = $8;
          HEAP32[($8 + 8 | 0) >> 2] = $1294;
          HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 22836 | 0) >> 2] = $8 + 8 | 0;
          HEAP32[(0 + 22832 | 0) >> 2] = $2;
          HEAP32[(0 + 22828 | 0) >> 2] = $7;
          HEAP32[(0 + 22840 | 0) >> 2] = 0;
          $0 = $8 + 24 | 0;
          label$98 : while (1) {
           HEAP32[($0 + 4 | 0) >> 2] = 7;
           $7 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($7 >>> 0 < $5 >>> 0) {
            continue label$98
           }
           break label$98;
          };
          if (($8 | 0) == ($4 | 0)) {
           break label$59
          }
          HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
          $7 = $8 - $4 | 0;
          HEAP32[($4 + 4 | 0) >> 2] = $7 | 1 | 0;
          HEAP32[$8 >> 2] = $7;
          label$99 : {
           if ($7 >>> 0 > 255 >>> 0) {
            break label$99
           }
           $0 = ($7 & -8 | 0) + 22420 | 0;
           label$100 : {
            label$101 : {
             $5 = HEAP32[(0 + 22380 | 0) >> 2] | 0;
             $7 = 1 << ($7 >>> 3 | 0) | 0;
             if ($5 & $7 | 0) {
              break label$101
             }
             HEAP32[(0 + 22380 | 0) >> 2] = $5 | $7 | 0;
             $5 = $0;
             break label$100;
            }
            $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0 + 8 | 0) >> 2] = $4;
           HEAP32[($5 + 12 | 0) >> 2] = $4;
           HEAP32[($4 + 12 | 0) >> 2] = $0;
           HEAP32[($4 + 8 | 0) >> 2] = $5;
           break label$59;
          }
          $0 = 31;
          label$102 : {
           if ($7 >>> 0 > 16777215 >>> 0) {
            break label$102
           }
           $0 = $7 >>> 8 | 0;
           $1354 = $0;
           $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5 = $1354 << $0 | 0;
           $1361 = $5;
           $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $8 = $1361 << $5 | 0;
           $1368 = $8;
           $8 = (($8 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0 = (($1368 << $8 | 0) >>> 15 | 0) - ($0 | $5 | 0 | $8 | 0) | 0;
           $0 = ($0 << 1 | 0 | (($7 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          HEAP32[($4 + 28 | 0) >> 2] = $0;
          i64toi32_i32$1 = $4;
          i64toi32_i32$0 = 0;
          HEAP32[($4 + 16 | 0) >> 2] = 0;
          HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
          $5 = ($0 << 2 | 0) + 22684 | 0;
          label$103 : {
           label$104 : {
            $8 = HEAP32[(0 + 22384 | 0) >> 2] | 0;
            $2 = 1 << $0 | 0;
            if ($8 & $2 | 0) {
             break label$104
            }
            HEAP32[(0 + 22384 | 0) >> 2] = $8 | $2 | 0;
            HEAP32[$5 >> 2] = $4;
            HEAP32[($4 + 24 | 0) >> 2] = $5;
            break label$103;
           }
           $0 = $7 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
           $8 = HEAP32[$5 >> 2] | 0;
           label$105 : while (1) {
            $5 = $8;
            if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7 | 0)) {
             break label$68
            }
            $8 = $0 >>> 29 | 0;
            $0 = $0 << 1 | 0;
            $2 = ($5 + ($8 & 4 | 0) | 0) + 16 | 0;
            $8 = HEAP32[$2 >> 2] | 0;
            if ($8) {
             continue label$105
            }
            break label$105;
           };
           HEAP32[$2 >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $5;
          }
          HEAP32[($4 + 12 | 0) >> 2] = $4;
          HEAP32[($4 + 8 | 0) >> 2] = $4;
          break label$59;
         }
         $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $3;
         HEAP32[($5 + 8 | 0) >> 2] = $3;
         HEAP32[($3 + 24 | 0) >> 2] = 0;
         HEAP32[($3 + 12 | 0) >> 2] = $5;
         HEAP32[($3 + 8 | 0) >> 2] = $0;
        }
        $0 = $11 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($5 + 8 | 0) >> 2] = $4;
       HEAP32[($4 + 24 | 0) >> 2] = 0;
       HEAP32[($4 + 12 | 0) >> 2] = $5;
       HEAP32[($4 + 8 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 22392 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break label$4
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 22392 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 22404 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 22404 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 48;
     $0 = 0;
     break label$1;
    }
    label$106 : {
     if (!$11) {
      break label$106
     }
     label$107 : {
      label$108 : {
       $5 = HEAP32[($8 + 28 | 0) >> 2] | 0;
       $0 = ($5 << 2 | 0) + 22684 | 0;
       if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
        break label$108
       }
       HEAP32[$0 >> 2] = $7;
       if ($7) {
        break label$107
       }
       $6 = $6 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       HEAP32[(0 + 22384 | 0) >> 2] = $6;
       break label$106;
      }
      HEAP32[($11 + ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $7;
      if (!$7) {
       break label$106
      }
     }
     HEAP32[($7 + 24 | 0) >> 2] = $11;
     label$109 : {
      $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      if (!$0) {
       break label$109
      }
      HEAP32[($7 + 16 | 0) >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $7;
     }
     $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (!$0) {
      break label$106
     }
     HEAP32[($7 + 20 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $7;
    }
    label$110 : {
     label$111 : {
      if ($4 >>> 0 > 15 >>> 0) {
       break label$111
      }
      $0 = $4 + $3 | 0;
      HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
      $0 = $8 + $0 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$110;
     }
     HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
     $7 = $8 + $3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = $4 | 1 | 0;
     HEAP32[($7 + $4 | 0) >> 2] = $4;
     label$112 : {
      if ($4 >>> 0 > 255 >>> 0) {
       break label$112
      }
      $0 = ($4 & -8 | 0) + 22420 | 0;
      label$113 : {
       label$114 : {
        $5 = HEAP32[(0 + 22380 | 0) >> 2] | 0;
        $4 = 1 << ($4 >>> 3 | 0) | 0;
        if ($5 & $4 | 0) {
         break label$114
        }
        HEAP32[(0 + 22380 | 0) >> 2] = $5 | $4 | 0;
        $4 = $0;
        break label$113;
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[($4 + 12 | 0) >> 2] = $7;
      HEAP32[($7 + 12 | 0) >> 2] = $0;
      HEAP32[($7 + 8 | 0) >> 2] = $4;
      break label$110;
     }
     $0 = 31;
     label$115 : {
      if ($4 >>> 0 > 16777215 >>> 0) {
       break label$115
      }
      $0 = $4 >>> 8 | 0;
      $1599 = $0;
      $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5 = $1599 << $0 | 0;
      $1606 = $5;
      $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3 = $1606 << $5 | 0;
      $1613 = $3;
      $3 = (($3 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0 = (($1613 << $3 | 0) >>> 15 | 0) - ($0 | $5 | 0 | $3 | 0) | 0;
      $0 = ($0 << 1 | 0 | (($4 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($7 + 28 | 0) >> 2] = $0;
     i64toi32_i32$1 = $7;
     i64toi32_i32$0 = 0;
     HEAP32[($7 + 16 | 0) >> 2] = 0;
     HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5 = ($0 << 2 | 0) + 22684 | 0;
     label$116 : {
      label$117 : {
       label$118 : {
        $3 = 1 << $0 | 0;
        if ($6 & $3 | 0) {
         break label$118
        }
        HEAP32[(0 + 22384 | 0) >> 2] = $6 | $3 | 0;
        HEAP32[$5 >> 2] = $7;
        HEAP32[($7 + 24 | 0) >> 2] = $5;
        break label$117;
       }
       $0 = $4 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
       $3 = HEAP32[$5 >> 2] | 0;
       label$119 : while (1) {
        $5 = $3;
        if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4 | 0)) {
         break label$116
        }
        $3 = $0 >>> 29 | 0;
        $0 = $0 << 1 | 0;
        $2 = ($5 + ($3 & 4 | 0) | 0) + 16 | 0;
        $3 = HEAP32[$2 >> 2] | 0;
        if ($3) {
         continue label$119
        }
        break label$119;
       };
       HEAP32[$2 >> 2] = $7;
       HEAP32[($7 + 24 | 0) >> 2] = $5;
      }
      HEAP32[($7 + 12 | 0) >> 2] = $7;
      HEAP32[($7 + 8 | 0) >> 2] = $7;
      break label$110;
     }
     $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7;
     HEAP32[($5 + 8 | 0) >> 2] = $7;
     HEAP32[($7 + 24 | 0) >> 2] = 0;
     HEAP32[($7 + 12 | 0) >> 2] = $5;
     HEAP32[($7 + 8 | 0) >> 2] = $0;
    }
    $0 = $8 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10) {
     break label$120
    }
    label$121 : {
     label$122 : {
      $5 = HEAP32[($7 + 28 | 0) >> 2] | 0;
      $0 = ($5 << 2 | 0) + 22684 | 0;
      if (($7 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$122
      }
      HEAP32[$0 >> 2] = $8;
      if ($8) {
       break label$121
      }
      HEAP32[(0 + 22384 | 0) >> 2] = $9 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
      break label$120;
     }
     HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($7 | 0) ? 16 : 20) | 0) >> 2] = $8;
     if (!$8) {
      break label$120
     }
    }
    HEAP32[($8 + 24 | 0) >> 2] = $10;
    label$123 : {
     $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
     if (!$0) {
      break label$123
     }
     HEAP32[($8 + 16 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    $0 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break label$120
    }
    HEAP32[($8 + 20 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = $8;
   }
   label$124 : {
    label$125 : {
     if ($4 >>> 0 > 15 >>> 0) {
      break label$125
     }
     $0 = $4 + $3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = $0 | 3 | 0;
     $0 = $7 + $0 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$124;
    }
    HEAP32[($7 + 4 | 0) >> 2] = $3 | 3 | 0;
    $5 = $7 + $3 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
    HEAP32[($5 + $4 | 0) >> 2] = $4;
    label$126 : {
     if (!$6) {
      break label$126
     }
     $3 = ($6 & -8 | 0) + 22420 | 0;
     $0 = HEAP32[(0 + 22400 | 0) >> 2] | 0;
     label$127 : {
      label$128 : {
       $8 = 1 << ($6 >>> 3 | 0) | 0;
       if ($8 & $2 | 0) {
        break label$128
       }
       HEAP32[(0 + 22380 | 0) >> 2] = $8 | $2 | 0;
       $8 = $3;
       break label$127;
      }
      $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3 + 8 | 0) >> 2] = $0;
     HEAP32[($8 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $3;
     HEAP32[($0 + 8 | 0) >> 2] = $8;
    }
    HEAP32[(0 + 22400 | 0) >> 2] = $5;
    HEAP32[(0 + 22388 | 0) >> 2] = $4;
   }
   $0 = $7 + 8 | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $2 = 0, $6 = 0, $1 = 0, $4 = 0, $3 = 0, $5 = 0, $7 = 0, $378 = 0, $385 = 0, $392 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -8 | 0;
   $2 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $0 = $2 & -8 | 0;
   $3 = $1 + $0 | 0;
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    if (!($2 & 3 | 0)) {
     break label$1
    }
    $2 = HEAP32[$1 >> 2] | 0;
    $1 = $1 - $2 | 0;
    $4 = HEAP32[(0 + 22396 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $2 + $0 | 0;
    label$3 : {
     if (($1 | 0) == (HEAP32[(0 + 22400 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      $5 = $2 >>> 3 | 0;
      $6 = ($5 << 3 | 0) + 22420 | 0;
      label$5 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) != ($4 | 0)) {
        break label$5
       }
       HEAP32[(0 + 22380 | 0) >> 2] = (HEAP32[(0 + 22380 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4 + 12 | 0) >> 2] = $2;
      HEAP32[($2 + 8 | 0) >> 2] = $4;
      break label$2;
     }
     $7 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$7
       }
       $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       HEAP32[($2 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $2;
       break label$6;
      }
      label$8 : {
       $2 = $1 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $2 = $1 + 16 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $6 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5 = $2;
       $6 = $4;
       $2 = $6 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        continue label$9
       }
       $2 = $6 + 16 | 0;
       $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
       $2 = ($4 << 2 | 0) + 22684 | 0;
       if (($1 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
        break label$11
       }
       HEAP32[$2 >> 2] = $6;
       if ($6) {
        break label$10
       }
       HEAP32[(0 + 22384 | 0) >> 2] = (HEAP32[(0 + 22384 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$2
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $7;
     label$12 : {
      $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      if (!$2) {
       break label$12
      }
      HEAP32[($6 + 16 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
     HEAP32[($6 + 20 | 0) >> 2] = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $6;
     break label$2;
    }
    $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (($2 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 22388 | 0) >> 2] = $0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
    return;
   }
   if ($1 >>> 0 >= $3 >>> 0) {
    break label$1
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!($2 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($3 | 0) != (HEAP32[(0 + 22404 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 22404 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 22392 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 22392 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      if (($1 | 0) != (HEAP32[(0 + 22400 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 22388 | 0) >> 2] = 0;
      HEAP32[(0 + 22400 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($3 | 0) != (HEAP32[(0 + 22400 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 22400 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 22388 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 22388 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      return;
     }
     $0 = ($2 & -8 | 0) + $0 | 0;
     label$17 : {
      label$18 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       $5 = $2 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 22420 | 0;
       label$19 : {
        $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($2 | 0) != ($4 | 0)) {
         break label$19
        }
        HEAP32[(0 + 22380 | 0) >> 2] = (HEAP32[(0 + 22380 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $2;
       HEAP32[($2 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$21
        }
        $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 22396 | 0) >> 2] | 0;
        HEAP32[($2 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $2;
        break label$20;
       }
       label$22 : {
        $2 = $3 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $2 = $3 + 16 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $2;
        $6 = $4;
        $2 = $6 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         continue label$23
        }
        $2 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        $2 = ($4 << 2 | 0) + 22684 | 0;
        if (($3 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$2 >> 2] = $6;
        if ($6) {
         break label$24
        }
        HEAP32[(0 + 22384 | 0) >> 2] = (HEAP32[(0 + 22384 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($3 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $2;
       HEAP32[($2 + 24 | 0) >> 2] = $6;
      }
      $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     if (($1 | 0) != (HEAP32[(0 + 22400 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 22388 | 0) >> 2] = $0;
     return;
    }
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
   }
   label$27 : {
    if ($0 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2 = ($0 & -8 | 0) + 22420 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 22380 | 0) >> 2] | 0;
      $0 = 1 << ($0 >>> 3 | 0) | 0;
      if ($4 & $0 | 0) {
       break label$29
      }
      HEAP32[(0 + 22380 | 0) >> 2] = $4 | $0 | 0;
      $0 = $2;
      break label$28;
     }
     $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2 + 8 | 0) >> 2] = $1;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $2;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
    return;
   }
   $2 = 31;
   label$30 : {
    if ($0 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2 = $0 >>> 8 | 0;
    $378 = $2;
    $2 = (($2 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $378 << $2 | 0;
    $385 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6 = $385 << $4 | 0;
    $392 = $6;
    $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2 = (($392 << $6 | 0) >>> 15 | 0) - ($2 | $4 | 0 | $6 | 0) | 0;
    $2 = ($2 << 1 | 0 | (($0 >>> ($2 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   $4 = ($2 << 2 | 0) + 22684 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6 = HEAP32[(0 + 22384 | 0) >> 2] | 0;
       $3 = 1 << $2 | 0;
       if ($6 & $3 | 0) {
        break label$34
       }
       HEAP32[(0 + 22384 | 0) >> 2] = $6 | $3 | 0;
       HEAP32[$4 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
       break label$33;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $6 = HEAP32[$4 >> 2] | 0;
      label$35 : while (1) {
       $4 = $6;
       if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break label$32
       }
       $6 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $3 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
       $6 = HEAP32[$3 >> 2] | 0;
       if ($6) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $4;
     }
     HEAP32[($1 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 8 | 0) >> 2] = $1;
     break label$31;
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
   }
   $1 = (HEAP32[(0 + 22412 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 22412 | 0) >> 2] = $1 ? $1 : -1;
  }
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0 ? $0 : 1;
  label$1 : {
   label$2 : while (1) {
    $0 = dlmalloc($1 | 0) | 0;
    if ($0) {
     break label$1
    }
    label$3 : {
     $0 = std__get_new_handler_28_29() | 0;
     if (!$0) {
      break label$3
     }
     FUNCTION_TABLE[$0 | 0]();
     continue label$2;
    }
    break label$2;
   };
   __cxa_throw(std__bad_alloc__bad_alloc_28_29(__cxa_allocate_exception(4 | 0) | 0 | 0) | 0 | 0, 19492 | 0, 48 | 0);
   abort();
  }
  return $0 | 0;
 }
 
 function operator_20new_5b_5d_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return operator_20new_28unsigned_20long_29($0 | 0) | 0 | 0;
 }
 
 function operator_20delete_28void__29($0) {
  $0 = $0 | 0;
  dlfree($0 | 0);
 }
 
 function operator_20delete_5b_5d_28void__29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__exception__exception_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 19408 + 8 | 0;
  return $0 | 0;
 }
 
 function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = strlen($1 | 0) | 0;
  $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$0 >> 2] = __memcpy(std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($3 | 0) | 0 | 0, $1 | 0, $2 + 1 | 0 | 0) | 0;
  return $0 | 0;
 }
 
 function std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($0) {
  $0 = $0 | 0;
  return $0 + 12 | 0 | 0;
 }
 
 function std__logic_error__logic_error_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = std__exception__exception_28_29($0 | 0) | 0;
  HEAP32[$0 >> 2] = 19516 + 8 | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_iii(61 | 0, $0 + 4 | 0 | 0, $1 | 0) | 0;
  $1 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($1 | 0) == (1 | 0)) {
    break label$1
   }
   return $0 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2____libcpp_refstring____uses_refcount_28_29_20const($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_size_28_29_20const($0 | 0) | 0 | 0;
  }
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_28_29_20const($0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 10;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   $1 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_28_29_20const($0 | 0) | 0) + -1 | 0;
  }
  return $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_28_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_28_29($0 | 0) | 0 | 0;
  }
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_28char__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_28unsigned_20long_29($0 | 0, $2 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______invalidate_iterators_past_28unsigned_20long_29($0 | 0, $2 | 0);
  HEAP8[($3 + 15 | 0) >> 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $2 | 0 | 0, $3 + 15 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  label$1 : {
   $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____max_size_28_29_20const($0 | 0) | 0;
   if (($9 + ($1 ^ -1 | 0) | 0) >>> 0 < $2 >>> 0) {
    break label$1
   }
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_28_29($0 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9 >>> 1 | 0) + -16 | 0) >>> 0 <= $1 >>> 0) {
      break label$3
     }
     HEAP32[($8 + 8 | 0) >> 2] = $1 << 1 | 0;
     HEAP32[($8 + 12 | 0) >> 2] = $2 + $1 | 0;
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_28unsigned_20long_29(HEAP32[(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 12 | 0 | 0, $8 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2 = $9 + -1 | 0;
   }
   $11 = $2 + 1 | 0;
   $2 = std____2__allocator_traits_std____2__allocator_char____allocate_28std____2__allocator_char___2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_28_29($0 | 0) | 0 | 0, $11 | 0) | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______invalidate_all_iterators_28_29($0 | 0);
   label$4 : {
    if (!$4) {
     break label$4
    }
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2 | 0) | 0 | 0, char__20std____2____to_address_char__28char__29($10 | 0) | 0 | 0, $4 | 0) | 0;
   }
   label$5 : {
    if (!$6) {
     break label$5
    }
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2 | 0) | 0) + $4 | 0 | 0, $7 | 0, $6 | 0) | 0;
   }
   $7 = $5 + $4 | 0;
   $9 = $3 - $7 | 0;
   label$6 : {
    if (($3 | 0) == ($7 | 0)) {
     break label$6
    }
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(((char__20std____2____to_address_char__28char__29($2 | 0) | 0) + $4 | 0) + $6 | 0 | 0, ((char__20std____2____to_address_char__28char__29($10 | 0) | 0) + $4 | 0) + $5 | 0 | 0, $9 | 0) | 0;
   }
   label$7 : {
    $1 = $1 + 1 | 0;
    if (($1 | 0) == (11 | 0)) {
     break label$7
    }
    std____2__allocator_traits_std____2__allocator_char____deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_28_29($0 | 0) | 0 | 0, $10 | 0, $1 | 0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_28char__29($0 | 0, $2 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_28unsigned_20long_29($0 | 0, $11 | 0);
   $4 = ($6 + $4 | 0) + $9 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_28unsigned_20long_29($0 | 0, $4 | 0);
   HEAP8[($8 + 7 | 0) >> 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $4 | 0 | 0, $8 + 7 | 0 | 0);
   __stack_pointer = $8 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_28_29_20const($0 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_size_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const($0 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAPU8[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const($0 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_28_29_20const($0) {
  $0 = $0 | 0;
  return (HEAP32[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29_20const($0 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_28unsigned_20long_29($0 | 0, $1 | 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_28unsigned_20long_29($0 | 0, $1 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______invalidate_iterators_past_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  return (unsigned_20long_20std____2__allocator_traits_std____2__allocator_char____max_size_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_28_29_20const($0 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $7 = 0;
  $1 = 10;
  label$1 : {
   if ($0 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______align_it_16ul__28unsigned_20long_29($0 + 1 | 0 | 0) | 0;
   $7 = $0;
   $0 = $0 + -1 | 0;
   $1 = ($0 | 0) == (11 | 0) ? $7 : $0;
  }
  return $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_28_29($0) {
  $0 = $0 | 0;
  return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_char____allocate_28std____2__allocator_char___2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__allocator_char___allocate_28unsigned_20long_29($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______invalidate_all_iterators_28_29($0) {
  $0 = $0 | 0;
 }
 
 function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   __memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
  }
  return $0 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_char____deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0 | 0, $1 | 0, $2 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_28char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29($0 | 0) | 0) >> 2] = $1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_28_29($0 | 0) | 0) + 8 | 0) >> 2] = $1 | -2147483648 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_28_29_20const($0) {
  $0 = $0 | 0;
  std____2____throw_length_error_28char_20const__29(1322 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_28_29_20const($0 | 0) | 0 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_char____max_size_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29($0) {
  $0 = $0 | 0;
  return std____2__numeric_limits_unsigned_20long___max_28_29() | 0 | 0;
 }
 
 function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______align_it_16ul__28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return ($0 + 15 | 0) & -16 | 0 | 0;
 }
 
 function std____2__allocator_char___allocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ((unsigned_20long_20std____2__allocator_traits_std____2__allocator_char____max_size_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29($0 | 0) | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   std____throw_bad_array_new_length_28_29();
   abort();
  }
  return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 | 0, 1 | 0) | 0 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_28_29($0) {
  $0 = $0 | 0;
  return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_char____deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_28_29($0 | 0) | 0 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_28_29($0 | 0) | 0 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_28_29_20const($0 | 0) | 0 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_viii(42 | 0, $1 | 0, $2 | 0, 1 | 0);
  $2 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   if (($2 | 0) == (1 | 0)) {
    break label$1
   }
   return;
  }
  __cxa_find_matching_catch_3(0 | 0) | 0;
  getTempRet0() | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______assign_external_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_28_29_20const($0 | 0) | 0;
   if ($3 >>> 0 < $2 >>> 0) {
    break label$1
   }
   $3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_28_29($0 | 0) | 0 | 0) | 0;
   std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($3 | 0, $1 | 0, $2 | 0) | 0;
   return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_28char__2c_20unsigned_20long_29($0 | 0, $3 | 0, $2 | 0) | 0 | 0;
  }
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_28_29_20const($0 | 0) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0 | 0, $3 | 0, $2 - $3 | 0 | 0, $4 | 0, 0 | 0, $4 | 0, $2 | 0, $1 | 0);
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______assign_external_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______assign_external_28char_20const__2c_20unsigned_20long_29($0 | 0, $1 | 0, std____2__char_traits_char___length_28char_20const__29($1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function std____2__numeric_limits_unsigned_20long___max_28_29() {
  return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29() | 0 | 0;
 }
 
 function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29() {
  return -1 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0 | 0) | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function abort_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  abort();
  abort();
 }
 
 function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function std__terminate_28_29() {
  std____terminate_28void_20_28__29_28_29_29(std__get_terminate_28_29() | 0 | 0);
  abort();
 }
 
 function std__get_terminate_28_29() {
  return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(21008 | 0) | 0 | 0;
 }
 
 function std____terminate_28void_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  invoke_v($0 | 0);
  $0 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
  HEAP32[(0 + 22372 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (($0 | 0) == (1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 22372 | 0) >> 2] = 0;
    invoke_vii(63 | 0, 1431 | 0, 0 | 0);
    $0 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
    HEAP32[(0 + 22372 | 0) >> 2] = 0;
    if (($0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $0 = __cxa_find_matching_catch_3(0 | 0) | 0;
   getTempRet0() | 0;
   __cxa_begin_catch($0 | 0) | 0;
   HEAP32[(0 + 22372 | 0) >> 2] = 0;
   invoke_vii(63 | 0, 1236 | 0, 0 | 0);
   $0 = HEAP32[(0 + 22372 | 0) >> 2] | 0;
   HEAP32[(0 + 22372 | 0) >> 2] = 0;
   if (($0 | 0) != (1 | 0)) {
    break label$1
   }
   __cxa_find_matching_catch_3(0 | 0) | 0;
   getTempRet0() | 0;
   std__terminate_28_29();
  }
  abort();
 }
 
 function std__get_new_handler_28_29() {
  return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(22876 | 0) | 0 | 0;
 }
 
 function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
  $0 = $0 | 0;
  return std__type_info___type_info_28_29($0 | 0) | 0 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____pointer_type_info_____pointer_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !(strcmp(std__type_info__name_28_29_20const($0 | 0) | 0 | 0, std__type_info__name_28_29_20const($1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function std__type_info__name_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  $4 = 1;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4 = 0;
   if (!$1) {
    break label$1
   }
   $4 = 0;
   $1 = __dynamic_cast($1 | 0, 18804 | 0, 18852 | 0, 0 | 0) | 0;
   if (!$1) {
    break label$1
   }
   memset($3 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3 + 56 | 0) >> 2] = 1;
   HEAP32[($3 + 20 | 0) >> 2] = -1;
   HEAP32[($3 + 16 | 0) >> 2] = $0;
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1, $3 + 8 | 0, HEAP32[$2 >> 2] | 0, 1);
   label$2 : {
    $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    if (($4 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2 >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
   }
   $4 = ($4 | 0) == (1 | 0);
  }
  __stack_pointer = $3 + 64 | 0;
  return $4 | 0;
 }
 
 function __dynamic_cast($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, $5 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 >> 2] | 0;
  $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
  $5 = HEAP32[($5 + -8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $4 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 55 | 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $9;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $9 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $9 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $9 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 24 | 0) >> 2] = 0;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 20 | 0) >> 2] = $3;
  HEAP32[($4 + 16 | 0) >> 2] = $1;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $2;
  $0 = $0 + $5 | 0;
  $3 = 0;
  label$1 : {
   label$2 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($6 | 0, $2 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6, $4 + 8 | 0, $0, $0, 1, 0);
    $3 = (HEAP32[($4 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6, $4 + 8 | 0, $0, 1, 0);
   label$3 : {
    switch (HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $3 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 64 | 0;
  return $3 | 0;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  label$1 : {
   $4 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   if ($4) {
    break label$1
   }
   HEAP32[($1 + 36 | 0) >> 2] = 1;
   HEAP32[($1 + 24 | 0) >> 2] = $3;
   HEAP32[($1 + 16 | 0) >> 2] = $2;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4 | 0) != ($2 | 0)) {
     break label$3
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1 + 24 | 0) >> 2] = $3;
    return;
   }
   HEAP8[($1 + 54 | 0) >> 0] = 1;
   HEAP32[($1 + 24 | 0) >> 2] = 2;
   HEAP32[($1 + 36 | 0) >> 2] = (HEAP32[($1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
   return;
  }
  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0, $1, $2, $3);
 }
 
 function __cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3 = 0;
    if (!$1) {
     break label$1
    }
    $4 = __dynamic_cast($1 | 0, 18804 | 0, 18900 | 0, 0 | 0) | 0;
    if (!$4) {
     break label$1
    }
    $3 = ((HEAPU8[($4 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, $3 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1 | 0, 19168 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2 >> 2] = 0;
    $4 = 1;
    break label$1;
   }
   label$3 : {
    if (!(__cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0 | 0, $1 | 0, $1 | 0) | 0)) {
     break label$3
    }
    $4 = 1;
    $1 = HEAP32[$2 >> 2] | 0;
    if (!$1) {
     break label$1
    }
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1) {
     break label$4
    }
    $4 = 0;
    $1 = __dynamic_cast($1 | 0, 18804 | 0, 18948 | 0, 0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    label$5 : {
     $5 = HEAP32[$2 >> 2] | 0;
     if (!$5) {
      break label$5
     }
     HEAP32[$2 >> 2] = HEAP32[$5 >> 2] | 0;
    }
    $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (($5 & ($6 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5 ^ -1 | 0) & $6 | 0) & 96 | 0) {
     break label$1
    }
    $4 = 1;
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, 19156 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     if (!$1) {
      break label$1
     }
     $4 = !(__dynamic_cast($1 | 0, 18804 | 0, 19e3 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$5) {
     break label$4
    }
    $4 = 0;
    label$7 : {
     $6 = __dynamic_cast($5 | 0, 18804 | 0, 18948 | 0, 0 | 0) | 0;
     if (!$6) {
      break label$7
     }
     if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4 = __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($6 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $4 = 0;
    label$8 : {
     $6 = __dynamic_cast($5 | 0, 18804 | 0, 19060 | 0, 0 | 0) | 0;
     if (!$6) {
      break label$8
     }
     if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($6 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $4 = 0;
    $0 = __dynamic_cast($5 | 0, 18804 | 0, 18852 | 0, 0 | 0) | 0;
    if (!$0) {
     break label$1
    }
    $1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (!$1) {
     break label$1
    }
    $4 = 0;
    $1 = __dynamic_cast($1 | 0, 18804 | 0, 18852 | 0, 0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    memset($3 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
    HEAP32[($3 + 56 | 0) >> 2] = 1;
    HEAP32[($3 + 20 | 0) >> 2] = -1;
    HEAP32[($3 + 16 | 0) >> 2] = $0;
    HEAP32[($3 + 8 | 0) >> 2] = $1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1, $3 + 8 | 0, HEAP32[$2 >> 2] | 0, 1);
    label$9 : {
     $1 = HEAP32[($3 + 32 | 0) >> 2] | 0;
     if (($1 | 0) != (1 | 0)) {
      break label$9
     }
     if (!(HEAP32[$2 >> 2] | 0)) {
      break label$9
     }
     HEAP32[$2 >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
    }
    $4 = ($1 | 0) == (1 | 0);
    break label$1;
   }
   $4 = 0;
  }
  __stack_pointer = $3 + 64 | 0;
  return $4 | 0;
 }
 
 function __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1) {
      break label$3
     }
     return 0 | 0;
    }
    $2 = 0;
    $1 = __dynamic_cast($1 | 0, 18804 | 0, 18948 | 0, 0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    if ((HEAP32[($1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$3) {
     break label$1
    }
    label$5 : {
     $0 = __dynamic_cast($3 | 0, 18804 | 0, 18948 | 0, 0 | 0) | 0;
     if (!$0) {
      break label$5
     }
     $1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   $2 = 0;
   $0 = __dynamic_cast($3 | 0, 18804 | 0, 19060 | 0, 0 | 0) | 0;
   if (!$0) {
    break label$1
   }
   $2 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = __dynamic_cast($1 | 0, 18804 | 0, 19060 | 0, 0 | 0) | 0;
   if (!$1) {
    break label$1
   }
   if ((HEAP32[($1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   $2 = 0;
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP8[($1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
    break label$1
   }
   HEAP8[($1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     if ($3) {
      break label$3
     }
     HEAP32[($1 + 36 | 0) >> 2] = 1;
     HEAP32[($1 + 24 | 0) >> 2] = $4;
     HEAP32[($1 + 16 | 0) >> 2] = $2;
     if (($4 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3 | 0) != ($2 | 0)) {
      break label$4
     }
     label$5 : {
      $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
      if (($3 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1 + 24 | 0) >> 2] = $4;
      $3 = $4;
     }
     if ((HEAP32[($1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1 + 36 | 0) >> 2] = (HEAP32[($1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if ((HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
    break label$1
   }
   if ((HEAP32[($1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1 + 28 | 0) >> 2] = $3;
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
       break label$5
      }
      if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$4
      }
     }
     if (($3 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1 + 32 | 0) >> 2] = $3;
    label$6 : {
     if ((HEAP32[($1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1 + 52 | 0) >> 1] = 0;
     $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $1, $2, $2, 1, $4);
     label$7 : {
      if (!(HEAPU8[($1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1 + 20 | 0) >> 2] = $2;
    HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $4);
  }
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
      break label$4
     }
     if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
      break label$3
     }
    }
    if (($3 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1 + 20 | 0) >> 2] = $2;
   HEAP32[($1 + 32 | 0) >> 2] = $3;
   HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
   return;
  }
  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $4, $5);
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
  }
 }
 
 function __cxa_can_catch($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
  label$1 : {
   $0 = FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0, $1, $3 + 12 | 0) | 0;
   if (!$0) {
    break label$1
   }
   HEAP32[$2 >> 2] = HEAP32[($3 + 12 | 0) >> 2] | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function __cxa_is_pointer_type($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return (__dynamic_cast($0 | 0, 18804 | 0, 18948 | 0, 0 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function std__exception___exception_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function std__exception___exception_28_29_1($0) {
  $0 = $0 | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 1221 | 0;
 }
 
 function std__bad_alloc__bad_alloc_28_29($0) {
  $0 = $0 | 0;
  $0 = std__exception__exception_28_29($0 | 0) | 0;
  HEAP32[$0 >> 2] = 19368 + 8 | 0;
  return $0 | 0;
 }
 
 function std__bad_alloc___bad_alloc_28_29($0) {
  $0 = $0 | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__bad_alloc__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 1535 | 0;
 }
 
 function std__bad_array_new_length__bad_array_new_length_28_29($0) {
  $0 = $0 | 0;
  $0 = std__bad_alloc__bad_alloc_28_29($0 | 0) | 0;
  HEAP32[$0 >> 2] = 19388 + 8 | 0;
  return $0 | 0;
 }
 
 function std__bad_array_new_length___bad_array_new_length_28_29($0) {
  $0 = $0 | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__bad_array_new_length__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 1290 | 0;
 }
 
 function std__logic_error___logic_error_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 19516 + 8 | 0;
  std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0 | 0) | 0;
  return std__exception___exception_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (!(std____2____libcpp_refstring____uses_refcount_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   $1 = std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29(HEAP32[$0 >> 2] | 0 | 0) | 0;
   if ((int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29($1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   operator_20delete_28void__29($1 | 0);
  }
  return $0 | 0;
 }
 
 function std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29($0) {
  $0 = $0 | 0;
  return $0 + -12 | 0 | 0;
 }
 
 function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (HEAP32[$0 >> 2] | 0) + -1 | 0;
  HEAP32[$0 >> 2] = $1;
  return $1 | 0;
 }
 
 function std__logic_error___logic_error_28_29_1($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__logic_error__what_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2____libcpp_refstring__c_str_28_29_20const($0 + 4 | 0 | 0) | 0 | 0;
 }
 
 function std____2____libcpp_refstring__c_str_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function std__length_error___length_error_28_29($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__type_info___type_info_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 5265760;
  __stack_end = (22880 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, SIGContainResource___SIGContainResource_28_29, SIGContainForce___SIGContainForce_28_29, SIGContainResource__SIGContainResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29, void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____construct_SIGContainResource_2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__29, void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____construct_SIGContainResource_2c_20SIGContainResource_20const__2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__2c_20SIGContainResource_20const__29, std____2__vector_SIGContainResource_2c_20std____2__allocator_SIGContainResource______swap_out_circular_buffer_28std____2____split_buffer_SIGContainResource_2c_20std____2__allocator_SIGContainResource_____29, SIGContainForceAdapter__addResource_28SIGContainResource__29, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__28char_20const__29, strcmp, SIGContainForceAdapter__removeResourceAt_28int_29, std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char______compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29, SIGContain___SIGContain_28_29, SIGContain__SIGContain_28double_2c_20double_2c_20SIGDiurnalROS__2c_20int_2c_20double_2c_20double_2c_20ContainFlank_2c_20SIGContainForce__2c_20double_2c_20ContainTactic_2c_20double_29, FireSize__FireSize_28_29, SIGContainForceAdapter__SIGContainForceAdapter_28_29, operator_20new_28unsigned_20long_29, SIGContainAdapter__doContainRun_28_29, SIGContainForceAdapter___SIGContainForceAdapter_28_29, FireSize___FireSize_28_29, SIGContainForce__SIGContainForce_28int_29, SIGContainForce__addResource_28double_2c_20double_2c_20double_2c_20ContainFlank_2c_20char_20const__2c_20double_2c_20double_29, SIGContainSim__SIGContainSim_28double_2c_20double_2c_20SIGDiurnalROS__2c_20int_2c_20double_2c_20SIGContainForce__2c_20ContainTactic_2c_20double_2c_20bool_2c_20int_2c_20int_2c_20int_2c_20int_29, SIGContainSim__run_28_29, FireSize__calculateFireBasicDimensions_28double_2c_20SpeedUnits__SpeedUnitsEnum_2c_20double_2c_20SpeedUnits__SpeedUnitsEnum_29, SIGContainSim___SIGContainSim_28_29, std____2____compressed_pair_double__2c_20std____2__allocator_double______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29, SIGIgniteInputs__SIGIgniteInputs_28_29, SIGIgniteInputs___SIGIgniteInputs_28_29, SIGSpotInputs__SIGSpotInputs_28_29, SIGContainResource__SIGContainResource_28_29, SIGContainAdapter__SIGContainAdapter_28_29, SIGContainAdapter___SIGContainAdapter_28_29, SIGIgnite__SIGIgnite_28_29, SIGIgnite___SIGIgnite_28_29, SIGSpot__SIGSpot_28_29, SIGSpot___SIGSpot_28_29, PalmettoGallberry__PalmettoGallberry_28_29, WesternAspen__WesternAspen_28_29, WesternAspen___WesternAspen_28_29, WindSpeedUtility__WindSpeedUtility_28_29, void_20std____2__allocator_traits_std____2__allocator_double____destroy_double_2c_20void__28std____2__allocator_double___2c_20double__29, std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29, void_20std____2__allocator_traits_std____2__allocator_double____construct_double_2c_20double_20const__2c_20void__28std____2__allocator_double___2c_20double__2c_20double_20const__29, std____2__vector_double_2c_20std____2__allocator_double______swap_out_circular_buffer_28std____2____split_buffer_double_2c_20std____2__allocator_double_____29, unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29, std__length_error__length_error_28char_20const__29, std__logic_error___logic_error_28_29, std__exception___exception_28_29, void_20std____2__allocator_traits_std____2__allocator_SIGContainResource____destroy_SIGContainResource_2c_20void__28std____2__allocator_SIGContainResource___2c_20SIGContainResource__29, SIGContainResource___SIGContainResource_28_29_1, SIGContainForce___SIGContainForce_28_29_1, SIGContain___SIGContain_28_29_1, __stdio_close, __stdio_write, __stdio_seek, __emscripten_stdout_close, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, std____2____libcpp_refstring____libcpp_refstring_28char_20const__29, abort, abort_message, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____pointer_type_info_____pointer_type_info_28_29, __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, std__bad_alloc___bad_alloc_28_29, std__bad_alloc__what_28_29_20const, std__bad_array_new_length___bad_array_new_length_28_29, std__bad_array_new_length__what_28_29_20const, std__exception___exception_28_29_1, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_1, std__logic_error__what_28_29_20const, std__length_error___length_error_28_29]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "getTempRet0": getTempRet0, 
  "fflush": fflush, 
  "emscripten_bind_VoidPtr___destroy___0": emscripten_bind_VoidPtr___destroy___0, 
  "emscripten_bind_DoublePtr___destroy___0": emscripten_bind_DoublePtr___destroy___0, 
  "emscripten_bind_FireSize_FireSize_0": emscripten_bind_FireSize_FireSize_0, 
  "emscripten_bind_FireSize_calculateFireBasicDimensions_4": emscripten_bind_FireSize_calculateFireBasicDimensions_4, 
  "emscripten_bind_FireSize_getFireLengthToWidthRatio_0": emscripten_bind_FireSize_getFireLengthToWidthRatio_0, 
  "emscripten_bind_FireSize_getEccentricity_0": emscripten_bind_FireSize_getEccentricity_0, 
  "emscripten_bind_FireSize_getBackingSpreadRate_1": emscripten_bind_FireSize_getBackingSpreadRate_1, 
  "emscripten_bind_FireSize_getEllipticalA_3": emscripten_bind_FireSize_getEllipticalA_3, 
  "emscripten_bind_FireSize_getEllipticalB_3": emscripten_bind_FireSize_getEllipticalB_3, 
  "emscripten_bind_FireSize_getEllipticalC_3": emscripten_bind_FireSize_getEllipticalC_3, 
  "emscripten_bind_FireSize_getFireLength_3": emscripten_bind_FireSize_getFireLength_3, 
  "emscripten_bind_FireSize_getMaxFireWidth_3": emscripten_bind_FireSize_getMaxFireWidth_3, 
  "emscripten_bind_FireSize_getFirePerimeter_3": emscripten_bind_FireSize_getFirePerimeter_3, 
  "emscripten_bind_FireSize_getFireArea_3": emscripten_bind_FireSize_getFireArea_3, 
  "emscripten_bind_FireSize___destroy___0": emscripten_bind_FireSize___destroy___0, 
  "emscripten_bind_SIGContainResource_SIGContainResource_0": emscripten_bind_SIGContainResource_SIGContainResource_0, 
  "emscripten_bind_SIGContainResource_SIGContainResource_7": emscripten_bind_SIGContainResource_SIGContainResource_7, 
  "emscripten_bind_SIGContainResource_description_0": emscripten_bind_SIGContainResource_description_0, 
  "emscripten_bind_SIGContainResource_print_2": emscripten_bind_SIGContainResource_print_2, 
  "emscripten_bind_SIGContainResource_arrival_0": emscripten_bind_SIGContainResource_arrival_0, 
  "emscripten_bind_SIGContainResource_hourCost_0": emscripten_bind_SIGContainResource_hourCost_0, 
  "emscripten_bind_SIGContainResource_duration_0": emscripten_bind_SIGContainResource_duration_0, 
  "emscripten_bind_SIGContainResource_production_0": emscripten_bind_SIGContainResource_production_0, 
  "emscripten_bind_SIGContainResource_baseCost_0": emscripten_bind_SIGContainResource_baseCost_0, 
  "emscripten_bind_SIGContainResource_flank_0": emscripten_bind_SIGContainResource_flank_0, 
  "emscripten_bind_SIGContainResource___destroy___0": emscripten_bind_SIGContainResource___destroy___0, 
  "emscripten_bind_SIGContainForce_SIGContainForce_1": emscripten_bind_SIGContainForce_SIGContainForce_1, 
  "emscripten_bind_SIGContainForce_addResource_1": emscripten_bind_SIGContainForce_addResource_1, 
  "emscripten_bind_SIGContainForce_addResource_7": emscripten_bind_SIGContainForce_addResource_7, 
  "emscripten_bind_SIGContainForce_exhausted_1": emscripten_bind_SIGContainForce_exhausted_1, 
  "emscripten_bind_SIGContainForce_firstArrival_1": emscripten_bind_SIGContainForce_firstArrival_1, 
  "emscripten_bind_SIGContainForce_nextArrival_3": emscripten_bind_SIGContainForce_nextArrival_3, 
  "emscripten_bind_SIGContainForce_productionRate_2": emscripten_bind_SIGContainForce_productionRate_2, 
  "emscripten_bind_SIGContainForce_resources_0": emscripten_bind_SIGContainForce_resources_0, 
  "emscripten_bind_SIGContainForce_resourceArrival_1": emscripten_bind_SIGContainForce_resourceArrival_1, 
  "emscripten_bind_SIGContainForce_resourceBaseCost_1": emscripten_bind_SIGContainForce_resourceBaseCost_1, 
  "emscripten_bind_SIGContainForce_resourceCost_2": emscripten_bind_SIGContainForce_resourceCost_2, 
  "emscripten_bind_SIGContainForce_resourceDescription_1": emscripten_bind_SIGContainForce_resourceDescription_1, 
  "emscripten_bind_SIGContainForce_resourceDuration_1": emscripten_bind_SIGContainForce_resourceDuration_1, 
  "emscripten_bind_SIGContainForce_resourceFlank_1": emscripten_bind_SIGContainForce_resourceFlank_1, 
  "emscripten_bind_SIGContainForce_resourceHourCost_1": emscripten_bind_SIGContainForce_resourceHourCost_1, 
  "emscripten_bind_SIGContainForce_resourceProduction_1": emscripten_bind_SIGContainForce_resourceProduction_1, 
  "emscripten_bind_SIGContainForce___destroy___0": emscripten_bind_SIGContainForce___destroy___0, 
  "emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0": emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0, 
  "emscripten_bind_SIGContainForceAdapter_addResource_7": emscripten_bind_SIGContainForceAdapter_addResource_7, 
  "emscripten_bind_SIGContainForceAdapter_firstArrival_1": emscripten_bind_SIGContainForceAdapter_firstArrival_1, 
  "emscripten_bind_SIGContainForceAdapter_removeResourceAt_1": emscripten_bind_SIGContainForceAdapter_removeResourceAt_1, 
  "emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1": emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1, 
  "emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1": emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1, 
  "emscripten_bind_SIGContainForceAdapter___destroy___0": emscripten_bind_SIGContainForceAdapter___destroy___0, 
  "emscripten_bind_SIGContainSim_SIGContainSim_13": emscripten_bind_SIGContainSim_SIGContainSim_13, 
  "emscripten_bind_SIGContainSim_attackDistance_0": emscripten_bind_SIGContainSim_attackDistance_0, 
  "emscripten_bind_SIGContainSim_attackPointX_0": emscripten_bind_SIGContainSim_attackPointX_0, 
  "emscripten_bind_SIGContainSim_attackPointY_0": emscripten_bind_SIGContainSim_attackPointY_0, 
  "emscripten_bind_SIGContainSim_attackTime_0": emscripten_bind_SIGContainSim_attackTime_0, 
  "emscripten_bind_SIGContainSim_distanceStep_0": emscripten_bind_SIGContainSim_distanceStep_0, 
  "emscripten_bind_SIGContainSim_fireBackAtAttack_0": emscripten_bind_SIGContainSim_fireBackAtAttack_0, 
  "emscripten_bind_SIGContainSim_fireBackAtReport_0": emscripten_bind_SIGContainSim_fireBackAtReport_0, 
  "emscripten_bind_SIGContainSim_fireHeadAtAttack_0": emscripten_bind_SIGContainSim_fireHeadAtAttack_0, 
  "emscripten_bind_SIGContainSim_fireHeadAtReport_0": emscripten_bind_SIGContainSim_fireHeadAtReport_0, 
  "emscripten_bind_SIGContainSim_fireLwRatioAtReport_0": emscripten_bind_SIGContainSim_fireLwRatioAtReport_0, 
  "emscripten_bind_SIGContainSim_fireReportTime_0": emscripten_bind_SIGContainSim_fireReportTime_0, 
  "emscripten_bind_SIGContainSim_fireSizeAtReport_0": emscripten_bind_SIGContainSim_fireSizeAtReport_0, 
  "emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0": emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0, 
  "emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0": emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0, 
  "emscripten_bind_SIGContainSim_force_0": emscripten_bind_SIGContainSim_force_0, 
  "emscripten_bind_SIGContainSim_maximumSimulationSteps_0": emscripten_bind_SIGContainSim_maximumSimulationSteps_0, 
  "emscripten_bind_SIGContainSim_minimumSimulationSteps_0": emscripten_bind_SIGContainSim_minimumSimulationSteps_0, 
  "emscripten_bind_SIGContainSim_status_0": emscripten_bind_SIGContainSim_status_0, 
  "emscripten_bind_SIGContainSim_tactic_0": emscripten_bind_SIGContainSim_tactic_0, 
  "emscripten_bind_SIGContainSim_finalFireCost_0": emscripten_bind_SIGContainSim_finalFireCost_0, 
  "emscripten_bind_SIGContainSim_finalFireLine_0": emscripten_bind_SIGContainSim_finalFireLine_0, 
  "emscripten_bind_SIGContainSim_finalFirePerimeter_0": emscripten_bind_SIGContainSim_finalFirePerimeter_0, 
  "emscripten_bind_SIGContainSim_finalFireSize_0": emscripten_bind_SIGContainSim_finalFireSize_0, 
  "emscripten_bind_SIGContainSim_finalFireSweep_0": emscripten_bind_SIGContainSim_finalFireSweep_0, 
  "emscripten_bind_SIGContainSim_finalFireTime_0": emscripten_bind_SIGContainSim_finalFireTime_0, 
  "emscripten_bind_SIGContainSim_finalResourcesUsed_0": emscripten_bind_SIGContainSim_finalResourcesUsed_0, 
  "emscripten_bind_SIGContainSim_fireHeadX_0": emscripten_bind_SIGContainSim_fireHeadX_0, 
  "emscripten_bind_SIGContainSim_firePerimeterY_0": emscripten_bind_SIGContainSim_firePerimeterY_0, 
  "emscripten_bind_SIGContainSim_firePerimeterX_0": emscripten_bind_SIGContainSim_firePerimeterX_0, 
  "emscripten_bind_SIGContainSim_firePoints_0": emscripten_bind_SIGContainSim_firePoints_0, 
  "emscripten_bind_SIGContainSim_checkmem_5": emscripten_bind_SIGContainSim_checkmem_5, 
  "emscripten_bind_SIGContainSim_run_0": emscripten_bind_SIGContainSim_run_0, 
  "emscripten_bind_SIGContainSim_UncontainedArea_5": emscripten_bind_SIGContainSim_UncontainedArea_5, 
  "emscripten_bind_SIGContainSim___destroy___0": emscripten_bind_SIGContainSim___destroy___0, 
  "emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0": emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0, 
  "emscripten_bind_SIGDiurnalROS_push_1": emscripten_bind_SIGDiurnalROS_push_1, 
  "emscripten_bind_SIGDiurnalROS_at_1": emscripten_bind_SIGDiurnalROS_at_1, 
  "emscripten_bind_SIGDiurnalROS_size_0": emscripten_bind_SIGDiurnalROS_size_0, 
  "emscripten_bind_SIGDiurnalROS___destroy___0": emscripten_bind_SIGDiurnalROS___destroy___0, 
  "emscripten_bind_SIGContain_SIGContain_11": emscripten_bind_SIGContain_SIGContain_11, 
  "emscripten_bind_SIGContain_simulationTime_0": emscripten_bind_SIGContain_simulationTime_0, 
  "emscripten_bind_SIGContain_fireSpreadRateAtBack_0": emscripten_bind_SIGContain_fireSpreadRateAtBack_0, 
  "emscripten_bind_SIGContain_fireLwRatioAtReport_0": emscripten_bind_SIGContain_fireLwRatioAtReport_0, 
  "emscripten_bind_SIGContain_force_0": emscripten_bind_SIGContain_force_0, 
  "emscripten_bind_SIGContain_resourceHourCost_1": emscripten_bind_SIGContain_resourceHourCost_1, 
  "emscripten_bind_SIGContain_attackDistance_0": emscripten_bind_SIGContain_attackDistance_0, 
  "emscripten_bind_SIGContain_attackPointX_0": emscripten_bind_SIGContain_attackPointX_0, 
  "emscripten_bind_SIGContain_fireHeadAtAttack_0": emscripten_bind_SIGContain_fireHeadAtAttack_0, 
  "emscripten_bind_SIGContain_attackPointY_0": emscripten_bind_SIGContain_attackPointY_0, 
  "emscripten_bind_SIGContain_attackTime_0": emscripten_bind_SIGContain_attackTime_0, 
  "emscripten_bind_SIGContain_resourceBaseCost_1": emscripten_bind_SIGContain_resourceBaseCost_1, 
  "emscripten_bind_SIGContain_fireSpreadRateAtReport_0": emscripten_bind_SIGContain_fireSpreadRateAtReport_0, 
  "emscripten_bind_SIGContain_fireHeadAtReport_0": emscripten_bind_SIGContain_fireHeadAtReport_0, 
  "emscripten_bind_SIGContain_fireReportTime_0": emscripten_bind_SIGContain_fireReportTime_0, 
  "emscripten_bind_SIGContain_resourceProduction_1": emscripten_bind_SIGContain_resourceProduction_1, 
  "emscripten_bind_SIGContain_fireBackAtAttack_0": emscripten_bind_SIGContain_fireBackAtAttack_0, 
  "emscripten_bind_SIGContain_simulationStep_0": emscripten_bind_SIGContain_simulationStep_0, 
  "emscripten_bind_SIGContain_tactic_0": emscripten_bind_SIGContain_tactic_0, 
  "emscripten_bind_SIGContain_resourceDescription_1": emscripten_bind_SIGContain_resourceDescription_1, 
  "emscripten_bind_SIGContain_distanceStep_0": emscripten_bind_SIGContain_distanceStep_0, 
  "emscripten_bind_SIGContain_status_0": emscripten_bind_SIGContain_status_0, 
  "emscripten_bind_SIGContain_resourceArrival_1": emscripten_bind_SIGContain_resourceArrival_1, 
  "emscripten_bind_SIGContain_fireSizeAtReport_0": emscripten_bind_SIGContain_fireSizeAtReport_0, 
  "emscripten_bind_SIGContain_setFireStartTimeMinutes_1": emscripten_bind_SIGContain_setFireStartTimeMinutes_1, 
  "emscripten_bind_SIGContain_fireBackAtReport_0": emscripten_bind_SIGContain_fireBackAtReport_0, 
  "emscripten_bind_SIGContain_resourceDuration_1": emscripten_bind_SIGContain_resourceDuration_1, 
  "emscripten_bind_SIGContain_resources_0": emscripten_bind_SIGContain_resources_0, 
  "emscripten_bind_SIGContain_exhaustedTime_0": emscripten_bind_SIGContain_exhaustedTime_0, 
  "emscripten_bind_SIGContain___destroy___0": emscripten_bind_SIGContain___destroy___0, 
  "emscripten_bind_SIGContainAdapter_SIGContainAdapter_0": emscripten_bind_SIGContainAdapter_SIGContainAdapter_0, 
  "emscripten_bind_SIGContainAdapter_setReportSize_2": emscripten_bind_SIGContainAdapter_setReportSize_2, 
  "emscripten_bind_SIGContainAdapter_setLwRatio_1": emscripten_bind_SIGContainAdapter_setLwRatio_1, 
  "emscripten_bind_SIGContainAdapter_setMaxFireTime_1": emscripten_bind_SIGContainAdapter_setMaxFireTime_1, 
  "emscripten_bind_SIGContainAdapter_doContainRun_0": emscripten_bind_SIGContainAdapter_doContainRun_0, 
  "emscripten_bind_SIGContainAdapter_setReportRate_2": emscripten_bind_SIGContainAdapter_setReportRate_2, 
  "emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1": emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1, 
  "emscripten_bind_SIGContainAdapter_setTactic_1": emscripten_bind_SIGContainAdapter_setTactic_1, 
  "emscripten_bind_SIGContainAdapter_removeAllResources_0": emscripten_bind_SIGContainAdapter_removeAllResources_0, 
  "emscripten_bind_SIGContainAdapter_getFinalFireSize_1": emscripten_bind_SIGContainAdapter_getFinalFireSize_1, 
  "emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1": emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1, 
  "emscripten_bind_SIGContainAdapter_setAttackDistance_2": emscripten_bind_SIGContainAdapter_setAttackDistance_2, 
  "emscripten_bind_SIGContainAdapter_getContainmentStatus_0": emscripten_bind_SIGContainAdapter_getContainmentStatus_0, 
  "emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1": emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1, 
  "emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1": emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1, 
  "emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1": emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1, 
  "emscripten_bind_SIGContainAdapter_setRetry_1": emscripten_bind_SIGContainAdapter_setRetry_1, 
  "emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1": emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1, 
  "emscripten_bind_SIGContainAdapter_removeResourceAt_1": emscripten_bind_SIGContainAdapter_removeResourceAt_1, 
  "emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1": emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1, 
  "emscripten_bind_SIGContainAdapter_getFinalCost_0": emscripten_bind_SIGContainAdapter_getFinalCost_0, 
  "emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1": emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1, 
  "emscripten_bind_SIGContainAdapter_setFireStartTime_1": emscripten_bind_SIGContainAdapter_setFireStartTime_1, 
  "emscripten_bind_SIGContainAdapter_setMinSteps_1": emscripten_bind_SIGContainAdapter_setMinSteps_1, 
  "emscripten_bind_SIGContainAdapter_setMaxSteps_1": emscripten_bind_SIGContainAdapter_setMaxSteps_1, 
  "emscripten_bind_SIGContainAdapter_setMaxFireSize_1": emscripten_bind_SIGContainAdapter_setMaxFireSize_1, 
  "emscripten_bind_SIGContainAdapter_addResource_8": emscripten_bind_SIGContainAdapter_addResource_8, 
  "emscripten_bind_SIGContainAdapter___destroy___0": emscripten_bind_SIGContainAdapter___destroy___0, 
  "emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0": emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0, 
  "emscripten_bind_SIGIgniteInputs_initializeMembers_0": emscripten_bind_SIGIgniteInputs_initializeMembers_0, 
  "emscripten_bind_SIGIgniteInputs_setAirTemperature_2": emscripten_bind_SIGIgniteInputs_setAirTemperature_2, 
  "emscripten_bind_SIGIgniteInputs_setDuffDepth_2": emscripten_bind_SIGIgniteInputs_setDuffDepth_2, 
  "emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1": emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1, 
  "emscripten_bind_SIGIgniteInputs_setLightningChargeType_1": emscripten_bind_SIGIgniteInputs_setLightningChargeType_1, 
  "emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2": emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2, 
  "emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2": emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2, 
  "emscripten_bind_SIGIgniteInputs_setSunShade_2": emscripten_bind_SIGIgniteInputs_setSunShade_2, 
  "emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11": emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11, 
  "emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0": emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0, 
  "emscripten_bind_SIGIgniteInputs_getLightningChargeType_0": emscripten_bind_SIGIgniteInputs_getLightningChargeType_0, 
  "emscripten_bind_SIGIgniteInputs_getAirTemperature_1": emscripten_bind_SIGIgniteInputs_getAirTemperature_1, 
  "emscripten_bind_SIGIgniteInputs_getDuffDepth_1": emscripten_bind_SIGIgniteInputs_getDuffDepth_1, 
  "emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1": emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1, 
  "emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1": emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1, 
  "emscripten_bind_SIGIgniteInputs_getSunShade_1": emscripten_bind_SIGIgniteInputs_getSunShade_1, 
  "emscripten_bind_SIGIgniteInputs___destroy___0": emscripten_bind_SIGIgniteInputs___destroy___0, 
  "emscripten_bind_SIGIgnite_SIGIgnite_0": emscripten_bind_SIGIgnite_SIGIgnite_0, 
  "emscripten_bind_SIGIgnite_initializeMembers_0": emscripten_bind_SIGIgnite_initializeMembers_0, 
  "emscripten_bind_SIGIgnite_getFuelBedType_0": emscripten_bind_SIGIgnite_getFuelBedType_0, 
  "emscripten_bind_SIGIgnite_getLightningChargeType_0": emscripten_bind_SIGIgnite_getLightningChargeType_0, 
  "emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1": emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1, 
  "emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1": emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1, 
  "emscripten_bind_SIGIgnite_setAirTemperature_2": emscripten_bind_SIGIgnite_setAirTemperature_2, 
  "emscripten_bind_SIGIgnite_setDuffDepth_2": emscripten_bind_SIGIgnite_setDuffDepth_2, 
  "emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1": emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1, 
  "emscripten_bind_SIGIgnite_setLightningChargeType_1": emscripten_bind_SIGIgnite_setLightningChargeType_1, 
  "emscripten_bind_SIGIgnite_setMoistureHundredHour_2": emscripten_bind_SIGIgnite_setMoistureHundredHour_2, 
  "emscripten_bind_SIGIgnite_setMoistureOneHour_2": emscripten_bind_SIGIgnite_setMoistureOneHour_2, 
  "emscripten_bind_SIGIgnite_setSunShade_2": emscripten_bind_SIGIgnite_setSunShade_2, 
  "emscripten_bind_SIGIgnite_updateIgniteInputs_11": emscripten_bind_SIGIgnite_updateIgniteInputs_11, 
  "emscripten_bind_SIGIgnite_getAirTemperature_1": emscripten_bind_SIGIgnite_getAirTemperature_1, 
  "emscripten_bind_SIGIgnite_getDuffDepth_1": emscripten_bind_SIGIgnite_getDuffDepth_1, 
  "emscripten_bind_SIGIgnite_getFuelTemperature_1": emscripten_bind_SIGIgnite_getFuelTemperature_1, 
  "emscripten_bind_SIGIgnite_getMoistureHundredHour_1": emscripten_bind_SIGIgnite_getMoistureHundredHour_1, 
  "emscripten_bind_SIGIgnite_getMoistureOneHour_1": emscripten_bind_SIGIgnite_getMoistureOneHour_1, 
  "emscripten_bind_SIGIgnite_getSunShade_1": emscripten_bind_SIGIgnite_getSunShade_1, 
  "emscripten_bind_SIGIgnite_isFuelDepthNeeded_0": emscripten_bind_SIGIgnite_isFuelDepthNeeded_0, 
  "emscripten_bind_SIGIgnite___destroy___0": emscripten_bind_SIGIgnite___destroy___0, 
  "emscripten_bind_SIGSpotInputs_SIGSpotInputs_0": emscripten_bind_SIGSpotInputs_SIGSpotInputs_0, 
  "emscripten_bind_SIGSpotInputs_getLocation_0": emscripten_bind_SIGSpotInputs_getLocation_0, 
  "emscripten_bind_SIGSpotInputs_getTreeSpecies_0": emscripten_bind_SIGSpotInputs_getTreeSpecies_0, 
  "emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2": emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2, 
  "emscripten_bind_SIGSpotInputs_setDBH_2": emscripten_bind_SIGSpotInputs_setDBH_2, 
  "emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2": emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2, 
  "emscripten_bind_SIGSpotInputs_setLocation_1": emscripten_bind_SIGSpotInputs_setLocation_1, 
  "emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2": emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2, 
  "emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2": emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2, 
  "emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2": emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2, 
  "emscripten_bind_SIGSpotInputs_setTorchingTrees_1": emscripten_bind_SIGSpotInputs_setTorchingTrees_1, 
  "emscripten_bind_SIGSpotInputs_setTreeHeight_2": emscripten_bind_SIGSpotInputs_setTreeHeight_2, 
  "emscripten_bind_SIGSpotInputs_setTreeSpecies_1": emscripten_bind_SIGSpotInputs_setTreeSpecies_1, 
  "emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2": emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2, 
  "emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11": emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11, 
  "emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11": emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11, 
  "emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15": emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15, 
  "emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1": emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1, 
  "emscripten_bind_SIGSpotInputs_getDBH_1": emscripten_bind_SIGSpotInputs_getDBH_1, 
  "emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1": emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1, 
  "emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1": emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1, 
  "emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1": emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1, 
  "emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1": emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1, 
  "emscripten_bind_SIGSpotInputs_getTreeHeight_1": emscripten_bind_SIGSpotInputs_getTreeHeight_1, 
  "emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1": emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1, 
  "emscripten_bind_SIGSpotInputs_getTorchingTrees_0": emscripten_bind_SIGSpotInputs_getTorchingTrees_0, 
  "emscripten_bind_SIGSpotInputs___destroy___0": emscripten_bind_SIGSpotInputs___destroy___0, 
  "emscripten_bind_SIGSpot_SIGSpot_0": emscripten_bind_SIGSpot_SIGSpot_0, 
  "emscripten_bind_SIGSpot_initializeMembers_0": emscripten_bind_SIGSpot_initializeMembers_0, 
  "emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0": emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0, 
  "emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0": emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0, 
  "emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0": emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0, 
  "emscripten_bind_SIGSpot_setBurningPileFlameHeight_2": emscripten_bind_SIGSpot_setBurningPileFlameHeight_2, 
  "emscripten_bind_SIGSpot_setDBH_2": emscripten_bind_SIGSpot_setDBH_2, 
  "emscripten_bind_SIGSpot_setDownwindCoverHeight_2": emscripten_bind_SIGSpot_setDownwindCoverHeight_2, 
  "emscripten_bind_SIGSpot_setFlameLength_2": emscripten_bind_SIGSpot_setFlameLength_2, 
  "emscripten_bind_SIGSpot_setLocation_1": emscripten_bind_SIGSpot_setLocation_1, 
  "emscripten_bind_SIGSpot_setRidgeToValleyDistance_2": emscripten_bind_SIGSpot_setRidgeToValleyDistance_2, 
  "emscripten_bind_SIGSpot_setRidgeToValleyElevation_2": emscripten_bind_SIGSpot_setRidgeToValleyElevation_2, 
  "emscripten_bind_SIGSpot_setTorchingTrees_1": emscripten_bind_SIGSpot_setTorchingTrees_1, 
  "emscripten_bind_SIGSpot_setTreeHeight_2": emscripten_bind_SIGSpot_setTreeHeight_2, 
  "emscripten_bind_SIGSpot_setTreeSpecies_1": emscripten_bind_SIGSpot_setTreeSpecies_1, 
  "emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2": emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2, 
  "emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11": emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11, 
  "emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11": emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11, 
  "emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15": emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15, 
  "emscripten_bind_SIGSpot_getTorchingTrees_0": emscripten_bind_SIGSpot_getTorchingTrees_0, 
  "emscripten_bind_SIGSpot_getLocation_0": emscripten_bind_SIGSpot_getLocation_0, 
  "emscripten_bind_SIGSpot_getTreeSpecies_0": emscripten_bind_SIGSpot_getTreeSpecies_0, 
  "emscripten_bind_SIGSpot_getBurningPileFlameHeight_1": emscripten_bind_SIGSpot_getBurningPileFlameHeight_1, 
  "emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1": emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1, 
  "emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1": emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1, 
  "emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1": emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1, 
  "emscripten_bind_SIGSpot_getDBH_1": emscripten_bind_SIGSpot_getDBH_1, 
  "emscripten_bind_SIGSpot_getDownwindCoverHeight_1": emscripten_bind_SIGSpot_getDownwindCoverHeight_1, 
  "emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1": emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1, 
  "emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1": emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1, 
  "emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0": emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0, 
  "emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1": emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1, 
  "emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1": emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1, 
  "emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1": emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1, 
  "emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1": emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1, 
  "emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1": emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1, 
  "emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1": emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1, 
  "emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1": emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1, 
  "emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1": emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1, 
  "emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1": emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1, 
  "emscripten_bind_SIGSpot_getRidgeToValleyDistance_1": emscripten_bind_SIGSpot_getRidgeToValleyDistance_1, 
  "emscripten_bind_SIGSpot_getRidgeToValleyElevation_1": emscripten_bind_SIGSpot_getRidgeToValleyElevation_1, 
  "emscripten_bind_SIGSpot_getSurfaceFlameLength_1": emscripten_bind_SIGSpot_getSurfaceFlameLength_1, 
  "emscripten_bind_SIGSpot_getTreeHeight_1": emscripten_bind_SIGSpot_getTreeHeight_1, 
  "emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1": emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1, 
  "emscripten_bind_SIGSpot___destroy___0": emscripten_bind_SIGSpot___destroy___0, 
  "emscripten_bind_PalmettoGallberry_PalmettoGallberry_0": emscripten_bind_PalmettoGallberry_PalmettoGallberry_0, 
  "emscripten_bind_PalmettoGallberry_initializeMembers_0": emscripten_bind_PalmettoGallberry_initializeMembers_0, 
  "emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0": emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0, 
  "emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0": emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0, 
  "emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0": emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0, 
  "emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0": emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0, 
  "emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1": emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1, 
  "emscripten_bind_PalmettoGallberry___destroy___0": emscripten_bind_PalmettoGallberry___destroy___0, 
  "emscripten_bind_WesternAspen_WesternAspen_0": emscripten_bind_WesternAspen_WesternAspen_0, 
  "emscripten_bind_WesternAspen_initializeMembers_0": emscripten_bind_WesternAspen_initializeMembers_0, 
  "emscripten_bind_WesternAspen_calculateAspenMortality_3": emscripten_bind_WesternAspen_calculateAspenMortality_3, 
  "emscripten_bind_WesternAspen_getAspenDBH_0": emscripten_bind_WesternAspen_getAspenDBH_0, 
  "emscripten_bind_WesternAspen_getAspenFuelBedDepth_1": emscripten_bind_WesternAspen_getAspenFuelBedDepth_1, 
  "emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0": emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0, 
  "emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0": emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0, 
  "emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2": emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2, 
  "emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1": emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1, 
  "emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2": emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2, 
  "emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2": emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2, 
  "emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0": emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0, 
  "emscripten_bind_WesternAspen_getAspenMortality_0": emscripten_bind_WesternAspen_getAspenMortality_0, 
  "emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2": emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2, 
  "emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0": emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0, 
  "emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0": emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0, 
  "emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2": emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2, 
  "emscripten_bind_WesternAspen___destroy___0": emscripten_bind_WesternAspen___destroy___0, 
  "emscripten_bind_WindSpeedUtility_WindSpeedUtility_0": emscripten_bind_WindSpeedUtility_WindSpeedUtility_0, 
  "emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2": emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2, 
  "emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1": emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1, 
  "emscripten_bind_WindSpeedUtility___destroy___0": emscripten_bind_WindSpeedUtility___destroy___0, 
  "emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet": emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet, 
  "emscripten_enum_AreaUnits_AreaUnitsEnum_Acres": emscripten_enum_AreaUnits_AreaUnitsEnum_Acres, 
  "emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares": emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares, 
  "emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters": emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters, 
  "emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles": emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles, 
  "emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers": emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Feet": emscripten_enum_LengthUnits_LengthUnitsEnum_Feet, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Inches": emscripten_enum_LengthUnits_LengthUnitsEnum_Inches, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters": emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Meters": emscripten_enum_LengthUnits_LengthUnitsEnum_Meters, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Chains": emscripten_enum_LengthUnits_LengthUnitsEnum_Chains, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Miles": emscripten_enum_LengthUnits_LengthUnitsEnum_Miles, 
  "emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers": emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers, 
  "emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot": emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot, 
  "emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre": emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre, 
  "emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare": emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare, 
  "emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter": emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter, 
  "emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet": emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet, 
  "emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters": emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters, 
  "emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches": emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches, 
  "emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers": emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers, 
  "emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction": emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction, 
  "emscripten_enum_CoverUnits_CoverUnitsEnum_Percent": emscripten_enum_CoverUnits_CoverUnitsEnum_Percent, 
  "emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute": emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute, 
  "emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour": emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour, 
  "emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond": emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond, 
  "emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute": emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute, 
  "emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour": emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour, 
  "emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour": emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour, 
  "emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction": emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction, 
  "emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent": emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent, 
  "emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction": emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction, 
  "emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent": emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent, 
  "emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees": emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees, 
  "emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent": emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent, 
  "emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot": emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot, 
  "emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter": emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter, 
  "emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound": emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound, 
  "emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram": emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram, 
  "emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot": emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot, 
  "emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter": emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter, 
  "emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot": emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot, 
  "emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond": emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond, 
  "emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter": emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter, 
  "emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute": emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute, 
  "emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond": emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond, 
  "emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond": emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond, 
  "emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute": emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute, 
  "emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter": emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter, 
  "emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond": emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond, 
  "emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute": emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute, 
  "emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond": emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond, 
  "emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute": emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute, 
  "emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter": emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter, 
  "emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit": emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit, 
  "emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius": emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius, 
  "emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin": emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin, 
  "emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes": emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes, 
  "emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds": emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds, 
  "emscripten_enum_TimeUnits_TimeUnitsEnum_Hours": emscripten_enum_TimeUnits_TimeUnitsEnum_Hours, 
  "emscripten_enum_ContainTactic_HeadAttack": emscripten_enum_ContainTactic_HeadAttack, 
  "emscripten_enum_ContainTactic_RearAttack": emscripten_enum_ContainTactic_RearAttack, 
  "emscripten_enum_ContainStatus_Unreported": emscripten_enum_ContainStatus_Unreported, 
  "emscripten_enum_ContainStatus_Reported": emscripten_enum_ContainStatus_Reported, 
  "emscripten_enum_ContainStatus_Attacked": emscripten_enum_ContainStatus_Attacked, 
  "emscripten_enum_ContainStatus_Contained": emscripten_enum_ContainStatus_Contained, 
  "emscripten_enum_ContainStatus_Overrun": emscripten_enum_ContainStatus_Overrun, 
  "emscripten_enum_ContainStatus_Exhausted": emscripten_enum_ContainStatus_Exhausted, 
  "emscripten_enum_ContainStatus_Overflow": emscripten_enum_ContainStatus_Overflow, 
  "emscripten_enum_ContainStatus_SizeLimitExceeded": emscripten_enum_ContainStatus_SizeLimitExceeded, 
  "emscripten_enum_ContainStatus_TimeLimitExceeded": emscripten_enum_ContainStatus_TimeLimitExceeded, 
  "emscripten_enum_ContainFlank_LeftFlank": emscripten_enum_ContainFlank_LeftFlank, 
  "emscripten_enum_ContainFlank_RightFlank": emscripten_enum_ContainFlank_RightFlank, 
  "emscripten_enum_ContainFlank_BothFlanks": emscripten_enum_ContainFlank_BothFlanks, 
  "emscripten_enum_ContainFlank_NeitherFlank": emscripten_enum_ContainFlank_NeitherFlank, 
  "emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter": emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter, 
  "emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky": emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky, 
  "emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep": emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep, 
  "emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow": emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow, 
  "emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff": emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff, 
  "emscripten_enum_IgnitionFuelBedType_DouglasFirDuff": emscripten_enum_IgnitionFuelBedType_DouglasFirDuff, 
  "emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed": emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed, 
  "emscripten_enum_IgnitionFuelBedType_PeatMoss": emscripten_enum_IgnitionFuelBedType_PeatMoss, 
  "emscripten_enum_LightningCharge_Negative": emscripten_enum_LightningCharge_Negative, 
  "emscripten_enum_LightningCharge_Positive": emscripten_enum_LightningCharge_Positive, 
  "emscripten_enum_LightningCharge_Unknown": emscripten_enum_LightningCharge_Unknown, 
  "emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE": emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE, 
  "emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR": emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR, 
  "emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR": emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR, 
  "emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK": emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK, 
  "emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE": emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE, 
  "emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE": emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE, 
  "emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE": emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE, 
  "emscripten_enum_SpotTreeSpecies_GRAND_FIR": emscripten_enum_SpotTreeSpecies_GRAND_FIR, 
  "emscripten_enum_SpotTreeSpecies_BALSAM_FIR": emscripten_enum_SpotTreeSpecies_BALSAM_FIR, 
  "emscripten_enum_SpotTreeSpecies_SLASH_PINE": emscripten_enum_SpotTreeSpecies_SLASH_PINE, 
  "emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE": emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE, 
  "emscripten_enum_SpotTreeSpecies_POND_PINE": emscripten_enum_SpotTreeSpecies_POND_PINE, 
  "emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE": emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE, 
  "emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE": emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE, 
  "emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD": emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD, 
  "emscripten_enum_SpotFireLocation_VALLEY_BOTTOM": emscripten_enum_SpotFireLocation_VALLEY_BOTTOM, 
  "emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD": emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD, 
  "emscripten_enum_SpotFireLocation_RIDGE_TOP": emscripten_enum_SpotFireLocation_RIDGE_TOP, 
  "emscripten_enum_SpotArrayConstants_NUM_COLS": emscripten_enum_SpotArrayConstants_NUM_COLS, 
  "emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS": emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS, 
  "emscripten_enum_SpotArrayConstants_NUM_SPECIES": emscripten_enum_SpotArrayConstants_NUM_SPECIES, 
  "__em_js__array_bounds_check_error": {
   get value() {
    return global$4;
   }, 
   set value(_global$4) {
    global$4 = _global$4;
   }
  }, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "__errno_location": __errno_location, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "setThrew": setThrew, 
  "setTempRet0": setTempRet0, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "__cxa_can_catch": __cxa_can_catch, 
  "__cxa_is_pointer_type": __cxa_is_pointer_type, 
  "__start_em_js": {
   get value() {
    return global$5;
   }, 
   set value(_global$5) {
    global$5 = _global$5;
   }
  }, 
  "__stop_em_js": {
   get value() {
    return global$6;
   }, 
   set value(_global$6) {
    global$6 = _global$6;
   }
  }, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
/**
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i); // possibly a lead surrogate
    if (c <= 0x7F) {
      len++;
    } else if (c <= 0x7FF) {
      len += 2;
    } else if (c >= 0xD800 && c <= 0xDFFF) {
      len += 4; ++i;
    } else {
      len += 3;
    }
  }
  return len;
}

// end include: runtime_strings.js
// Memory management

var HEAP,
/** @type {!ArrayBuffer} */
  buffer,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x2135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten at 0x' + max.toString(16) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' 0x' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'behave.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        // Avoid instantiateStreaming() on Node.js environment for now, as while
        // Node.js v18.1.0 implements it, it does not have a full fetch()
        // implementation yet.
        //
        // Reference:
        //   https://github.com/emscripten-core/emscripten/pull/16917
        !ENVIRONMENT_IS_NODE &&
        typeof fetch == 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};
function array_bounds_check_error(idx,size) { throw 'Array index ' + idx + ' out of bounds: [0,' + size + ')'; }





  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  function demangle(func) {
      warnOnce('warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        case '*': return HEAPU32[((ptr)>>2)];
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        if (ASSERTIONS) {
          assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
        }
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only
        // populated if an Error object is thrown, so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        case '*': HEAPU32[((ptr)>>2)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    }

  function writeArrayToMemory(array, buffer) {
      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
      HEAP8.set(array, buffer);
    }

  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + 24) + 24;
    }

  var exceptionCaught =  [];
  
  function exception_addRef(info) {
      info.add_ref();
    }
  
  var uncaughtExceptionCount = 0;
  function ___cxa_begin_catch(ptr) {
      var info = new ExceptionInfo(ptr);
      if (!info.get_caught()) {
        info.set_caught(true);
        uncaughtExceptionCount--;
      }
      info.set_rethrown(false);
      exceptionCaught.push(info);
      exception_addRef(info);
      return info.get_exception_ptr();
    }

  var exceptionLast = 0;
  
  /** @constructor */
  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 24;
  
      this.set_type = function(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[((this.ptr)>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
  
      this.set_adjusted_ptr = function(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      };
  
      this.get_adjusted_ptr = function() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      };
  
      // Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted
      // when the pointer is casted to some of the exception object base classes (e.g. when virtual
      // inheritance is used). When a pointer is thrown this method should return the thrown pointer
      // itself.
      this.get_exception_ptr = function() {
        // Work around a fastcomp bug, this code is still included for some reason in a build without
        // exceptions support.
        var isPointer = ___cxa_is_pointer_type(this.get_type());
        if (isPointer) {
          return HEAPU32[((this.excPtr)>>2)];
        }
        var adjusted = this.get_adjusted_ptr();
        if (adjusted !== 0) return adjusted;
        return this.excPtr;
      };
    }
  
  function ___resumeException(ptr) {
      if (!exceptionLast) { exceptionLast = ptr; }
      throw ptr;
    }
  function ___cxa_find_matching_catch_2() {
      var thrown = exceptionLast;
      if (!thrown) {
        // just pass through the null ptr
        setTempRet0(0);
        return 0;
      }
      var info = new ExceptionInfo(thrown);
      info.set_adjusted_ptr(thrown);
      var thrownType = info.get_type();
      if (!thrownType) {
        // just pass through the thrown ptr
        setTempRet0(0);
        return thrown;
      }
  
      // can_catch receives a **, add indirection
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < arguments.length; i++) {
        var caughtType = arguments[i];
        if (caughtType === 0 || caughtType === thrownType) {
          // Catch all clause matched or exactly the same type is caught
          break;
        }
        var adjusted_ptr_addr = info.ptr + 16;
        if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {
          setTempRet0(caughtType);
          return thrown;
        }
      }
      setTempRet0(thrownType);
      return thrown;
    }

  function ___cxa_find_matching_catch_3() {
      var thrown = exceptionLast;
      if (!thrown) {
        // just pass through the null ptr
        setTempRet0(0);
        return 0;
      }
      var info = new ExceptionInfo(thrown);
      info.set_adjusted_ptr(thrown);
      var thrownType = info.get_type();
      if (!thrownType) {
        // just pass through the thrown ptr
        setTempRet0(0);
        return thrown;
      }
  
      // can_catch receives a **, add indirection
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < arguments.length; i++) {
        var caughtType = arguments[i];
        if (caughtType === 0 || caughtType === thrownType) {
          // Catch all clause matched or exactly the same type is caught
          break;
        }
        var adjusted_ptr_addr = info.ptr + 16;
        if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {
          setTempRet0(caughtType);
          return thrown;
        }
      }
      setTempRet0(thrownType);
      return thrown;
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(new ExceptionInfo(ptr).ptr);
      } catch(e) {
        err('exception during __cxa_free_exception: ' + e);
      }
    }

  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr;
    }


  function _abort() {
      abort('native code called abort()');
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ' + HEAP8.length + ', (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  var SYSCALLS = {varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      }};
  function _fd_close(fd) {
      abort('fd_close called without SYSCALLS_REQUIRE_FILESYSTEM');
    }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      return 70;
    }

  var printCharBuffers = [null,[],[]];
  function printChar(stream, curr) {
      var buffer = printCharBuffers[stream];
      assert(buffer);
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    }
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      _fflush(0);
      if (printCharBuffers[1].length) printChar(1, 10);
      if (printCharBuffers[2].length) printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    }

  var wasmTableMirror = [];
  function getWasmTableEntry(funcPtr) {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
      return func;
    }

  function uleb128Encode(n, target) {
      assert(n < 16384);
      if (n < 128) {
        target.push(n);
      } else {
        target.push((n % 128) | 128, n >> 7);
      }
    }
  
  function sigToWasmTypes(sig) {
      var typeNames = {
        'i': 'i32',
        'j': 'i64',
        'f': 'f32',
        'd': 'f64',
        'p': 'i32',
      };
      var type = {
        parameters: [],
        results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
      };
      for (var i = 1; i < sig.length; ++i) {
        assert(sig[i] in typeNames, 'invalid signature char: ' + sig[i]);
        type.parameters.push(typeNames[sig[i]]);
      }
      return type;
    }
  function convertJsFunctionToWasm(func, sig) {
      return func;
    }
  
  function updateTableMap(offset, count) {
      if (functionsInTableMap) {
        for (var i = offset; i < offset + count; i++) {
          var item = getWasmTableEntry(i);
          // Ignore null values.
          if (item) {
            functionsInTableMap.set(item, i);
          }
        }
      }
    }
  
  var functionsInTableMap = undefined;
  
  var freeTableIndexes = [];
  function getEmptyTableSlot() {
      // Reuse a free index if there is one, otherwise grow.
      if (freeTableIndexes.length) {
        return freeTableIndexes.pop();
      }
      // Grow the table
      try {
        wasmTable.grow(1);
      } catch (err) {
        if (!(err instanceof RangeError)) {
          throw err;
        }
        throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
      }
      return wasmTable.length - 1;
    }
  
  function setWasmTableEntry(idx, func) {
      wasmTable.set(idx, func);
      // With ABORT_ON_WASM_EXCEPTIONS wasmTable.get is overriden to return wrapped
      // functions so we need to call it here to retrieve the potential wrapper correctly
      // instead of just storing 'func' directly into wasmTableMirror
      wasmTableMirror[idx] = wasmTable.get(idx);
    }
  /** @param {string=} sig */
  function addFunction(func, sig) {
      assert(typeof func != 'undefined');
  
      // Check if the function is already in the table, to ensure each function
      // gets a unique index. First, create the map if this is the first use.
      if (!functionsInTableMap) {
        functionsInTableMap = new WeakMap();
        updateTableMap(0, wasmTable.length);
      }
      if (functionsInTableMap.has(func)) {
        return functionsInTableMap.get(func);
      }
  
      // It's not in the table, add it now.
  
      var ret = getEmptyTableSlot();
  
      // Set the new value.
      try {
        // Attempting to call this with JS function will cause of table.set() to fail
        setWasmTableEntry(ret, func);
      } catch (err) {
        if (!(err instanceof TypeError)) {
          throw err;
        }
        assert(typeof sig != 'undefined', 'Missing signature argument to addFunction: ' + func);
        var wrapped = convertJsFunctionToWasm(func, sig);
        setWasmTableEntry(ret, wrapped);
      }
  
      functionsInTableMap.set(func, ret);
  
      return ret;
    }

  function removeFunction(index) {
      functionsInTableMap.delete(getWasmTableEntry(index));
      freeTableIndexes.push(index);
    }

  var ALLOC_NORMAL = 0;
  
  var ALLOC_STACK = 1;
  function allocate(slab, allocator) {
      var ret;
      assert(typeof allocator == 'number', 'allocate no longer takes a type argument')
      assert(typeof slab != 'number', 'allocate no longer takes a number as arg0')
  
      if (allocator == ALLOC_STACK) {
        ret = stackAlloc(slab.length);
      } else {
        ret = _malloc(slab.length);
      }
  
      if (!slab.subarray && !slab.slice) {
        slab = new Uint8Array(slab);
      }
      HEAPU8.set(slab, ret);
      return ret;
    }



  function AsciiToString(ptr) {
      var str = '';
      while (1) {
        var ch = HEAPU8[((ptr++)>>0)];
        if (!ch) return str;
        str += String.fromCharCode(ch);
      }
    }

  /** @param {boolean=} dontAddNull */
  function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
        HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
      }
      // Null-terminate the pointer to the HEAP.
      if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
    }
  function stringToAscii(str, outPtr) {
      return writeAsciiToMemory(str, outPtr, false);
    }

  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  function UTF16ToString(ptr, maxBytesToRead) {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
      // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder) {
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
      } else {
        var str = '';
  
        // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
        // will always evaluate to true. The loop is then terminated on the first null char.
        for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
          var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
          if (codeUnit == 0) break;
          // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
          str += String.fromCharCode(codeUnit);
        }
  
        return str;
      }
    }

  function stringToUTF16(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    }

  function lengthBytesUTF16(str) {
      return str.length*2;
    }

  function UTF32ToString(ptr, maxBytesToRead) {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }

  function stringToUTF32(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    }

  function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    }

  function allocateUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }

  function allocateUTF8OnStack(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }

  /** @deprecated @param {boolean=} dontAddNull */
  function writeStringToMemory(string, buffer, dontAddNull) {
      warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');
  
      var /** @type {number} */ lastChar, /** @type {number} */ end;
      if (dontAddNull) {
        // stringToUTF8Array always appends null. If we don't want to do that, remember the
        // character that existed at the location where the null will be placed, and restore
        // that after the write (below).
        end = buffer + lengthBytesUTF8(string);
        lastChar = HEAP8[end];
      }
      stringToUTF8(string, buffer, Infinity);
      if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
    }



  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }



  function getCFunc(ident) {
      var func = Module['_' + ident]; // closure exported function
      assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
      return func;
    }
  
    /**
     * @param {string|null=} returnType
     * @param {Array=} argTypes
     * @param {Arguments|Array=} args
     * @param {Object=} opts
     */
  function ccall(ident, returnType, argTypes, args, opts) {
      // For fast lookup of conversion functions
      var toC = {
        'string': (str) => {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) { // null string
            // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
            var len = (str.length << 2) + 1;
            ret = stackAlloc(len);
            stringToUTF8(str, ret, len);
          }
          return ret;
        },
        'array': (arr) => {
          var ret = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }
      };
  
      function convertReturnValue(ret) {
        if (returnType === 'string') {
          
          return UTF8ToString(ret);
        }
        if (returnType === 'boolean') return Boolean(ret);
        return ret;
      }
  
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      assert(returnType !== 'array', 'Return type should not be "array".');
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func.apply(null, cArgs);
      function onDone(ret) {
        if (stack !== 0) stackRestore(stack);
        return convertReturnValue(ret);
      }
  
      ret = onDone(ret);
      return ret;
    }

  
    /**
     * @param {string=} returnType
     * @param {Array=} argTypes
     * @param {Object=} opts
     */
  function cwrap(ident, returnType, argTypes, opts) {
      return function() {
        return ccall(ident, returnType, argTypes, arguments, opts);
      }
    }



var ASSERTIONS = true;

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var asmLibraryArg = {
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_begin_catch": ___cxa_begin_catch,
  "__cxa_find_matching_catch_2": ___cxa_find_matching_catch_2,
  "__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3,
  "__cxa_free_exception": ___cxa_free_exception,
  "__cxa_throw": ___cxa_throw,
  "__resumeException": ___resumeException,
  "abort": _abort,
  "array_bounds_check_error": array_bounds_check_error,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "invoke_ii": invoke_ii,
  "invoke_iidddiidd": invoke_iidddiidd,
  "invoke_iiddiiddiidid": invoke_iiddiiddiidid,
  "invoke_iiddiidiidiiiii": invoke_iiddiidiidiiiii,
  "invoke_iii": invoke_iii,
  "invoke_iiii": invoke_iiii,
  "invoke_v": invoke_v,
  "invoke_vi": invoke_vi,
  "invoke_vididi": invoke_vididi,
  "invoke_vii": invoke_vii,
  "invoke_viii": invoke_viii,
  "memory": wasmMemory
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var getTempRet0 = Module["getTempRet0"] = createExportWrapper("getTempRet0");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = createExportWrapper("emscripten_bind_VoidPtr___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_DoublePtr___destroy___0 = Module["_emscripten_bind_DoublePtr___destroy___0"] = createExportWrapper("emscripten_bind_DoublePtr___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_FireSize_0 = Module["_emscripten_bind_FireSize_FireSize_0"] = createExportWrapper("emscripten_bind_FireSize_FireSize_0");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_calculateFireBasicDimensions_4 = Module["_emscripten_bind_FireSize_calculateFireBasicDimensions_4"] = createExportWrapper("emscripten_bind_FireSize_calculateFireBasicDimensions_4");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getFireLengthToWidthRatio_0 = Module["_emscripten_bind_FireSize_getFireLengthToWidthRatio_0"] = createExportWrapper("emscripten_bind_FireSize_getFireLengthToWidthRatio_0");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getEccentricity_0 = Module["_emscripten_bind_FireSize_getEccentricity_0"] = createExportWrapper("emscripten_bind_FireSize_getEccentricity_0");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getBackingSpreadRate_1 = Module["_emscripten_bind_FireSize_getBackingSpreadRate_1"] = createExportWrapper("emscripten_bind_FireSize_getBackingSpreadRate_1");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getEllipticalA_3 = Module["_emscripten_bind_FireSize_getEllipticalA_3"] = createExportWrapper("emscripten_bind_FireSize_getEllipticalA_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getEllipticalB_3 = Module["_emscripten_bind_FireSize_getEllipticalB_3"] = createExportWrapper("emscripten_bind_FireSize_getEllipticalB_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getEllipticalC_3 = Module["_emscripten_bind_FireSize_getEllipticalC_3"] = createExportWrapper("emscripten_bind_FireSize_getEllipticalC_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getFireLength_3 = Module["_emscripten_bind_FireSize_getFireLength_3"] = createExportWrapper("emscripten_bind_FireSize_getFireLength_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getMaxFireWidth_3 = Module["_emscripten_bind_FireSize_getMaxFireWidth_3"] = createExportWrapper("emscripten_bind_FireSize_getMaxFireWidth_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getFirePerimeter_3 = Module["_emscripten_bind_FireSize_getFirePerimeter_3"] = createExportWrapper("emscripten_bind_FireSize_getFirePerimeter_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize_getFireArea_3 = Module["_emscripten_bind_FireSize_getFireArea_3"] = createExportWrapper("emscripten_bind_FireSize_getFireArea_3");

/** @type {function(...*):?} */
var _emscripten_bind_FireSize___destroy___0 = Module["_emscripten_bind_FireSize___destroy___0"] = createExportWrapper("emscripten_bind_FireSize___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_SIGContainResource_0 = Module["_emscripten_bind_SIGContainResource_SIGContainResource_0"] = createExportWrapper("emscripten_bind_SIGContainResource_SIGContainResource_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_SIGContainResource_7 = Module["_emscripten_bind_SIGContainResource_SIGContainResource_7"] = createExportWrapper("emscripten_bind_SIGContainResource_SIGContainResource_7");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_description_0 = Module["_emscripten_bind_SIGContainResource_description_0"] = createExportWrapper("emscripten_bind_SIGContainResource_description_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_print_2 = Module["_emscripten_bind_SIGContainResource_print_2"] = createExportWrapper("emscripten_bind_SIGContainResource_print_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_arrival_0 = Module["_emscripten_bind_SIGContainResource_arrival_0"] = createExportWrapper("emscripten_bind_SIGContainResource_arrival_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_hourCost_0 = Module["_emscripten_bind_SIGContainResource_hourCost_0"] = createExportWrapper("emscripten_bind_SIGContainResource_hourCost_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_duration_0 = Module["_emscripten_bind_SIGContainResource_duration_0"] = createExportWrapper("emscripten_bind_SIGContainResource_duration_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_production_0 = Module["_emscripten_bind_SIGContainResource_production_0"] = createExportWrapper("emscripten_bind_SIGContainResource_production_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_baseCost_0 = Module["_emscripten_bind_SIGContainResource_baseCost_0"] = createExportWrapper("emscripten_bind_SIGContainResource_baseCost_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource_flank_0 = Module["_emscripten_bind_SIGContainResource_flank_0"] = createExportWrapper("emscripten_bind_SIGContainResource_flank_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainResource___destroy___0 = Module["_emscripten_bind_SIGContainResource___destroy___0"] = createExportWrapper("emscripten_bind_SIGContainResource___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_SIGContainForce_1 = Module["_emscripten_bind_SIGContainForce_SIGContainForce_1"] = createExportWrapper("emscripten_bind_SIGContainForce_SIGContainForce_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_addResource_1 = Module["_emscripten_bind_SIGContainForce_addResource_1"] = createExportWrapper("emscripten_bind_SIGContainForce_addResource_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_addResource_7 = Module["_emscripten_bind_SIGContainForce_addResource_7"] = createExportWrapper("emscripten_bind_SIGContainForce_addResource_7");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_exhausted_1 = Module["_emscripten_bind_SIGContainForce_exhausted_1"] = createExportWrapper("emscripten_bind_SIGContainForce_exhausted_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_firstArrival_1 = Module["_emscripten_bind_SIGContainForce_firstArrival_1"] = createExportWrapper("emscripten_bind_SIGContainForce_firstArrival_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_nextArrival_3 = Module["_emscripten_bind_SIGContainForce_nextArrival_3"] = createExportWrapper("emscripten_bind_SIGContainForce_nextArrival_3");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_productionRate_2 = Module["_emscripten_bind_SIGContainForce_productionRate_2"] = createExportWrapper("emscripten_bind_SIGContainForce_productionRate_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resources_0 = Module["_emscripten_bind_SIGContainForce_resources_0"] = createExportWrapper("emscripten_bind_SIGContainForce_resources_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceArrival_1 = Module["_emscripten_bind_SIGContainForce_resourceArrival_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceArrival_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceBaseCost_1 = Module["_emscripten_bind_SIGContainForce_resourceBaseCost_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceBaseCost_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceCost_2 = Module["_emscripten_bind_SIGContainForce_resourceCost_2"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceCost_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceDescription_1 = Module["_emscripten_bind_SIGContainForce_resourceDescription_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceDescription_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceDuration_1 = Module["_emscripten_bind_SIGContainForce_resourceDuration_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceDuration_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceFlank_1 = Module["_emscripten_bind_SIGContainForce_resourceFlank_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceFlank_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceHourCost_1 = Module["_emscripten_bind_SIGContainForce_resourceHourCost_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceHourCost_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce_resourceProduction_1 = Module["_emscripten_bind_SIGContainForce_resourceProduction_1"] = createExportWrapper("emscripten_bind_SIGContainForce_resourceProduction_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForce___destroy___0 = Module["_emscripten_bind_SIGContainForce___destroy___0"] = createExportWrapper("emscripten_bind_SIGContainForce___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0 = Module["_emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter_addResource_7 = Module["_emscripten_bind_SIGContainForceAdapter_addResource_7"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter_addResource_7");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter_firstArrival_1 = Module["_emscripten_bind_SIGContainForceAdapter_firstArrival_1"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter_firstArrival_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter_removeResourceAt_1 = Module["_emscripten_bind_SIGContainForceAdapter_removeResourceAt_1"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter_removeResourceAt_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1 = Module["_emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1 = Module["_emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainForceAdapter___destroy___0 = Module["_emscripten_bind_SIGContainForceAdapter___destroy___0"] = createExportWrapper("emscripten_bind_SIGContainForceAdapter___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_SIGContainSim_13 = Module["_emscripten_bind_SIGContainSim_SIGContainSim_13"] = createExportWrapper("emscripten_bind_SIGContainSim_SIGContainSim_13");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_attackDistance_0 = Module["_emscripten_bind_SIGContainSim_attackDistance_0"] = createExportWrapper("emscripten_bind_SIGContainSim_attackDistance_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_attackPointX_0 = Module["_emscripten_bind_SIGContainSim_attackPointX_0"] = createExportWrapper("emscripten_bind_SIGContainSim_attackPointX_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_attackPointY_0 = Module["_emscripten_bind_SIGContainSim_attackPointY_0"] = createExportWrapper("emscripten_bind_SIGContainSim_attackPointY_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_attackTime_0 = Module["_emscripten_bind_SIGContainSim_attackTime_0"] = createExportWrapper("emscripten_bind_SIGContainSim_attackTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_distanceStep_0 = Module["_emscripten_bind_SIGContainSim_distanceStep_0"] = createExportWrapper("emscripten_bind_SIGContainSim_distanceStep_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireBackAtAttack_0 = Module["_emscripten_bind_SIGContainSim_fireBackAtAttack_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireBackAtAttack_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireBackAtReport_0 = Module["_emscripten_bind_SIGContainSim_fireBackAtReport_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireBackAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireHeadAtAttack_0 = Module["_emscripten_bind_SIGContainSim_fireHeadAtAttack_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireHeadAtAttack_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireHeadAtReport_0 = Module["_emscripten_bind_SIGContainSim_fireHeadAtReport_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireHeadAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireLwRatioAtReport_0 = Module["_emscripten_bind_SIGContainSim_fireLwRatioAtReport_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireLwRatioAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireReportTime_0 = Module["_emscripten_bind_SIGContainSim_fireReportTime_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireReportTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireSizeAtReport_0 = Module["_emscripten_bind_SIGContainSim_fireSizeAtReport_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireSizeAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0 = Module["_emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0 = Module["_emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_force_0 = Module["_emscripten_bind_SIGContainSim_force_0"] = createExportWrapper("emscripten_bind_SIGContainSim_force_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_maximumSimulationSteps_0 = Module["_emscripten_bind_SIGContainSim_maximumSimulationSteps_0"] = createExportWrapper("emscripten_bind_SIGContainSim_maximumSimulationSteps_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_minimumSimulationSteps_0 = Module["_emscripten_bind_SIGContainSim_minimumSimulationSteps_0"] = createExportWrapper("emscripten_bind_SIGContainSim_minimumSimulationSteps_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_status_0 = Module["_emscripten_bind_SIGContainSim_status_0"] = createExportWrapper("emscripten_bind_SIGContainSim_status_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_tactic_0 = Module["_emscripten_bind_SIGContainSim_tactic_0"] = createExportWrapper("emscripten_bind_SIGContainSim_tactic_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalFireCost_0 = Module["_emscripten_bind_SIGContainSim_finalFireCost_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalFireCost_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalFireLine_0 = Module["_emscripten_bind_SIGContainSim_finalFireLine_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalFireLine_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalFirePerimeter_0 = Module["_emscripten_bind_SIGContainSim_finalFirePerimeter_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalFirePerimeter_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalFireSize_0 = Module["_emscripten_bind_SIGContainSim_finalFireSize_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalFireSize_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalFireSweep_0 = Module["_emscripten_bind_SIGContainSim_finalFireSweep_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalFireSweep_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalFireTime_0 = Module["_emscripten_bind_SIGContainSim_finalFireTime_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalFireTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_finalResourcesUsed_0 = Module["_emscripten_bind_SIGContainSim_finalResourcesUsed_0"] = createExportWrapper("emscripten_bind_SIGContainSim_finalResourcesUsed_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_fireHeadX_0 = Module["_emscripten_bind_SIGContainSim_fireHeadX_0"] = createExportWrapper("emscripten_bind_SIGContainSim_fireHeadX_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_firePerimeterY_0 = Module["_emscripten_bind_SIGContainSim_firePerimeterY_0"] = createExportWrapper("emscripten_bind_SIGContainSim_firePerimeterY_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_firePerimeterX_0 = Module["_emscripten_bind_SIGContainSim_firePerimeterX_0"] = createExportWrapper("emscripten_bind_SIGContainSim_firePerimeterX_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_firePoints_0 = Module["_emscripten_bind_SIGContainSim_firePoints_0"] = createExportWrapper("emscripten_bind_SIGContainSim_firePoints_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_checkmem_5 = Module["_emscripten_bind_SIGContainSim_checkmem_5"] = createExportWrapper("emscripten_bind_SIGContainSim_checkmem_5");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_run_0 = Module["_emscripten_bind_SIGContainSim_run_0"] = createExportWrapper("emscripten_bind_SIGContainSim_run_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim_UncontainedArea_5 = Module["_emscripten_bind_SIGContainSim_UncontainedArea_5"] = createExportWrapper("emscripten_bind_SIGContainSim_UncontainedArea_5");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainSim___destroy___0 = Module["_emscripten_bind_SIGContainSim___destroy___0"] = createExportWrapper("emscripten_bind_SIGContainSim___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0 = Module["_emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0"] = createExportWrapper("emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGDiurnalROS_push_1 = Module["_emscripten_bind_SIGDiurnalROS_push_1"] = createExportWrapper("emscripten_bind_SIGDiurnalROS_push_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGDiurnalROS_at_1 = Module["_emscripten_bind_SIGDiurnalROS_at_1"] = createExportWrapper("emscripten_bind_SIGDiurnalROS_at_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGDiurnalROS_size_0 = Module["_emscripten_bind_SIGDiurnalROS_size_0"] = createExportWrapper("emscripten_bind_SIGDiurnalROS_size_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGDiurnalROS___destroy___0 = Module["_emscripten_bind_SIGDiurnalROS___destroy___0"] = createExportWrapper("emscripten_bind_SIGDiurnalROS___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_SIGContain_11 = Module["_emscripten_bind_SIGContain_SIGContain_11"] = createExportWrapper("emscripten_bind_SIGContain_SIGContain_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_simulationTime_0 = Module["_emscripten_bind_SIGContain_simulationTime_0"] = createExportWrapper("emscripten_bind_SIGContain_simulationTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireSpreadRateAtBack_0 = Module["_emscripten_bind_SIGContain_fireSpreadRateAtBack_0"] = createExportWrapper("emscripten_bind_SIGContain_fireSpreadRateAtBack_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireLwRatioAtReport_0 = Module["_emscripten_bind_SIGContain_fireLwRatioAtReport_0"] = createExportWrapper("emscripten_bind_SIGContain_fireLwRatioAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_force_0 = Module["_emscripten_bind_SIGContain_force_0"] = createExportWrapper("emscripten_bind_SIGContain_force_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resourceHourCost_1 = Module["_emscripten_bind_SIGContain_resourceHourCost_1"] = createExportWrapper("emscripten_bind_SIGContain_resourceHourCost_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_attackDistance_0 = Module["_emscripten_bind_SIGContain_attackDistance_0"] = createExportWrapper("emscripten_bind_SIGContain_attackDistance_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_attackPointX_0 = Module["_emscripten_bind_SIGContain_attackPointX_0"] = createExportWrapper("emscripten_bind_SIGContain_attackPointX_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireHeadAtAttack_0 = Module["_emscripten_bind_SIGContain_fireHeadAtAttack_0"] = createExportWrapper("emscripten_bind_SIGContain_fireHeadAtAttack_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_attackPointY_0 = Module["_emscripten_bind_SIGContain_attackPointY_0"] = createExportWrapper("emscripten_bind_SIGContain_attackPointY_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_attackTime_0 = Module["_emscripten_bind_SIGContain_attackTime_0"] = createExportWrapper("emscripten_bind_SIGContain_attackTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resourceBaseCost_1 = Module["_emscripten_bind_SIGContain_resourceBaseCost_1"] = createExportWrapper("emscripten_bind_SIGContain_resourceBaseCost_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireSpreadRateAtReport_0 = Module["_emscripten_bind_SIGContain_fireSpreadRateAtReport_0"] = createExportWrapper("emscripten_bind_SIGContain_fireSpreadRateAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireHeadAtReport_0 = Module["_emscripten_bind_SIGContain_fireHeadAtReport_0"] = createExportWrapper("emscripten_bind_SIGContain_fireHeadAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireReportTime_0 = Module["_emscripten_bind_SIGContain_fireReportTime_0"] = createExportWrapper("emscripten_bind_SIGContain_fireReportTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resourceProduction_1 = Module["_emscripten_bind_SIGContain_resourceProduction_1"] = createExportWrapper("emscripten_bind_SIGContain_resourceProduction_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireBackAtAttack_0 = Module["_emscripten_bind_SIGContain_fireBackAtAttack_0"] = createExportWrapper("emscripten_bind_SIGContain_fireBackAtAttack_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_simulationStep_0 = Module["_emscripten_bind_SIGContain_simulationStep_0"] = createExportWrapper("emscripten_bind_SIGContain_simulationStep_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_tactic_0 = Module["_emscripten_bind_SIGContain_tactic_0"] = createExportWrapper("emscripten_bind_SIGContain_tactic_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resourceDescription_1 = Module["_emscripten_bind_SIGContain_resourceDescription_1"] = createExportWrapper("emscripten_bind_SIGContain_resourceDescription_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_distanceStep_0 = Module["_emscripten_bind_SIGContain_distanceStep_0"] = createExportWrapper("emscripten_bind_SIGContain_distanceStep_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_status_0 = Module["_emscripten_bind_SIGContain_status_0"] = createExportWrapper("emscripten_bind_SIGContain_status_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resourceArrival_1 = Module["_emscripten_bind_SIGContain_resourceArrival_1"] = createExportWrapper("emscripten_bind_SIGContain_resourceArrival_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireSizeAtReport_0 = Module["_emscripten_bind_SIGContain_fireSizeAtReport_0"] = createExportWrapper("emscripten_bind_SIGContain_fireSizeAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_setFireStartTimeMinutes_1 = Module["_emscripten_bind_SIGContain_setFireStartTimeMinutes_1"] = createExportWrapper("emscripten_bind_SIGContain_setFireStartTimeMinutes_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_fireBackAtReport_0 = Module["_emscripten_bind_SIGContain_fireBackAtReport_0"] = createExportWrapper("emscripten_bind_SIGContain_fireBackAtReport_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resourceDuration_1 = Module["_emscripten_bind_SIGContain_resourceDuration_1"] = createExportWrapper("emscripten_bind_SIGContain_resourceDuration_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_resources_0 = Module["_emscripten_bind_SIGContain_resources_0"] = createExportWrapper("emscripten_bind_SIGContain_resources_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain_exhaustedTime_0 = Module["_emscripten_bind_SIGContain_exhaustedTime_0"] = createExportWrapper("emscripten_bind_SIGContain_exhaustedTime_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContain___destroy___0 = Module["_emscripten_bind_SIGContain___destroy___0"] = createExportWrapper("emscripten_bind_SIGContain___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_SIGContainAdapter_0 = Module["_emscripten_bind_SIGContainAdapter_SIGContainAdapter_0"] = createExportWrapper("emscripten_bind_SIGContainAdapter_SIGContainAdapter_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setReportSize_2 = Module["_emscripten_bind_SIGContainAdapter_setReportSize_2"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setReportSize_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setLwRatio_1 = Module["_emscripten_bind_SIGContainAdapter_setLwRatio_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setLwRatio_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setMaxFireTime_1 = Module["_emscripten_bind_SIGContainAdapter_setMaxFireTime_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setMaxFireTime_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_doContainRun_0 = Module["_emscripten_bind_SIGContainAdapter_doContainRun_0"] = createExportWrapper("emscripten_bind_SIGContainAdapter_doContainRun_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setReportRate_2 = Module["_emscripten_bind_SIGContainAdapter_setReportRate_2"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setReportRate_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1 = Module["_emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setTactic_1 = Module["_emscripten_bind_SIGContainAdapter_setTactic_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setTactic_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_removeAllResources_0 = Module["_emscripten_bind_SIGContainAdapter_removeAllResources_0"] = createExportWrapper("emscripten_bind_SIGContainAdapter_removeAllResources_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getFinalFireSize_1 = Module["_emscripten_bind_SIGContainAdapter_getFinalFireSize_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getFinalFireSize_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1 = Module["_emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setAttackDistance_2 = Module["_emscripten_bind_SIGContainAdapter_setAttackDistance_2"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setAttackDistance_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getContainmentStatus_0 = Module["_emscripten_bind_SIGContainAdapter_getContainmentStatus_0"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getContainmentStatus_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1 = Module["_emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1 = Module["_emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1 = Module["_emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setRetry_1 = Module["_emscripten_bind_SIGContainAdapter_setRetry_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setRetry_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1 = Module["_emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_removeResourceAt_1 = Module["_emscripten_bind_SIGContainAdapter_removeResourceAt_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_removeResourceAt_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1 = Module["_emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getFinalCost_0 = Module["_emscripten_bind_SIGContainAdapter_getFinalCost_0"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getFinalCost_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1 = Module["_emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setFireStartTime_1 = Module["_emscripten_bind_SIGContainAdapter_setFireStartTime_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setFireStartTime_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setMinSteps_1 = Module["_emscripten_bind_SIGContainAdapter_setMinSteps_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setMinSteps_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setMaxSteps_1 = Module["_emscripten_bind_SIGContainAdapter_setMaxSteps_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setMaxSteps_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_setMaxFireSize_1 = Module["_emscripten_bind_SIGContainAdapter_setMaxFireSize_1"] = createExportWrapper("emscripten_bind_SIGContainAdapter_setMaxFireSize_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter_addResource_8 = Module["_emscripten_bind_SIGContainAdapter_addResource_8"] = createExportWrapper("emscripten_bind_SIGContainAdapter_addResource_8");

/** @type {function(...*):?} */
var _emscripten_bind_SIGContainAdapter___destroy___0 = Module["_emscripten_bind_SIGContainAdapter___destroy___0"] = createExportWrapper("emscripten_bind_SIGContainAdapter___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0 = Module["_emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_initializeMembers_0 = Module["_emscripten_bind_SIGIgniteInputs_initializeMembers_0"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_initializeMembers_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setAirTemperature_2 = Module["_emscripten_bind_SIGIgniteInputs_setAirTemperature_2"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setAirTemperature_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setDuffDepth_2 = Module["_emscripten_bind_SIGIgniteInputs_setDuffDepth_2"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setDuffDepth_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1 = Module["_emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setLightningChargeType_1 = Module["_emscripten_bind_SIGIgniteInputs_setLightningChargeType_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setLightningChargeType_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2 = Module["_emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2 = Module["_emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_setSunShade_2 = Module["_emscripten_bind_SIGIgniteInputs_setSunShade_2"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_setSunShade_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11 = Module["_emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0 = Module["_emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getLightningChargeType_0 = Module["_emscripten_bind_SIGIgniteInputs_getLightningChargeType_0"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getLightningChargeType_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getAirTemperature_1 = Module["_emscripten_bind_SIGIgniteInputs_getAirTemperature_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getAirTemperature_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getDuffDepth_1 = Module["_emscripten_bind_SIGIgniteInputs_getDuffDepth_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getDuffDepth_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1 = Module["_emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1 = Module["_emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs_getSunShade_1 = Module["_emscripten_bind_SIGIgniteInputs_getSunShade_1"] = createExportWrapper("emscripten_bind_SIGIgniteInputs_getSunShade_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgniteInputs___destroy___0 = Module["_emscripten_bind_SIGIgniteInputs___destroy___0"] = createExportWrapper("emscripten_bind_SIGIgniteInputs___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_SIGIgnite_0 = Module["_emscripten_bind_SIGIgnite_SIGIgnite_0"] = createExportWrapper("emscripten_bind_SIGIgnite_SIGIgnite_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_initializeMembers_0 = Module["_emscripten_bind_SIGIgnite_initializeMembers_0"] = createExportWrapper("emscripten_bind_SIGIgnite_initializeMembers_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getFuelBedType_0 = Module["_emscripten_bind_SIGIgnite_getFuelBedType_0"] = createExportWrapper("emscripten_bind_SIGIgnite_getFuelBedType_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getLightningChargeType_0 = Module["_emscripten_bind_SIGIgnite_getLightningChargeType_0"] = createExportWrapper("emscripten_bind_SIGIgnite_getLightningChargeType_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1 = Module["_emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1"] = createExportWrapper("emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1 = Module["_emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1"] = createExportWrapper("emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setAirTemperature_2 = Module["_emscripten_bind_SIGIgnite_setAirTemperature_2"] = createExportWrapper("emscripten_bind_SIGIgnite_setAirTemperature_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setDuffDepth_2 = Module["_emscripten_bind_SIGIgnite_setDuffDepth_2"] = createExportWrapper("emscripten_bind_SIGIgnite_setDuffDepth_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1 = Module["_emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1"] = createExportWrapper("emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setLightningChargeType_1 = Module["_emscripten_bind_SIGIgnite_setLightningChargeType_1"] = createExportWrapper("emscripten_bind_SIGIgnite_setLightningChargeType_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setMoistureHundredHour_2 = Module["_emscripten_bind_SIGIgnite_setMoistureHundredHour_2"] = createExportWrapper("emscripten_bind_SIGIgnite_setMoistureHundredHour_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setMoistureOneHour_2 = Module["_emscripten_bind_SIGIgnite_setMoistureOneHour_2"] = createExportWrapper("emscripten_bind_SIGIgnite_setMoistureOneHour_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_setSunShade_2 = Module["_emscripten_bind_SIGIgnite_setSunShade_2"] = createExportWrapper("emscripten_bind_SIGIgnite_setSunShade_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_updateIgniteInputs_11 = Module["_emscripten_bind_SIGIgnite_updateIgniteInputs_11"] = createExportWrapper("emscripten_bind_SIGIgnite_updateIgniteInputs_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getAirTemperature_1 = Module["_emscripten_bind_SIGIgnite_getAirTemperature_1"] = createExportWrapper("emscripten_bind_SIGIgnite_getAirTemperature_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getDuffDepth_1 = Module["_emscripten_bind_SIGIgnite_getDuffDepth_1"] = createExportWrapper("emscripten_bind_SIGIgnite_getDuffDepth_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getFuelTemperature_1 = Module["_emscripten_bind_SIGIgnite_getFuelTemperature_1"] = createExportWrapper("emscripten_bind_SIGIgnite_getFuelTemperature_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getMoistureHundredHour_1 = Module["_emscripten_bind_SIGIgnite_getMoistureHundredHour_1"] = createExportWrapper("emscripten_bind_SIGIgnite_getMoistureHundredHour_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getMoistureOneHour_1 = Module["_emscripten_bind_SIGIgnite_getMoistureOneHour_1"] = createExportWrapper("emscripten_bind_SIGIgnite_getMoistureOneHour_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_getSunShade_1 = Module["_emscripten_bind_SIGIgnite_getSunShade_1"] = createExportWrapper("emscripten_bind_SIGIgnite_getSunShade_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite_isFuelDepthNeeded_0 = Module["_emscripten_bind_SIGIgnite_isFuelDepthNeeded_0"] = createExportWrapper("emscripten_bind_SIGIgnite_isFuelDepthNeeded_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGIgnite___destroy___0 = Module["_emscripten_bind_SIGIgnite___destroy___0"] = createExportWrapper("emscripten_bind_SIGIgnite___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_SIGSpotInputs_0 = Module["_emscripten_bind_SIGSpotInputs_SIGSpotInputs_0"] = createExportWrapper("emscripten_bind_SIGSpotInputs_SIGSpotInputs_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getLocation_0 = Module["_emscripten_bind_SIGSpotInputs_getLocation_0"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getLocation_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getTreeSpecies_0 = Module["_emscripten_bind_SIGSpotInputs_getTreeSpecies_0"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getTreeSpecies_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2 = Module["_emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setDBH_2 = Module["_emscripten_bind_SIGSpotInputs_setDBH_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setDBH_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2 = Module["_emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setLocation_1 = Module["_emscripten_bind_SIGSpotInputs_setLocation_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setLocation_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2 = Module["_emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2 = Module["_emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2 = Module["_emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setTorchingTrees_1 = Module["_emscripten_bind_SIGSpotInputs_setTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setTreeHeight_2 = Module["_emscripten_bind_SIGSpotInputs_setTreeHeight_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setTreeHeight_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setTreeSpecies_1 = Module["_emscripten_bind_SIGSpotInputs_setTreeSpecies_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setTreeSpecies_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2 = Module["_emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2"] = createExportWrapper("emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11 = Module["_emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11"] = createExportWrapper("emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11 = Module["_emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11"] = createExportWrapper("emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15 = Module["_emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15"] = createExportWrapper("emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1 = Module["_emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getDBH_1 = Module["_emscripten_bind_SIGSpotInputs_getDBH_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getDBH_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1 = Module["_emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1 = Module["_emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1 = Module["_emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1 = Module["_emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getTreeHeight_1 = Module["_emscripten_bind_SIGSpotInputs_getTreeHeight_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getTreeHeight_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1 = Module["_emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs_getTorchingTrees_0 = Module["_emscripten_bind_SIGSpotInputs_getTorchingTrees_0"] = createExportWrapper("emscripten_bind_SIGSpotInputs_getTorchingTrees_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpotInputs___destroy___0 = Module["_emscripten_bind_SIGSpotInputs___destroy___0"] = createExportWrapper("emscripten_bind_SIGSpotInputs___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_SIGSpot_0 = Module["_emscripten_bind_SIGSpot_SIGSpot_0"] = createExportWrapper("emscripten_bind_SIGSpot_SIGSpot_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_initializeMembers_0 = Module["_emscripten_bind_SIGSpot_initializeMembers_0"] = createExportWrapper("emscripten_bind_SIGSpot_initializeMembers_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0 = Module["_emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0"] = createExportWrapper("emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0 = Module["_emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0"] = createExportWrapper("emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0 = Module["_emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0"] = createExportWrapper("emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setBurningPileFlameHeight_2 = Module["_emscripten_bind_SIGSpot_setBurningPileFlameHeight_2"] = createExportWrapper("emscripten_bind_SIGSpot_setBurningPileFlameHeight_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setDBH_2 = Module["_emscripten_bind_SIGSpot_setDBH_2"] = createExportWrapper("emscripten_bind_SIGSpot_setDBH_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setDownwindCoverHeight_2 = Module["_emscripten_bind_SIGSpot_setDownwindCoverHeight_2"] = createExportWrapper("emscripten_bind_SIGSpot_setDownwindCoverHeight_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setFlameLength_2 = Module["_emscripten_bind_SIGSpot_setFlameLength_2"] = createExportWrapper("emscripten_bind_SIGSpot_setFlameLength_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setLocation_1 = Module["_emscripten_bind_SIGSpot_setLocation_1"] = createExportWrapper("emscripten_bind_SIGSpot_setLocation_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setRidgeToValleyDistance_2 = Module["_emscripten_bind_SIGSpot_setRidgeToValleyDistance_2"] = createExportWrapper("emscripten_bind_SIGSpot_setRidgeToValleyDistance_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setRidgeToValleyElevation_2 = Module["_emscripten_bind_SIGSpot_setRidgeToValleyElevation_2"] = createExportWrapper("emscripten_bind_SIGSpot_setRidgeToValleyElevation_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_setTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_setTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setTreeHeight_2 = Module["_emscripten_bind_SIGSpot_setTreeHeight_2"] = createExportWrapper("emscripten_bind_SIGSpot_setTreeHeight_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setTreeSpecies_1 = Module["_emscripten_bind_SIGSpot_setTreeSpecies_1"] = createExportWrapper("emscripten_bind_SIGSpot_setTreeSpecies_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2 = Module["_emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2"] = createExportWrapper("emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11 = Module["_emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11"] = createExportWrapper("emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11 = Module["_emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11"] = createExportWrapper("emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15 = Module["_emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15"] = createExportWrapper("emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getTorchingTrees_0 = Module["_emscripten_bind_SIGSpot_getTorchingTrees_0"] = createExportWrapper("emscripten_bind_SIGSpot_getTorchingTrees_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getLocation_0 = Module["_emscripten_bind_SIGSpot_getLocation_0"] = createExportWrapper("emscripten_bind_SIGSpot_getLocation_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getTreeSpecies_0 = Module["_emscripten_bind_SIGSpot_getTreeSpecies_0"] = createExportWrapper("emscripten_bind_SIGSpot_getTreeSpecies_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getBurningPileFlameHeight_1 = Module["_emscripten_bind_SIGSpot_getBurningPileFlameHeight_1"] = createExportWrapper("emscripten_bind_SIGSpot_getBurningPileFlameHeight_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1 = Module["_emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1"] = createExportWrapper("emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1 = Module["_emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1"] = createExportWrapper("emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getDBH_1 = Module["_emscripten_bind_SIGSpot_getDBH_1"] = createExportWrapper("emscripten_bind_SIGSpot_getDBH_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getDownwindCoverHeight_1 = Module["_emscripten_bind_SIGSpot_getDownwindCoverHeight_1"] = createExportWrapper("emscripten_bind_SIGSpot_getDownwindCoverHeight_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0 = Module["_emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0"] = createExportWrapper("emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1 = Module["_emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1 = Module["_emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1 = Module["_emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1 = Module["_emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1 = Module["_emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1 = Module["_emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1 = Module["_emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1"] = createExportWrapper("emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getRidgeToValleyDistance_1 = Module["_emscripten_bind_SIGSpot_getRidgeToValleyDistance_1"] = createExportWrapper("emscripten_bind_SIGSpot_getRidgeToValleyDistance_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getRidgeToValleyElevation_1 = Module["_emscripten_bind_SIGSpot_getRidgeToValleyElevation_1"] = createExportWrapper("emscripten_bind_SIGSpot_getRidgeToValleyElevation_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getSurfaceFlameLength_1 = Module["_emscripten_bind_SIGSpot_getSurfaceFlameLength_1"] = createExportWrapper("emscripten_bind_SIGSpot_getSurfaceFlameLength_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getTreeHeight_1 = Module["_emscripten_bind_SIGSpot_getTreeHeight_1"] = createExportWrapper("emscripten_bind_SIGSpot_getTreeHeight_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1 = Module["_emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1"] = createExportWrapper("emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1");

/** @type {function(...*):?} */
var _emscripten_bind_SIGSpot___destroy___0 = Module["_emscripten_bind_SIGSpot___destroy___0"] = createExportWrapper("emscripten_bind_SIGSpot___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_PalmettoGallberry_0 = Module["_emscripten_bind_PalmettoGallberry_PalmettoGallberry_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_PalmettoGallberry_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_initializeMembers_0 = Module["_emscripten_bind_PalmettoGallberry_initializeMembers_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_initializeMembers_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0 = Module["_emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0 = Module["_emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0 = Module["_emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0 = Module["_emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0"] = createExportWrapper("emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1 = Module["_emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1"] = createExportWrapper("emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1");

/** @type {function(...*):?} */
var _emscripten_bind_PalmettoGallberry___destroy___0 = Module["_emscripten_bind_PalmettoGallberry___destroy___0"] = createExportWrapper("emscripten_bind_PalmettoGallberry___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_WesternAspen_0 = Module["_emscripten_bind_WesternAspen_WesternAspen_0"] = createExportWrapper("emscripten_bind_WesternAspen_WesternAspen_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_initializeMembers_0 = Module["_emscripten_bind_WesternAspen_initializeMembers_0"] = createExportWrapper("emscripten_bind_WesternAspen_initializeMembers_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_calculateAspenMortality_3 = Module["_emscripten_bind_WesternAspen_calculateAspenMortality_3"] = createExportWrapper("emscripten_bind_WesternAspen_calculateAspenMortality_3");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenDBH_0 = Module["_emscripten_bind_WesternAspen_getAspenDBH_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenDBH_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenFuelBedDepth_1 = Module["_emscripten_bind_WesternAspen_getAspenFuelBedDepth_1"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenFuelBedDepth_1");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0 = Module["_emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0 = Module["_emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2 = Module["_emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1 = Module["_emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2 = Module["_emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2 = Module["_emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0 = Module["_emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenMortality_0 = Module["_emscripten_bind_WesternAspen_getAspenMortality_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenMortality_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2 = Module["_emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0 = Module["_emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0 = Module["_emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2 = Module["_emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2"] = createExportWrapper("emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2");

/** @type {function(...*):?} */
var _emscripten_bind_WesternAspen___destroy___0 = Module["_emscripten_bind_WesternAspen___destroy___0"] = createExportWrapper("emscripten_bind_WesternAspen___destroy___0");

/** @type {function(...*):?} */
var _emscripten_bind_WindSpeedUtility_WindSpeedUtility_0 = Module["_emscripten_bind_WindSpeedUtility_WindSpeedUtility_0"] = createExportWrapper("emscripten_bind_WindSpeedUtility_WindSpeedUtility_0");

/** @type {function(...*):?} */
var _emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2 = Module["_emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2"] = createExportWrapper("emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2");

/** @type {function(...*):?} */
var _emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1 = Module["_emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1"] = createExportWrapper("emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1");

/** @type {function(...*):?} */
var _emscripten_bind_WindSpeedUtility___destroy___0 = Module["_emscripten_bind_WindSpeedUtility___destroy___0"] = createExportWrapper("emscripten_bind_WindSpeedUtility___destroy___0");

/** @type {function(...*):?} */
var _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet = Module["_emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet"] = createExportWrapper("emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet");

/** @type {function(...*):?} */
var _emscripten_enum_AreaUnits_AreaUnitsEnum_Acres = Module["_emscripten_enum_AreaUnits_AreaUnitsEnum_Acres"] = createExportWrapper("emscripten_enum_AreaUnits_AreaUnitsEnum_Acres");

/** @type {function(...*):?} */
var _emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares = Module["_emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares"] = createExportWrapper("emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares");

/** @type {function(...*):?} */
var _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters = Module["_emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters"] = createExportWrapper("emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters");

/** @type {function(...*):?} */
var _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles = Module["_emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles"] = createExportWrapper("emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles");

/** @type {function(...*):?} */
var _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers = Module["_emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers"] = createExportWrapper("emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Feet = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Feet"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Feet");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Inches = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Inches"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Inches");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Meters = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Meters"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Meters");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Chains = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Chains"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Chains");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Miles = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Miles"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Miles");

/** @type {function(...*):?} */
var _emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers = Module["_emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers"] = createExportWrapper("emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers");

/** @type {function(...*):?} */
var _emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot = Module["_emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot"] = createExportWrapper("emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot");

/** @type {function(...*):?} */
var _emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre = Module["_emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre"] = createExportWrapper("emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre");

/** @type {function(...*):?} */
var _emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare = Module["_emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare"] = createExportWrapper("emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare");

/** @type {function(...*):?} */
var _emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter = Module["_emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter"] = createExportWrapper("emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter");

/** @type {function(...*):?} */
var _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet = Module["_emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet"] = createExportWrapper("emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet");

/** @type {function(...*):?} */
var _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters = Module["_emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters"] = createExportWrapper("emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters");

/** @type {function(...*):?} */
var _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches = Module["_emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches"] = createExportWrapper("emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches");

/** @type {function(...*):?} */
var _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers = Module["_emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers"] = createExportWrapper("emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers");

/** @type {function(...*):?} */
var _emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction = Module["_emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction"] = createExportWrapper("emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction");

/** @type {function(...*):?} */
var _emscripten_enum_CoverUnits_CoverUnitsEnum_Percent = Module["_emscripten_enum_CoverUnits_CoverUnitsEnum_Percent"] = createExportWrapper("emscripten_enum_CoverUnits_CoverUnitsEnum_Percent");

/** @type {function(...*):?} */
var _emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute = Module["_emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute"] = createExportWrapper("emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute");

/** @type {function(...*):?} */
var _emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour = Module["_emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour"] = createExportWrapper("emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour");

/** @type {function(...*):?} */
var _emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond = Module["_emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond"] = createExportWrapper("emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond");

/** @type {function(...*):?} */
var _emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute = Module["_emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute"] = createExportWrapper("emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute");

/** @type {function(...*):?} */
var _emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour = Module["_emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour"] = createExportWrapper("emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour");

/** @type {function(...*):?} */
var _emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour = Module["_emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour"] = createExportWrapper("emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour");

/** @type {function(...*):?} */
var _emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction = Module["_emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction"] = createExportWrapper("emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction");

/** @type {function(...*):?} */
var _emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent = Module["_emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent"] = createExportWrapper("emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent");

/** @type {function(...*):?} */
var _emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction = Module["_emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction"] = createExportWrapper("emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction");

/** @type {function(...*):?} */
var _emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent = Module["_emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent"] = createExportWrapper("emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent");

/** @type {function(...*):?} */
var _emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees = Module["_emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees"] = createExportWrapper("emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees");

/** @type {function(...*):?} */
var _emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent = Module["_emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent"] = createExportWrapper("emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent");

/** @type {function(...*):?} */
var _emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot = Module["_emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot"] = createExportWrapper("emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot");

/** @type {function(...*):?} */
var _emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter = Module["_emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter"] = createExportWrapper("emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter");

/** @type {function(...*):?} */
var _emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound = Module["_emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound"] = createExportWrapper("emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound");

/** @type {function(...*):?} */
var _emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram = Module["_emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram"] = createExportWrapper("emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot = Module["_emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot"] = createExportWrapper("emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter = Module["_emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter"] = createExportWrapper("emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter");

/** @type {function(...*):?} */
var _emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot = Module["_emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot"] = createExportWrapper("emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot");

/** @type {function(...*):?} */
var _emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond = Module["_emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond"] = createExportWrapper("emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond");

/** @type {function(...*):?} */
var _emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter = Module["_emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter"] = createExportWrapper("emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute = Module["_emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute"] = createExportWrapper("emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond = Module["_emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond"] = createExportWrapper("emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond = Module["_emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond"] = createExportWrapper("emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute = Module["_emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute"] = createExportWrapper("emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute");

/** @type {function(...*):?} */
var _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter = Module["_emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter"] = createExportWrapper("emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter");

/** @type {function(...*):?} */
var _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond = Module["_emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond"] = createExportWrapper("emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond");

/** @type {function(...*):?} */
var _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute = Module["_emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute"] = createExportWrapper("emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute");

/** @type {function(...*):?} */
var _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond = Module["_emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond"] = createExportWrapper("emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond");

/** @type {function(...*):?} */
var _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute = Module["_emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute"] = createExportWrapper("emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute");

/** @type {function(...*):?} */
var _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter = Module["_emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter"] = createExportWrapper("emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter");

/** @type {function(...*):?} */
var _emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit = Module["_emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit"] = createExportWrapper("emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit");

/** @type {function(...*):?} */
var _emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius = Module["_emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius"] = createExportWrapper("emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius");

/** @type {function(...*):?} */
var _emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin = Module["_emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin"] = createExportWrapper("emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin");

/** @type {function(...*):?} */
var _emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes = Module["_emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes"] = createExportWrapper("emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes");

/** @type {function(...*):?} */
var _emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds = Module["_emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds"] = createExportWrapper("emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds");

/** @type {function(...*):?} */
var _emscripten_enum_TimeUnits_TimeUnitsEnum_Hours = Module["_emscripten_enum_TimeUnits_TimeUnitsEnum_Hours"] = createExportWrapper("emscripten_enum_TimeUnits_TimeUnitsEnum_Hours");

/** @type {function(...*):?} */
var _emscripten_enum_ContainTactic_HeadAttack = Module["_emscripten_enum_ContainTactic_HeadAttack"] = createExportWrapper("emscripten_enum_ContainTactic_HeadAttack");

/** @type {function(...*):?} */
var _emscripten_enum_ContainTactic_RearAttack = Module["_emscripten_enum_ContainTactic_RearAttack"] = createExportWrapper("emscripten_enum_ContainTactic_RearAttack");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Unreported = Module["_emscripten_enum_ContainStatus_Unreported"] = createExportWrapper("emscripten_enum_ContainStatus_Unreported");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Reported = Module["_emscripten_enum_ContainStatus_Reported"] = createExportWrapper("emscripten_enum_ContainStatus_Reported");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Attacked = Module["_emscripten_enum_ContainStatus_Attacked"] = createExportWrapper("emscripten_enum_ContainStatus_Attacked");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Contained = Module["_emscripten_enum_ContainStatus_Contained"] = createExportWrapper("emscripten_enum_ContainStatus_Contained");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Overrun = Module["_emscripten_enum_ContainStatus_Overrun"] = createExportWrapper("emscripten_enum_ContainStatus_Overrun");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Exhausted = Module["_emscripten_enum_ContainStatus_Exhausted"] = createExportWrapper("emscripten_enum_ContainStatus_Exhausted");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_Overflow = Module["_emscripten_enum_ContainStatus_Overflow"] = createExportWrapper("emscripten_enum_ContainStatus_Overflow");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_SizeLimitExceeded = Module["_emscripten_enum_ContainStatus_SizeLimitExceeded"] = createExportWrapper("emscripten_enum_ContainStatus_SizeLimitExceeded");

/** @type {function(...*):?} */
var _emscripten_enum_ContainStatus_TimeLimitExceeded = Module["_emscripten_enum_ContainStatus_TimeLimitExceeded"] = createExportWrapper("emscripten_enum_ContainStatus_TimeLimitExceeded");

/** @type {function(...*):?} */
var _emscripten_enum_ContainFlank_LeftFlank = Module["_emscripten_enum_ContainFlank_LeftFlank"] = createExportWrapper("emscripten_enum_ContainFlank_LeftFlank");

/** @type {function(...*):?} */
var _emscripten_enum_ContainFlank_RightFlank = Module["_emscripten_enum_ContainFlank_RightFlank"] = createExportWrapper("emscripten_enum_ContainFlank_RightFlank");

/** @type {function(...*):?} */
var _emscripten_enum_ContainFlank_BothFlanks = Module["_emscripten_enum_ContainFlank_BothFlanks"] = createExportWrapper("emscripten_enum_ContainFlank_BothFlanks");

/** @type {function(...*):?} */
var _emscripten_enum_ContainFlank_NeitherFlank = Module["_emscripten_enum_ContainFlank_NeitherFlank"] = createExportWrapper("emscripten_enum_ContainFlank_NeitherFlank");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter = Module["_emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky = Module["_emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep = Module["_emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow = Module["_emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff = Module["_emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_DouglasFirDuff = Module["_emscripten_enum_IgnitionFuelBedType_DouglasFirDuff"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_DouglasFirDuff");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed = Module["_emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed");

/** @type {function(...*):?} */
var _emscripten_enum_IgnitionFuelBedType_PeatMoss = Module["_emscripten_enum_IgnitionFuelBedType_PeatMoss"] = createExportWrapper("emscripten_enum_IgnitionFuelBedType_PeatMoss");

/** @type {function(...*):?} */
var _emscripten_enum_LightningCharge_Negative = Module["_emscripten_enum_LightningCharge_Negative"] = createExportWrapper("emscripten_enum_LightningCharge_Negative");

/** @type {function(...*):?} */
var _emscripten_enum_LightningCharge_Positive = Module["_emscripten_enum_LightningCharge_Positive"] = createExportWrapper("emscripten_enum_LightningCharge_Positive");

/** @type {function(...*):?} */
var _emscripten_enum_LightningCharge_Unknown = Module["_emscripten_enum_LightningCharge_Unknown"] = createExportWrapper("emscripten_enum_LightningCharge_Unknown");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE = Module["_emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR = Module["_emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR = Module["_emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK = Module["_emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE = Module["_emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE = Module["_emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE = Module["_emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_GRAND_FIR = Module["_emscripten_enum_SpotTreeSpecies_GRAND_FIR"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_GRAND_FIR");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_BALSAM_FIR = Module["_emscripten_enum_SpotTreeSpecies_BALSAM_FIR"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_BALSAM_FIR");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_SLASH_PINE = Module["_emscripten_enum_SpotTreeSpecies_SLASH_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_SLASH_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE = Module["_emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_POND_PINE = Module["_emscripten_enum_SpotTreeSpecies_POND_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_POND_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE = Module["_emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE = Module["_emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE"] = createExportWrapper("emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE");

/** @type {function(...*):?} */
var _emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD = Module["_emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD"] = createExportWrapper("emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD");

/** @type {function(...*):?} */
var _emscripten_enum_SpotFireLocation_VALLEY_BOTTOM = Module["_emscripten_enum_SpotFireLocation_VALLEY_BOTTOM"] = createExportWrapper("emscripten_enum_SpotFireLocation_VALLEY_BOTTOM");

/** @type {function(...*):?} */
var _emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD = Module["_emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD"] = createExportWrapper("emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD");

/** @type {function(...*):?} */
var _emscripten_enum_SpotFireLocation_RIDGE_TOP = Module["_emscripten_enum_SpotFireLocation_RIDGE_TOP"] = createExportWrapper("emscripten_enum_SpotFireLocation_RIDGE_TOP");

/** @type {function(...*):?} */
var _emscripten_enum_SpotArrayConstants_NUM_COLS = Module["_emscripten_enum_SpotArrayConstants_NUM_COLS"] = createExportWrapper("emscripten_enum_SpotArrayConstants_NUM_COLS");

/** @type {function(...*):?} */
var _emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS = Module["_emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS"] = createExportWrapper("emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS");

/** @type {function(...*):?} */
var _emscripten_enum_SpotArrayConstants_NUM_SPECIES = Module["_emscripten_enum_SpotArrayConstants_NUM_SPECIES"] = createExportWrapper("emscripten_enum_SpotArrayConstants_NUM_SPECIES");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var setTempRet0 = Module["setTempRet0"] = createExportWrapper("setTempRet0");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var ___cxa_can_catch = Module["___cxa_can_catch"] = createExportWrapper("__cxa_can_catch");

/** @type {function(...*):?} */
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = createExportWrapper("__cxa_is_pointer_type");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

var ___start_em_js = Module['___start_em_js'] = 21012;
var ___stop_em_js = Module['___stop_em_js'] = 21110;
function invoke_iidddiidd(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiddiiddiidid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiddiidiidiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_vididi(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)();
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}




// === Auto-generated postamble setup entry stuff ===

Module["UTF8ToString"] = UTF8ToString;
Module["addFunction"] = addFunction;
Module["allocateUTF8"] = allocateUTF8;
var unexportedRuntimeSymbols = [
  'run',
  'UTF8ArrayToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'FS_createFolder',
  'FS_createPath',
  'FS_createDataFile',
  'FS_createPreloadedFile',
  'FS_createLazyFile',
  'FS_createLink',
  'FS_createDevice',
  'FS_unlink',
  'getLEB',
  'getFunctionTables',
  'alignFunctionTables',
  'registerFunctions',
  'prettyPrint',
  'getCompilerSetting',
  'print',
  'printErr',
  'callMain',
  'abort',
  'keepRuntimeAlive',
  'wasmMemory',
  'stackAlloc',
  'stackSave',
  'stackRestore',
  'getTempRet0',
  'setTempRet0',
  'writeStackCookie',
  'checkStackCookie',
  'intArrayFromBase64',
  'tryParseAsDataURI',
  'ptrToString',
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'emscripten_realloc_buffer',
  'ENV',
  'ERRNO_CODES',
  'ERRNO_MESSAGES',
  'setErrNo',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'DNS',
  'getHostByName',
  'Protocols',
  'Sockets',
  'getRandomDevice',
  'warnOnce',
  'traverseStack',
  'UNWIND_CACHE',
  'convertPCtoSourceLocation',
  'readAsmConstArgsArray',
  'readAsmConstArgs',
  'mainThreadEM_ASM',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertI32PairToI53Checked',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'convertJsFunctionToWasm',
  'freeTableIndexes',
  'functionsInTableMap',
  'getEmptyTableSlot',
  'updateTableMap',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'intArrayFromString',
  'intArrayToString',
  'AsciiToString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeArrayToMemory',
  'writeAsciiToMemory',
  'SYSCALLS',
  'getSocketFromFD',
  'getSocketAddress',
  'JSEvents',
  'registerKeyEventCallback',
  'specialHTMLTargets',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'demangle',
  'demangleAll',
  'jsStackTrace',
  'stackTrace',
  'ExitStatus',
  'getEnvStrings',
  'checkWasiClock',
  'flush_NO_FILESYSTEM',
  'dlopenMissingError',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  'getExceptionMessageCommon',
  'incrementExceptionRefcount',
  'decrementExceptionRefcount',
  'getExceptionMessage',
  'Browser',
  'setMainLoop',
  'wget',
  'FS',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  '_setNetworkCallback',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'GL',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'AL',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'SDL',
  'SDL_gfx',
  'GLUT',
  'EGL',
  'GLFW_Window',
  'GLFW',
  'GLEW',
  'IDBStore',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
];
unexportedRuntimeSymbols.forEach(unexportedRuntimeSymbol);
var missingLibrarySymbols = [
  'ptrToString',
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'emscripten_realloc_buffer',
  'setErrNo',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'getHostByName',
  'getRandomDevice',
  'traverseStack',
  'convertPCtoSourceLocation',
  'readAsmConstArgs',
  'mainThreadEM_ASM',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'getSocketFromFD',
  'getSocketAddress',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'getEnvStrings',
  'checkWasiClock',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'exception_decRef',
  'getExceptionMessageCommon',
  'incrementExceptionRefcount',
  'decrementExceptionRefcount',
  'getExceptionMessage',
  'setMainLoop',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'GLFW_Window',
  'runAndAbortIfError',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)


var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    flush_NO_FILESYSTEM();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();






// Bindings utilities

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant)
    @param {*=} __class__ */
function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant)
    @param {*=} __class__ */
function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts big (string or array) values into a C-style storage, in temporary space

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
var ensureCache = {
  buffer: 0,  // the main buffer of temporary storage
  size: 0,   // the size of buffer
  pos: 0,    // the next free offset in buffer
  temps: [], // extra allocations
  needed: 0, // the total size we need next time

  prepare: function() {
    if (ensureCache.needed) {
      // clear the temps
      for (var i = 0; i < ensureCache.temps.length; i++) {
        Module['_free'](ensureCache.temps[i]);
      }
      ensureCache.temps.length = 0;
      // prepare to allocate a bigger buffer
      Module['_free'](ensureCache.buffer);
      ensureCache.buffer = 0;
      ensureCache.size += ensureCache.needed;
      // clean up
      ensureCache.needed = 0;
    }
    if (!ensureCache.buffer) { // happens first time, or when we need to grow
      ensureCache.size += 128; // heuristic, avoid many small grow events
      ensureCache.buffer = Module['_malloc'](ensureCache.size);
      assert(ensureCache.buffer);
    }
    ensureCache.pos = 0;
  },
  alloc: function(array, view) {
    assert(ensureCache.buffer);
    var bytes = view.BYTES_PER_ELEMENT;
    var len = array.length * bytes;
    len = (len + 7) & -8; // keep things aligned to 8 byte boundaries
    var ret;
    if (ensureCache.pos + len >= ensureCache.size) {
      // we failed to allocate in the buffer, ensureCache time around :(
      assert(len > 0); // null terminator, at least
      ensureCache.needed += len;
      ret = Module['_malloc'](len);
      ensureCache.temps.push(ret);
    } else {
      // we can allocate in the buffer
      ret = ensureCache.buffer + ensureCache.pos;
      ensureCache.pos += len;
    }
    return ret;
  },
  copy: function(array, view, offset) {
    offset >>>= 0;
    var bytes = view.BYTES_PER_ELEMENT;
    switch (bytes) {
      case 2: offset >>>= 1; break;
      case 4: offset >>>= 2; break;
      case 8: offset >>>= 3; break;
    }
    for (var i = 0; i < array.length; i++) {
      view[offset + i] = array[i];
    }
  },
};

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureString(value) {
  if (typeof value === 'string') {
    var intArray = intArrayFromString(value);
    var offset = ensureCache.alloc(intArray, HEAP8);
    ensureCache.copy(intArray, HEAP8, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt8(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP8);
    ensureCache.copy(value, HEAP8, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt16(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP16);
    ensureCache.copy(value, HEAP16, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP32);
    ensureCache.copy(value, HEAP32, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureFloat32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF32);
    ensureCache.copy(value, HEAPF32, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureFloat64(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF64);
    ensureCache.copy(value, HEAPF64, offset);
    return offset;
  }
  return value;
}


// VoidPtr
/** @suppress {undefinedVars, duplicate} @this{Object} */function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
};
// DoublePtr
/** @suppress {undefinedVars, duplicate} @this{Object} */function DoublePtr() { throw "cannot construct a DoublePtr, no constructor in IDL" }
DoublePtr.prototype = Object.create(WrapperObject.prototype);
DoublePtr.prototype.constructor = DoublePtr;
DoublePtr.prototype.__class__ = DoublePtr;
DoublePtr.__cache__ = {};
Module['DoublePtr'] = DoublePtr;

  DoublePtr.prototype['__destroy__'] = DoublePtr.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_DoublePtr___destroy___0(self);
};
// FireSize
/** @suppress {undefinedVars, duplicate} @this{Object} */function FireSize() {
  this.ptr = _emscripten_bind_FireSize_FireSize_0();
  getCache(FireSize)[this.ptr] = this;
};;
FireSize.prototype = Object.create(WrapperObject.prototype);
FireSize.prototype.constructor = FireSize;
FireSize.prototype.__class__ = FireSize;
FireSize.__cache__ = {};
Module['FireSize'] = FireSize;

FireSize.prototype['calculateFireBasicDimensions'] = FireSize.prototype.calculateFireBasicDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function(effectiveWindSpeed, windSpeedRateUnits, forwardSpreadRate, spreadRateUnits) {
  var self = this.ptr;
  if (effectiveWindSpeed && typeof effectiveWindSpeed === 'object') effectiveWindSpeed = effectiveWindSpeed.ptr;
  if (windSpeedRateUnits && typeof windSpeedRateUnits === 'object') windSpeedRateUnits = windSpeedRateUnits.ptr;
  if (forwardSpreadRate && typeof forwardSpreadRate === 'object') forwardSpreadRate = forwardSpreadRate.ptr;
  if (spreadRateUnits && typeof spreadRateUnits === 'object') spreadRateUnits = spreadRateUnits.ptr;
  _emscripten_bind_FireSize_calculateFireBasicDimensions_4(self, effectiveWindSpeed, windSpeedRateUnits, forwardSpreadRate, spreadRateUnits);
};;

FireSize.prototype['getFireLengthToWidthRatio'] = FireSize.prototype.getFireLengthToWidthRatio = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_FireSize_getFireLengthToWidthRatio_0(self);
};;

FireSize.prototype['getEccentricity'] = FireSize.prototype.getEccentricity = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_FireSize_getEccentricity_0(self);
};;

FireSize.prototype['getBackingSpreadRate'] = FireSize.prototype.getBackingSpreadRate = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spreadRateUnits) {
  var self = this.ptr;
  if (spreadRateUnits && typeof spreadRateUnits === 'object') spreadRateUnits = spreadRateUnits.ptr;
  return _emscripten_bind_FireSize_getBackingSpreadRate_1(self, spreadRateUnits);
};;

FireSize.prototype['getEllipticalA'] = FireSize.prototype.getEllipticalA = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getEllipticalA_3(self, lengthUnits, elapsedTime, timeUnits);
};;

FireSize.prototype['getEllipticalB'] = FireSize.prototype.getEllipticalB = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getEllipticalB_3(self, lengthUnits, elapsedTime, timeUnits);
};;

FireSize.prototype['getEllipticalC'] = FireSize.prototype.getEllipticalC = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getEllipticalC_3(self, lengthUnits, elapsedTime, timeUnits);
};;

FireSize.prototype['getFireLength'] = FireSize.prototype.getFireLength = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getFireLength_3(self, lengthUnits, elapsedTime, timeUnits);
};;

FireSize.prototype['getMaxFireWidth'] = FireSize.prototype.getMaxFireWidth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getMaxFireWidth_3(self, lengthUnits, elapsedTime, timeUnits);
};;

FireSize.prototype['getFirePerimeter'] = FireSize.prototype.getFirePerimeter = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getFirePerimeter_3(self, lengthUnits, elapsedTime, timeUnits);
};;

FireSize.prototype['getFireArea'] = FireSize.prototype.getFireArea = /** @suppress {undefinedVars, duplicate} @this{Object} */function(areaUnits, elapsedTime, timeUnits) {
  var self = this.ptr;
  if (areaUnits && typeof areaUnits === 'object') areaUnits = areaUnits.ptr;
  if (elapsedTime && typeof elapsedTime === 'object') elapsedTime = elapsedTime.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_FireSize_getFireArea_3(self, areaUnits, elapsedTime, timeUnits);
};;

  FireSize.prototype['__destroy__'] = FireSize.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_FireSize___destroy___0(self);
};
// SIGContainResource
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGContainResource(arrival, production, duration, flank, desc, baseCost, hourCost) {
  ensureCache.prepare();
  if (arrival && typeof arrival === 'object') arrival = arrival.ptr;
  if (production && typeof production === 'object') production = production.ptr;
  if (duration && typeof duration === 'object') duration = duration.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  if (baseCost && typeof baseCost === 'object') baseCost = baseCost.ptr;
  if (hourCost && typeof hourCost === 'object') hourCost = hourCost.ptr;
  if (arrival === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_0(); getCache(SIGContainResource)[this.ptr] = this;return }
  if (production === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_1(arrival); getCache(SIGContainResource)[this.ptr] = this;return }
  if (duration === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_2(arrival, production); getCache(SIGContainResource)[this.ptr] = this;return }
  if (flank === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_3(arrival, production, duration); getCache(SIGContainResource)[this.ptr] = this;return }
  if (desc === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_4(arrival, production, duration, flank); getCache(SIGContainResource)[this.ptr] = this;return }
  if (baseCost === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_5(arrival, production, duration, flank, desc); getCache(SIGContainResource)[this.ptr] = this;return }
  if (hourCost === undefined) { this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_6(arrival, production, duration, flank, desc, baseCost); getCache(SIGContainResource)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_SIGContainResource_SIGContainResource_7(arrival, production, duration, flank, desc, baseCost, hourCost);
  getCache(SIGContainResource)[this.ptr] = this;
};;
SIGContainResource.prototype = Object.create(WrapperObject.prototype);
SIGContainResource.prototype.constructor = SIGContainResource;
SIGContainResource.prototype.__class__ = SIGContainResource;
SIGContainResource.__cache__ = {};
Module['SIGContainResource'] = SIGContainResource;

SIGContainResource.prototype['description'] = SIGContainResource.prototype.description = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return UTF8ToString(_emscripten_bind_SIGContainResource_description_0(self));
};;

SIGContainResource.prototype['print'] = SIGContainResource.prototype.print = /** @suppress {undefinedVars, duplicate} @this{Object} */function(buf, buflen) {
  var self = this.ptr;
  ensureCache.prepare();
  if (buf && typeof buf === 'object') buf = buf.ptr;
  else buf = ensureString(buf);
  if (buflen && typeof buflen === 'object') buflen = buflen.ptr;
  _emscripten_bind_SIGContainResource_print_2(self, buf, buflen);
};;

SIGContainResource.prototype['arrival'] = SIGContainResource.prototype.arrival = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainResource_arrival_0(self);
};;

SIGContainResource.prototype['hourCost'] = SIGContainResource.prototype.hourCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainResource_hourCost_0(self);
};;

SIGContainResource.prototype['duration'] = SIGContainResource.prototype.duration = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainResource_duration_0(self);
};;

SIGContainResource.prototype['production'] = SIGContainResource.prototype.production = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainResource_production_0(self);
};;

SIGContainResource.prototype['baseCost'] = SIGContainResource.prototype.baseCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainResource_baseCost_0(self);
};;

SIGContainResource.prototype['flank'] = SIGContainResource.prototype.flank = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainResource_flank_0(self);
};;

  SIGContainResource.prototype['__destroy__'] = SIGContainResource.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainResource___destroy___0(self);
};
// SIGContainForce
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGContainForce(maxResources) {
  if (maxResources && typeof maxResources === 'object') maxResources = maxResources.ptr;
  this.ptr = _emscripten_bind_SIGContainForce_SIGContainForce_1(maxResources);
  getCache(SIGContainForce)[this.ptr] = this;
};;
SIGContainForce.prototype = Object.create(WrapperObject.prototype);
SIGContainForce.prototype.constructor = SIGContainForce;
SIGContainForce.prototype.__class__ = SIGContainForce;
SIGContainForce.__cache__ = {};
Module['SIGContainForce'] = SIGContainForce;

SIGContainForce.prototype['addResource'] = SIGContainForce.prototype.addResource = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arrival, production, duration, flank, desc, baseCost, hourCost) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arrival && typeof arrival === 'object') arrival = arrival.ptr;
  if (production && typeof production === 'object') production = production.ptr;
  if (duration && typeof duration === 'object') duration = duration.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  if (baseCost && typeof baseCost === 'object') baseCost = baseCost.ptr;
  if (hourCost && typeof hourCost === 'object') hourCost = hourCost.ptr;
  if (production === undefined) { return wrapPointer(_emscripten_bind_SIGContainForce_addResource_1(self, arrival), SIGContainResource) }
  if (duration === undefined) { return wrapPointer(_emscripten_bind_SIGContainForce_addResource_2(self, arrival, production), SIGContainResource) }
  if (flank === undefined) { return wrapPointer(_emscripten_bind_SIGContainForce_addResource_3(self, arrival, production, duration), SIGContainResource) }
  if (desc === undefined) { return wrapPointer(_emscripten_bind_SIGContainForce_addResource_4(self, arrival, production, duration, flank), SIGContainResource) }
  if (baseCost === undefined) { return wrapPointer(_emscripten_bind_SIGContainForce_addResource_5(self, arrival, production, duration, flank, desc), SIGContainResource) }
  if (hourCost === undefined) { return wrapPointer(_emscripten_bind_SIGContainForce_addResource_6(self, arrival, production, duration, flank, desc, baseCost), SIGContainResource) }
  return wrapPointer(_emscripten_bind_SIGContainForce_addResource_7(self, arrival, production, duration, flank, desc, baseCost, hourCost), SIGContainResource);
};;

SIGContainForce.prototype['exhausted'] = SIGContainForce.prototype.exhausted = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flank) {
  var self = this.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  return _emscripten_bind_SIGContainForce_exhausted_1(self, flank);
};;

SIGContainForce.prototype['firstArrival'] = SIGContainForce.prototype.firstArrival = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flank) {
  var self = this.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  return _emscripten_bind_SIGContainForce_firstArrival_1(self, flank);
};;

SIGContainForce.prototype['nextArrival'] = SIGContainForce.prototype.nextArrival = /** @suppress {undefinedVars, duplicate} @this{Object} */function(after, until, flank) {
  var self = this.ptr;
  if (after && typeof after === 'object') after = after.ptr;
  if (until && typeof until === 'object') until = until.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  return _emscripten_bind_SIGContainForce_nextArrival_3(self, after, until, flank);
};;

SIGContainForce.prototype['productionRate'] = SIGContainForce.prototype.productionRate = /** @suppress {undefinedVars, duplicate} @this{Object} */function(minutesSinceReport, flank) {
  var self = this.ptr;
  if (minutesSinceReport && typeof minutesSinceReport === 'object') minutesSinceReport = minutesSinceReport.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  return _emscripten_bind_SIGContainForce_productionRate_2(self, minutesSinceReport, flank);
};;

SIGContainForce.prototype['resources'] = SIGContainForce.prototype.resources = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainForce_resources_0(self);
};;

SIGContainForce.prototype['resourceArrival'] = SIGContainForce.prototype.resourceArrival = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForce_resourceArrival_1(self, index);
};;

SIGContainForce.prototype['resourceBaseCost'] = SIGContainForce.prototype.resourceBaseCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForce_resourceBaseCost_1(self, index);
};;

SIGContainForce.prototype['resourceCost'] = SIGContainForce.prototype.resourceCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index, finalTime) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  if (finalTime && typeof finalTime === 'object') finalTime = finalTime.ptr;
  return _emscripten_bind_SIGContainForce_resourceCost_2(self, index, finalTime);
};;

SIGContainForce.prototype['resourceDescription'] = SIGContainForce.prototype.resourceDescription = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return UTF8ToString(_emscripten_bind_SIGContainForce_resourceDescription_1(self, index));
};;

SIGContainForce.prototype['resourceDuration'] = SIGContainForce.prototype.resourceDuration = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForce_resourceDuration_1(self, index);
};;

SIGContainForce.prototype['resourceFlank'] = SIGContainForce.prototype.resourceFlank = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForce_resourceFlank_1(self, index);
};;

SIGContainForce.prototype['resourceHourCost'] = SIGContainForce.prototype.resourceHourCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForce_resourceHourCost_1(self, index);
};;

SIGContainForce.prototype['resourceProduction'] = SIGContainForce.prototype.resourceProduction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForce_resourceProduction_1(self, index);
};;

  SIGContainForce.prototype['__destroy__'] = SIGContainForce.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainForce___destroy___0(self);
};
// SIGContainForceAdapter
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGContainForceAdapter() {
  this.ptr = _emscripten_bind_SIGContainForceAdapter_SIGContainForceAdapter_0();
  getCache(SIGContainForceAdapter)[this.ptr] = this;
};;
SIGContainForceAdapter.prototype = Object.create(WrapperObject.prototype);
SIGContainForceAdapter.prototype.constructor = SIGContainForceAdapter;
SIGContainForceAdapter.prototype.__class__ = SIGContainForceAdapter;
SIGContainForceAdapter.__cache__ = {};
Module['SIGContainForceAdapter'] = SIGContainForceAdapter;

SIGContainForceAdapter.prototype['addResource'] = SIGContainForceAdapter.prototype.addResource = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arrival, production, duration, flank, desc, baseCost, hourCost) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arrival && typeof arrival === 'object') arrival = arrival.ptr;
  if (production && typeof production === 'object') production = production.ptr;
  if (duration && typeof duration === 'object') duration = duration.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  if (baseCost && typeof baseCost === 'object') baseCost = baseCost.ptr;
  if (hourCost && typeof hourCost === 'object') hourCost = hourCost.ptr;
  _emscripten_bind_SIGContainForceAdapter_addResource_7(self, arrival, production, duration, flank, desc, baseCost, hourCost);
};;

SIGContainForceAdapter.prototype['firstArrival'] = SIGContainForceAdapter.prototype.firstArrival = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flank) {
  var self = this.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  return _emscripten_bind_SIGContainForceAdapter_firstArrival_1(self, flank);
};;

SIGContainForceAdapter.prototype['removeResourceAt'] = SIGContainForceAdapter.prototype.removeResourceAt = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainForceAdapter_removeResourceAt_1(self, index);
};;

SIGContainForceAdapter.prototype['removeResourceWithThisDesc'] = SIGContainForceAdapter.prototype.removeResourceWithThisDesc = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desc) {
  var self = this.ptr;
  ensureCache.prepare();
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  return _emscripten_bind_SIGContainForceAdapter_removeResourceWithThisDesc_1(self, desc);
};;

SIGContainForceAdapter.prototype['removeAllResourcesWithThisDesc'] = SIGContainForceAdapter.prototype.removeAllResourcesWithThisDesc = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desc) {
  var self = this.ptr;
  ensureCache.prepare();
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  return _emscripten_bind_SIGContainForceAdapter_removeAllResourcesWithThisDesc_1(self, desc);
};;

  SIGContainForceAdapter.prototype['__destroy__'] = SIGContainForceAdapter.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainForceAdapter___destroy___0(self);
};
// SIGContainSim
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGContainSim(reportSize, reportRate, diurnalROS, fireStartMinutesStartTime, lwRatio, force, tactic, attackDist, retry, minSteps, maxSteps, maxFireSize, maxFireTime) {
  if (reportSize && typeof reportSize === 'object') reportSize = reportSize.ptr;
  if (reportRate && typeof reportRate === 'object') reportRate = reportRate.ptr;
  if (diurnalROS && typeof diurnalROS === 'object') diurnalROS = diurnalROS.ptr;
  if (fireStartMinutesStartTime && typeof fireStartMinutesStartTime === 'object') fireStartMinutesStartTime = fireStartMinutesStartTime.ptr;
  if (lwRatio && typeof lwRatio === 'object') lwRatio = lwRatio.ptr;
  if (force && typeof force === 'object') force = force.ptr;
  if (tactic && typeof tactic === 'object') tactic = tactic.ptr;
  if (attackDist && typeof attackDist === 'object') attackDist = attackDist.ptr;
  if (retry && typeof retry === 'object') retry = retry.ptr;
  if (minSteps && typeof minSteps === 'object') minSteps = minSteps.ptr;
  if (maxSteps && typeof maxSteps === 'object') maxSteps = maxSteps.ptr;
  if (maxFireSize && typeof maxFireSize === 'object') maxFireSize = maxFireSize.ptr;
  if (maxFireTime && typeof maxFireTime === 'object') maxFireTime = maxFireTime.ptr;
  this.ptr = _emscripten_bind_SIGContainSim_SIGContainSim_13(reportSize, reportRate, diurnalROS, fireStartMinutesStartTime, lwRatio, force, tactic, attackDist, retry, minSteps, maxSteps, maxFireSize, maxFireTime);
  getCache(SIGContainSim)[this.ptr] = this;
};;
SIGContainSim.prototype = Object.create(WrapperObject.prototype);
SIGContainSim.prototype.constructor = SIGContainSim;
SIGContainSim.prototype.__class__ = SIGContainSim;
SIGContainSim.__cache__ = {};
Module['SIGContainSim'] = SIGContainSim;

SIGContainSim.prototype['attackDistance'] = SIGContainSim.prototype.attackDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_attackDistance_0(self);
};;

SIGContainSim.prototype['attackPointX'] = SIGContainSim.prototype.attackPointX = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_attackPointX_0(self);
};;

SIGContainSim.prototype['attackPointY'] = SIGContainSim.prototype.attackPointY = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_attackPointY_0(self);
};;

SIGContainSim.prototype['attackTime'] = SIGContainSim.prototype.attackTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_attackTime_0(self);
};;

SIGContainSim.prototype['distanceStep'] = SIGContainSim.prototype.distanceStep = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_distanceStep_0(self);
};;

SIGContainSim.prototype['fireBackAtAttack'] = SIGContainSim.prototype.fireBackAtAttack = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireBackAtAttack_0(self);
};;

SIGContainSim.prototype['fireBackAtReport'] = SIGContainSim.prototype.fireBackAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireBackAtReport_0(self);
};;

SIGContainSim.prototype['fireHeadAtAttack'] = SIGContainSim.prototype.fireHeadAtAttack = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireHeadAtAttack_0(self);
};;

SIGContainSim.prototype['fireHeadAtReport'] = SIGContainSim.prototype.fireHeadAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireHeadAtReport_0(self);
};;

SIGContainSim.prototype['fireLwRatioAtReport'] = SIGContainSim.prototype.fireLwRatioAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireLwRatioAtReport_0(self);
};;

SIGContainSim.prototype['fireReportTime'] = SIGContainSim.prototype.fireReportTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireReportTime_0(self);
};;

SIGContainSim.prototype['fireSizeAtReport'] = SIGContainSim.prototype.fireSizeAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireSizeAtReport_0(self);
};;

SIGContainSim.prototype['fireSpreadRateAtBack'] = SIGContainSim.prototype.fireSpreadRateAtBack = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireSpreadRateAtBack_0(self);
};;

SIGContainSim.prototype['fireSpreadRateAtReport'] = SIGContainSim.prototype.fireSpreadRateAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_fireSpreadRateAtReport_0(self);
};;

SIGContainSim.prototype['force'] = SIGContainSim.prototype.force = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_SIGContainSim_force_0(self), SIGContainForce);
};;

SIGContainSim.prototype['maximumSimulationSteps'] = SIGContainSim.prototype.maximumSimulationSteps = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_maximumSimulationSteps_0(self);
};;

SIGContainSim.prototype['minimumSimulationSteps'] = SIGContainSim.prototype.minimumSimulationSteps = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_minimumSimulationSteps_0(self);
};;

SIGContainSim.prototype['status'] = SIGContainSim.prototype.status = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_status_0(self);
};;

SIGContainSim.prototype['tactic'] = SIGContainSim.prototype.tactic = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_tactic_0(self);
};;

SIGContainSim.prototype['finalFireCost'] = SIGContainSim.prototype.finalFireCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalFireCost_0(self);
};;

SIGContainSim.prototype['finalFireLine'] = SIGContainSim.prototype.finalFireLine = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalFireLine_0(self);
};;

SIGContainSim.prototype['finalFirePerimeter'] = SIGContainSim.prototype.finalFirePerimeter = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalFirePerimeter_0(self);
};;

SIGContainSim.prototype['finalFireSize'] = SIGContainSim.prototype.finalFireSize = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalFireSize_0(self);
};;

SIGContainSim.prototype['finalFireSweep'] = SIGContainSim.prototype.finalFireSweep = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalFireSweep_0(self);
};;

SIGContainSim.prototype['finalFireTime'] = SIGContainSim.prototype.finalFireTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalFireTime_0(self);
};;

SIGContainSim.prototype['finalResourcesUsed'] = SIGContainSim.prototype.finalResourcesUsed = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_finalResourcesUsed_0(self);
};;

SIGContainSim.prototype['fireHeadX'] = SIGContainSim.prototype.fireHeadX = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_SIGContainSim_fireHeadX_0(self), DoublePtr);
};;

SIGContainSim.prototype['firePerimeterY'] = SIGContainSim.prototype.firePerimeterY = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_SIGContainSim_firePerimeterY_0(self), DoublePtr);
};;

SIGContainSim.prototype['firePerimeterX'] = SIGContainSim.prototype.firePerimeterX = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_SIGContainSim_firePerimeterX_0(self), DoublePtr);
};;

SIGContainSim.prototype['firePoints'] = SIGContainSim.prototype.firePoints = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainSim_firePoints_0(self);
};;

SIGContainSim.prototype['checkmem'] = SIGContainSim.prototype.checkmem = /** @suppress {undefinedVars, duplicate} @this{Object} */function(fileName, lineNumber, ptr, type, size) {
  var self = this.ptr;
  ensureCache.prepare();
  if (fileName && typeof fileName === 'object') fileName = fileName.ptr;
  else fileName = ensureString(fileName);
  if (lineNumber && typeof lineNumber === 'object') lineNumber = lineNumber.ptr;
  if (ptr && typeof ptr === 'object') ptr = ptr.ptr;
  if (type && typeof type === 'object') type = type.ptr;
  else type = ensureString(type);
  if (size && typeof size === 'object') size = size.ptr;
  _emscripten_bind_SIGContainSim_checkmem_5(self, fileName, lineNumber, ptr, type, size);
};;

SIGContainSim.prototype['run'] = SIGContainSim.prototype.run = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainSim_run_0(self);
};;

SIGContainSim.prototype['UncontainedArea'] = SIGContainSim.prototype.UncontainedArea = /** @suppress {undefinedVars, duplicate} @this{Object} */function(head, lwRatio, x, y, tactic) {
  var self = this.ptr;
  if (head && typeof head === 'object') head = head.ptr;
  if (lwRatio && typeof lwRatio === 'object') lwRatio = lwRatio.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (tactic && typeof tactic === 'object') tactic = tactic.ptr;
  return _emscripten_bind_SIGContainSim_UncontainedArea_5(self, head, lwRatio, x, y, tactic);
};;

  SIGContainSim.prototype['__destroy__'] = SIGContainSim.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainSim___destroy___0(self);
};
// SIGDiurnalROS
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGDiurnalROS() {
  this.ptr = _emscripten_bind_SIGDiurnalROS_SIGDiurnalROS_0();
  getCache(SIGDiurnalROS)[this.ptr] = this;
};;
SIGDiurnalROS.prototype = Object.create(WrapperObject.prototype);
SIGDiurnalROS.prototype.constructor = SIGDiurnalROS;
SIGDiurnalROS.prototype.__class__ = SIGDiurnalROS;
SIGDiurnalROS.__cache__ = {};
Module['SIGDiurnalROS'] = SIGDiurnalROS;

SIGDiurnalROS.prototype['push'] = SIGDiurnalROS.prototype.push = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _emscripten_bind_SIGDiurnalROS_push_1(self, v);
};;

SIGDiurnalROS.prototype['at'] = SIGDiurnalROS.prototype.at = /** @suppress {undefinedVars, duplicate} @this{Object} */function(i) {
  var self = this.ptr;
  if (i && typeof i === 'object') i = i.ptr;
  return _emscripten_bind_SIGDiurnalROS_at_1(self, i);
};;

SIGDiurnalROS.prototype['size'] = SIGDiurnalROS.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGDiurnalROS_size_0(self);
};;

  SIGDiurnalROS.prototype['__destroy__'] = SIGDiurnalROS.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGDiurnalROS___destroy___0(self);
};
// SIGContain
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGContain(reportSize, reportRate, diurnalROS, fireStartMinutesStartTime, lwRatio, distStep, flank, force, attackTime, tactic, attackDist) {
  if (reportSize && typeof reportSize === 'object') reportSize = reportSize.ptr;
  if (reportRate && typeof reportRate === 'object') reportRate = reportRate.ptr;
  if (diurnalROS && typeof diurnalROS === 'object') diurnalROS = diurnalROS.ptr;
  if (fireStartMinutesStartTime && typeof fireStartMinutesStartTime === 'object') fireStartMinutesStartTime = fireStartMinutesStartTime.ptr;
  if (lwRatio && typeof lwRatio === 'object') lwRatio = lwRatio.ptr;
  if (distStep && typeof distStep === 'object') distStep = distStep.ptr;
  if (flank && typeof flank === 'object') flank = flank.ptr;
  if (force && typeof force === 'object') force = force.ptr;
  if (attackTime && typeof attackTime === 'object') attackTime = attackTime.ptr;
  if (tactic && typeof tactic === 'object') tactic = tactic.ptr;
  if (attackDist && typeof attackDist === 'object') attackDist = attackDist.ptr;
  this.ptr = _emscripten_bind_SIGContain_SIGContain_11(reportSize, reportRate, diurnalROS, fireStartMinutesStartTime, lwRatio, distStep, flank, force, attackTime, tactic, attackDist);
  getCache(SIGContain)[this.ptr] = this;
};;
SIGContain.prototype = Object.create(WrapperObject.prototype);
SIGContain.prototype.constructor = SIGContain;
SIGContain.prototype.__class__ = SIGContain;
SIGContain.__cache__ = {};
Module['SIGContain'] = SIGContain;

SIGContain.prototype['simulationTime'] = SIGContain.prototype.simulationTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_simulationTime_0(self);
};;

SIGContain.prototype['fireSpreadRateAtBack'] = SIGContain.prototype.fireSpreadRateAtBack = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireSpreadRateAtBack_0(self);
};;

SIGContain.prototype['fireLwRatioAtReport'] = SIGContain.prototype.fireLwRatioAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireLwRatioAtReport_0(self);
};;

SIGContain.prototype['force'] = SIGContain.prototype.force = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_SIGContain_force_0(self), SIGContainForce);
};;

SIGContain.prototype['resourceHourCost'] = SIGContain.prototype.resourceHourCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContain_resourceHourCost_1(self, index);
};;

SIGContain.prototype['attackDistance'] = SIGContain.prototype.attackDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_attackDistance_0(self);
};;

SIGContain.prototype['attackPointX'] = SIGContain.prototype.attackPointX = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_attackPointX_0(self);
};;

SIGContain.prototype['fireHeadAtAttack'] = SIGContain.prototype.fireHeadAtAttack = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireHeadAtAttack_0(self);
};;

SIGContain.prototype['attackPointY'] = SIGContain.prototype.attackPointY = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_attackPointY_0(self);
};;

SIGContain.prototype['attackTime'] = SIGContain.prototype.attackTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_attackTime_0(self);
};;

SIGContain.prototype['resourceBaseCost'] = SIGContain.prototype.resourceBaseCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContain_resourceBaseCost_1(self, index);
};;

SIGContain.prototype['fireSpreadRateAtReport'] = SIGContain.prototype.fireSpreadRateAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireSpreadRateAtReport_0(self);
};;

SIGContain.prototype['fireHeadAtReport'] = SIGContain.prototype.fireHeadAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireHeadAtReport_0(self);
};;

SIGContain.prototype['fireReportTime'] = SIGContain.prototype.fireReportTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireReportTime_0(self);
};;

SIGContain.prototype['resourceProduction'] = SIGContain.prototype.resourceProduction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContain_resourceProduction_1(self, index);
};;

SIGContain.prototype['fireBackAtAttack'] = SIGContain.prototype.fireBackAtAttack = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireBackAtAttack_0(self);
};;

SIGContain.prototype['simulationStep'] = SIGContain.prototype.simulationStep = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_simulationStep_0(self);
};;

SIGContain.prototype['tactic'] = SIGContain.prototype.tactic = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_tactic_0(self);
};;

SIGContain.prototype['resourceDescription'] = SIGContain.prototype.resourceDescription = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return UTF8ToString(_emscripten_bind_SIGContain_resourceDescription_1(self, index));
};;

SIGContain.prototype['distanceStep'] = SIGContain.prototype.distanceStep = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_distanceStep_0(self);
};;

SIGContain.prototype['status'] = SIGContain.prototype.status = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_status_0(self);
};;

SIGContain.prototype['resourceArrival'] = SIGContain.prototype.resourceArrival = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContain_resourceArrival_1(self, index);
};;

SIGContain.prototype['fireSizeAtReport'] = SIGContain.prototype.fireSizeAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireSizeAtReport_0(self);
};;

SIGContain.prototype['setFireStartTimeMinutes'] = SIGContain.prototype.setFireStartTimeMinutes = /** @suppress {undefinedVars, duplicate} @this{Object} */function(starttime) {
  var self = this.ptr;
  if (starttime && typeof starttime === 'object') starttime = starttime.ptr;
  return _emscripten_bind_SIGContain_setFireStartTimeMinutes_1(self, starttime);
};;

SIGContain.prototype['fireBackAtReport'] = SIGContain.prototype.fireBackAtReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_fireBackAtReport_0(self);
};;

SIGContain.prototype['resourceDuration'] = SIGContain.prototype.resourceDuration = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContain_resourceDuration_1(self, index);
};;

SIGContain.prototype['resources'] = SIGContain.prototype.resources = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_resources_0(self);
};;

SIGContain.prototype['exhaustedTime'] = SIGContain.prototype.exhaustedTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContain_exhaustedTime_0(self);
};;

  SIGContain.prototype['__destroy__'] = SIGContain.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContain___destroy___0(self);
};
// SIGContainAdapter
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGContainAdapter() {
  this.ptr = _emscripten_bind_SIGContainAdapter_SIGContainAdapter_0();
  getCache(SIGContainAdapter)[this.ptr] = this;
};;
SIGContainAdapter.prototype = Object.create(WrapperObject.prototype);
SIGContainAdapter.prototype.constructor = SIGContainAdapter;
SIGContainAdapter.prototype.__class__ = SIGContainAdapter;
SIGContainAdapter.__cache__ = {};
Module['SIGContainAdapter'] = SIGContainAdapter;

SIGContainAdapter.prototype['setReportSize'] = SIGContainAdapter.prototype.setReportSize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(reportSize, areaUnits) {
  var self = this.ptr;
  if (reportSize && typeof reportSize === 'object') reportSize = reportSize.ptr;
  if (areaUnits && typeof areaUnits === 'object') areaUnits = areaUnits.ptr;
  _emscripten_bind_SIGContainAdapter_setReportSize_2(self, reportSize, areaUnits);
};;

SIGContainAdapter.prototype['setLwRatio'] = SIGContainAdapter.prototype.setLwRatio = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lwRatio) {
  var self = this.ptr;
  if (lwRatio && typeof lwRatio === 'object') lwRatio = lwRatio.ptr;
  _emscripten_bind_SIGContainAdapter_setLwRatio_1(self, lwRatio);
};;

SIGContainAdapter.prototype['setMaxFireTime'] = SIGContainAdapter.prototype.setMaxFireTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function(maxFireTime) {
  var self = this.ptr;
  if (maxFireTime && typeof maxFireTime === 'object') maxFireTime = maxFireTime.ptr;
  _emscripten_bind_SIGContainAdapter_setMaxFireTime_1(self, maxFireTime);
};;

SIGContainAdapter.prototype['doContainRun'] = SIGContainAdapter.prototype.doContainRun = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainAdapter_doContainRun_0(self);
};;

SIGContainAdapter.prototype['setReportRate'] = SIGContainAdapter.prototype.setReportRate = /** @suppress {undefinedVars, duplicate} @this{Object} */function(reportRate, speedUnits) {
  var self = this.ptr;
  if (reportRate && typeof reportRate === 'object') reportRate = reportRate.ptr;
  if (speedUnits && typeof speedUnits === 'object') speedUnits = speedUnits.ptr;
  _emscripten_bind_SIGContainAdapter_setReportRate_2(self, reportRate, speedUnits);
};;

SIGContainAdapter.prototype['getPerimiterAtInitialAttack'] = SIGContainAdapter.prototype.getPerimiterAtInitialAttack = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getPerimiterAtInitialAttack_1(self, lengthUnits);
};;

SIGContainAdapter.prototype['setTactic'] = SIGContainAdapter.prototype.setTactic = /** @suppress {undefinedVars, duplicate} @this{Object} */function(tactic) {
  var self = this.ptr;
  if (tactic && typeof tactic === 'object') tactic = tactic.ptr;
  _emscripten_bind_SIGContainAdapter_setTactic_1(self, tactic);
};;

SIGContainAdapter.prototype['removeAllResources'] = SIGContainAdapter.prototype.removeAllResources = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainAdapter_removeAllResources_0(self);
};;

SIGContainAdapter.prototype['getFinalFireSize'] = SIGContainAdapter.prototype.getFinalFireSize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(areaUnits) {
  var self = this.ptr;
  if (areaUnits && typeof areaUnits === 'object') areaUnits = areaUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getFinalFireSize_1(self, areaUnits);
};;

SIGContainAdapter.prototype['getFireSizeAtInitialAttack'] = SIGContainAdapter.prototype.getFireSizeAtInitialAttack = /** @suppress {undefinedVars, duplicate} @this{Object} */function(areaUnits) {
  var self = this.ptr;
  if (areaUnits && typeof areaUnits === 'object') areaUnits = areaUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getFireSizeAtInitialAttack_1(self, areaUnits);
};;

SIGContainAdapter.prototype['setAttackDistance'] = SIGContainAdapter.prototype.setAttackDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function(attackDistance, lengthUnits) {
  var self = this.ptr;
  if (attackDistance && typeof attackDistance === 'object') attackDistance = attackDistance.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  _emscripten_bind_SIGContainAdapter_setAttackDistance_2(self, attackDistance, lengthUnits);
};;

SIGContainAdapter.prototype['getContainmentStatus'] = SIGContainAdapter.prototype.getContainmentStatus = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainAdapter_getContainmentStatus_0(self);
};;

SIGContainAdapter.prototype['removeResourceWithThisDesc'] = SIGContainAdapter.prototype.removeResourceWithThisDesc = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desc) {
  var self = this.ptr;
  ensureCache.prepare();
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  return _emscripten_bind_SIGContainAdapter_removeResourceWithThisDesc_1(self, desc);
};;

SIGContainAdapter.prototype['getPerimeterAtContainment'] = SIGContainAdapter.prototype.getPerimeterAtContainment = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getPerimeterAtContainment_1(self, lengthUnits);
};;

SIGContainAdapter.prototype['getFinalFireLineLength'] = SIGContainAdapter.prototype.getFinalFireLineLength = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lengthUnits) {
  var self = this.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getFinalFireLineLength_1(self, lengthUnits);
};;

SIGContainAdapter.prototype['setRetry'] = SIGContainAdapter.prototype.setRetry = /** @suppress {undefinedVars, duplicate} @this{Object} */function(retry) {
  var self = this.ptr;
  if (retry && typeof retry === 'object') retry = retry.ptr;
  _emscripten_bind_SIGContainAdapter_setRetry_1(self, retry);
};;

SIGContainAdapter.prototype['getFinalContainmentArea'] = SIGContainAdapter.prototype.getFinalContainmentArea = /** @suppress {undefinedVars, duplicate} @this{Object} */function(areaUnits) {
  var self = this.ptr;
  if (areaUnits && typeof areaUnits === 'object') areaUnits = areaUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getFinalContainmentArea_1(self, areaUnits);
};;

SIGContainAdapter.prototype['removeResourceAt'] = SIGContainAdapter.prototype.removeResourceAt = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_SIGContainAdapter_removeResourceAt_1(self, index);
};;

SIGContainAdapter.prototype['removeAllResourcesWithThisDesc'] = SIGContainAdapter.prototype.removeAllResourcesWithThisDesc = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desc) {
  var self = this.ptr;
  ensureCache.prepare();
  if (desc && typeof desc === 'object') desc = desc.ptr;
  else desc = ensureString(desc);
  return _emscripten_bind_SIGContainAdapter_removeAllResourcesWithThisDesc_1(self, desc);
};;

SIGContainAdapter.prototype['getFinalCost'] = SIGContainAdapter.prototype.getFinalCost = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGContainAdapter_getFinalCost_0(self);
};;

SIGContainAdapter.prototype['getFinalTimeSinceReport'] = SIGContainAdapter.prototype.getFinalTimeSinceReport = /** @suppress {undefinedVars, duplicate} @this{Object} */function(timeUnits) {
  var self = this.ptr;
  if (timeUnits && typeof timeUnits === 'object') timeUnits = timeUnits.ptr;
  return _emscripten_bind_SIGContainAdapter_getFinalTimeSinceReport_1(self, timeUnits);
};;

SIGContainAdapter.prototype['setFireStartTime'] = SIGContainAdapter.prototype.setFireStartTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function(fireStartTime) {
  var self = this.ptr;
  if (fireStartTime && typeof fireStartTime === 'object') fireStartTime = fireStartTime.ptr;
  _emscripten_bind_SIGContainAdapter_setFireStartTime_1(self, fireStartTime);
};;

SIGContainAdapter.prototype['setMinSteps'] = SIGContainAdapter.prototype.setMinSteps = /** @suppress {undefinedVars, duplicate} @this{Object} */function(minSteps) {
  var self = this.ptr;
  if (minSteps && typeof minSteps === 'object') minSteps = minSteps.ptr;
  _emscripten_bind_SIGContainAdapter_setMinSteps_1(self, minSteps);
};;

SIGContainAdapter.prototype['setMaxSteps'] = SIGContainAdapter.prototype.setMaxSteps = /** @suppress {undefinedVars, duplicate} @this{Object} */function(maxSteps) {
  var self = this.ptr;
  if (maxSteps && typeof maxSteps === 'object') maxSteps = maxSteps.ptr;
  _emscripten_bind_SIGContainAdapter_setMaxSteps_1(self, maxSteps);
};;

SIGContainAdapter.prototype['setMaxFireSize'] = SIGContainAdapter.prototype.setMaxFireSize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(maxFireSize) {
  var self = this.ptr;
  if (maxFireSize && typeof maxFireSize === 'object') maxFireSize = maxFireSize.ptr;
  _emscripten_bind_SIGContainAdapter_setMaxFireSize_1(self, maxFireSize);
};;

SIGContainAdapter.prototype['addResource'] = SIGContainAdapter.prototype.addResource = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arrival, duration, timeUnit, productionRate, productionRateUnits, description, baseCost, hourCost) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arrival && typeof arrival === 'object') arrival = arrival.ptr;
  if (duration && typeof duration === 'object') duration = duration.ptr;
  if (timeUnit && typeof timeUnit === 'object') timeUnit = timeUnit.ptr;
  if (productionRate && typeof productionRate === 'object') productionRate = productionRate.ptr;
  if (productionRateUnits && typeof productionRateUnits === 'object') productionRateUnits = productionRateUnits.ptr;
  if (description && typeof description === 'object') description = description.ptr;
  else description = ensureString(description);
  if (baseCost && typeof baseCost === 'object') baseCost = baseCost.ptr;
  if (hourCost && typeof hourCost === 'object') hourCost = hourCost.ptr;
  _emscripten_bind_SIGContainAdapter_addResource_8(self, arrival, duration, timeUnit, productionRate, productionRateUnits, description, baseCost, hourCost);
};;

  SIGContainAdapter.prototype['__destroy__'] = SIGContainAdapter.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGContainAdapter___destroy___0(self);
};
// SIGIgniteInputs
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGIgniteInputs() {
  this.ptr = _emscripten_bind_SIGIgniteInputs_SIGIgniteInputs_0();
  getCache(SIGIgniteInputs)[this.ptr] = this;
};;
SIGIgniteInputs.prototype = Object.create(WrapperObject.prototype);
SIGIgniteInputs.prototype.constructor = SIGIgniteInputs;
SIGIgniteInputs.prototype.__class__ = SIGIgniteInputs;
SIGIgniteInputs.__cache__ = {};
Module['SIGIgniteInputs'] = SIGIgniteInputs;

SIGIgniteInputs.prototype['initializeMembers'] = SIGIgniteInputs.prototype.initializeMembers = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGIgniteInputs_initializeMembers_0(self);
};;

SIGIgniteInputs.prototype['setAirTemperature'] = SIGIgniteInputs.prototype.setAirTemperature = /** @suppress {undefinedVars, duplicate} @this{Object} */function(airTemperature, temperatureUnits) {
  var self = this.ptr;
  if (airTemperature && typeof airTemperature === 'object') airTemperature = airTemperature.ptr;
  if (temperatureUnits && typeof temperatureUnits === 'object') temperatureUnits = temperatureUnits.ptr;
  _emscripten_bind_SIGIgniteInputs_setAirTemperature_2(self, airTemperature, temperatureUnits);
};;

SIGIgniteInputs.prototype['setDuffDepth'] = SIGIgniteInputs.prototype.setDuffDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(duffDepth, lengthUnits) {
  var self = this.ptr;
  if (duffDepth && typeof duffDepth === 'object') duffDepth = duffDepth.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  _emscripten_bind_SIGIgniteInputs_setDuffDepth_2(self, duffDepth, lengthUnits);
};;

SIGIgniteInputs.prototype['setIgnitionFuelBedType'] = SIGIgniteInputs.prototype.setIgnitionFuelBedType = /** @suppress {undefinedVars, duplicate} @this{Object} */function(fuelBedType) {
  var self = this.ptr;
  if (fuelBedType && typeof fuelBedType === 'object') fuelBedType = fuelBedType.ptr;
  _emscripten_bind_SIGIgniteInputs_setIgnitionFuelBedType_1(self, fuelBedType);
};;

SIGIgniteInputs.prototype['setLightningChargeType'] = SIGIgniteInputs.prototype.setLightningChargeType = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lightningChargeType) {
  var self = this.ptr;
  if (lightningChargeType && typeof lightningChargeType === 'object') lightningChargeType = lightningChargeType.ptr;
  _emscripten_bind_SIGIgniteInputs_setLightningChargeType_1(self, lightningChargeType);
};;

SIGIgniteInputs.prototype['setMoistureHundredHour'] = SIGIgniteInputs.prototype.setMoistureHundredHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(hundredHourMoisture, moistureUnits) {
  var self = this.ptr;
  if (hundredHourMoisture && typeof hundredHourMoisture === 'object') hundredHourMoisture = hundredHourMoisture.ptr;
  if (moistureUnits && typeof moistureUnits === 'object') moistureUnits = moistureUnits.ptr;
  _emscripten_bind_SIGIgniteInputs_setMoistureHundredHour_2(self, hundredHourMoisture, moistureUnits);
};;

SIGIgniteInputs.prototype['setMoistureOneHour'] = SIGIgniteInputs.prototype.setMoistureOneHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(moistureOneHour, moistureUnits) {
  var self = this.ptr;
  if (moistureOneHour && typeof moistureOneHour === 'object') moistureOneHour = moistureOneHour.ptr;
  if (moistureUnits && typeof moistureUnits === 'object') moistureUnits = moistureUnits.ptr;
  _emscripten_bind_SIGIgniteInputs_setMoistureOneHour_2(self, moistureOneHour, moistureUnits);
};;

SIGIgniteInputs.prototype['setSunShade'] = SIGIgniteInputs.prototype.setSunShade = /** @suppress {undefinedVars, duplicate} @this{Object} */function(sunShade, sunShadeUnits) {
  var self = this.ptr;
  if (sunShade && typeof sunShade === 'object') sunShade = sunShade.ptr;
  if (sunShadeUnits && typeof sunShadeUnits === 'object') sunShadeUnits = sunShadeUnits.ptr;
  _emscripten_bind_SIGIgniteInputs_setSunShade_2(self, sunShade, sunShadeUnits);
};;

SIGIgniteInputs.prototype['updateIgniteInputs'] = SIGIgniteInputs.prototype.updateIgniteInputs = /** @suppress {undefinedVars, duplicate} @this{Object} */function(moistureOneHour, moistureHundredHour, moistureUnits, airTemperature, temperatureUnits, sunShade, sunShadeUnits, fuelBedType, duffDepth, duffDepthUnits, lightningChargeType) {
  var self = this.ptr;
  if (moistureOneHour && typeof moistureOneHour === 'object') moistureOneHour = moistureOneHour.ptr;
  if (moistureHundredHour && typeof moistureHundredHour === 'object') moistureHundredHour = moistureHundredHour.ptr;
  if (moistureUnits && typeof moistureUnits === 'object') moistureUnits = moistureUnits.ptr;
  if (airTemperature && typeof airTemperature === 'object') airTemperature = airTemperature.ptr;
  if (temperatureUnits && typeof temperatureUnits === 'object') temperatureUnits = temperatureUnits.ptr;
  if (sunShade && typeof sunShade === 'object') sunShade = sunShade.ptr;
  if (sunShadeUnits && typeof sunShadeUnits === 'object') sunShadeUnits = sunShadeUnits.ptr;
  if (fuelBedType && typeof fuelBedType === 'object') fuelBedType = fuelBedType.ptr;
  if (duffDepth && typeof duffDepth === 'object') duffDepth = duffDepth.ptr;
  if (duffDepthUnits && typeof duffDepthUnits === 'object') duffDepthUnits = duffDepthUnits.ptr;
  if (lightningChargeType && typeof lightningChargeType === 'object') lightningChargeType = lightningChargeType.ptr;
  _emscripten_bind_SIGIgniteInputs_updateIgniteInputs_11(self, moistureOneHour, moistureHundredHour, moistureUnits, airTemperature, temperatureUnits, sunShade, sunShadeUnits, fuelBedType, duffDepth, duffDepthUnits, lightningChargeType);
};;

SIGIgniteInputs.prototype['getIgnitionFuelBedType'] = SIGIgniteInputs.prototype.getIgnitionFuelBedType = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGIgniteInputs_getIgnitionFuelBedType_0(self);
};;

SIGIgniteInputs.prototype['getLightningChargeType'] = SIGIgniteInputs.prototype.getLightningChargeType = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGIgniteInputs_getLightningChargeType_0(self);
};;

SIGIgniteInputs.prototype['getAirTemperature'] = SIGIgniteInputs.prototype.getAirTemperature = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgniteInputs_getAirTemperature_1(self, desiredUnits);
};;

SIGIgniteInputs.prototype['getDuffDepth'] = SIGIgniteInputs.prototype.getDuffDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgniteInputs_getDuffDepth_1(self, desiredUnits);
};;

SIGIgniteInputs.prototype['getMoistureHundredHour'] = SIGIgniteInputs.prototype.getMoistureHundredHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgniteInputs_getMoistureHundredHour_1(self, desiredUnits);
};;

SIGIgniteInputs.prototype['getMoistureOneHour'] = SIGIgniteInputs.prototype.getMoistureOneHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgniteInputs_getMoistureOneHour_1(self, desiredUnits);
};;

SIGIgniteInputs.prototype['getSunShade'] = SIGIgniteInputs.prototype.getSunShade = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgniteInputs_getSunShade_1(self, desiredUnits);
};;

  SIGIgniteInputs.prototype['__destroy__'] = SIGIgniteInputs.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGIgniteInputs___destroy___0(self);
};
// SIGIgnite
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGIgnite() {
  this.ptr = _emscripten_bind_SIGIgnite_SIGIgnite_0();
  getCache(SIGIgnite)[this.ptr] = this;
};;
SIGIgnite.prototype = Object.create(WrapperObject.prototype);
SIGIgnite.prototype.constructor = SIGIgnite;
SIGIgnite.prototype.__class__ = SIGIgnite;
SIGIgnite.__cache__ = {};
Module['SIGIgnite'] = SIGIgnite;

SIGIgnite.prototype['initializeMembers'] = SIGIgnite.prototype.initializeMembers = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGIgnite_initializeMembers_0(self);
};;

SIGIgnite.prototype['getFuelBedType'] = SIGIgnite.prototype.getFuelBedType = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGIgnite_getFuelBedType_0(self);
};;

SIGIgnite.prototype['getLightningChargeType'] = SIGIgnite.prototype.getLightningChargeType = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGIgnite_getLightningChargeType_0(self);
};;

SIGIgnite.prototype['calculateFirebrandIgnitionProbability'] = SIGIgnite.prototype.calculateFirebrandIgnitionProbability = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_calculateFirebrandIgnitionProbability_1(self, desiredUnits);
};;

SIGIgnite.prototype['calculateLightningIgnitionProbability'] = SIGIgnite.prototype.calculateLightningIgnitionProbability = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_calculateLightningIgnitionProbability_1(self, desiredUnits);
};;

SIGIgnite.prototype['setAirTemperature'] = SIGIgnite.prototype.setAirTemperature = /** @suppress {undefinedVars, duplicate} @this{Object} */function(airTemperature, temperatureUnites) {
  var self = this.ptr;
  if (airTemperature && typeof airTemperature === 'object') airTemperature = airTemperature.ptr;
  if (temperatureUnites && typeof temperatureUnites === 'object') temperatureUnites = temperatureUnites.ptr;
  _emscripten_bind_SIGIgnite_setAirTemperature_2(self, airTemperature, temperatureUnites);
};;

SIGIgnite.prototype['setDuffDepth'] = SIGIgnite.prototype.setDuffDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(duffDepth, lengthUnits) {
  var self = this.ptr;
  if (duffDepth && typeof duffDepth === 'object') duffDepth = duffDepth.ptr;
  if (lengthUnits && typeof lengthUnits === 'object') lengthUnits = lengthUnits.ptr;
  _emscripten_bind_SIGIgnite_setDuffDepth_2(self, duffDepth, lengthUnits);
};;

SIGIgnite.prototype['setIgnitionFuelBedType'] = SIGIgnite.prototype.setIgnitionFuelBedType = /** @suppress {undefinedVars, duplicate} @this{Object} */function(fuelBedType_) {
  var self = this.ptr;
  if (fuelBedType_ && typeof fuelBedType_ === 'object') fuelBedType_ = fuelBedType_.ptr;
  _emscripten_bind_SIGIgnite_setIgnitionFuelBedType_1(self, fuelBedType_);
};;

SIGIgnite.prototype['setLightningChargeType'] = SIGIgnite.prototype.setLightningChargeType = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lightningChargeType) {
  var self = this.ptr;
  if (lightningChargeType && typeof lightningChargeType === 'object') lightningChargeType = lightningChargeType.ptr;
  _emscripten_bind_SIGIgnite_setLightningChargeType_1(self, lightningChargeType);
};;

SIGIgnite.prototype['setMoistureHundredHour'] = SIGIgnite.prototype.setMoistureHundredHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(moistureHundredHour, moistureUnits) {
  var self = this.ptr;
  if (moistureHundredHour && typeof moistureHundredHour === 'object') moistureHundredHour = moistureHundredHour.ptr;
  if (moistureUnits && typeof moistureUnits === 'object') moistureUnits = moistureUnits.ptr;
  _emscripten_bind_SIGIgnite_setMoistureHundredHour_2(self, moistureHundredHour, moistureUnits);
};;

SIGIgnite.prototype['setMoistureOneHour'] = SIGIgnite.prototype.setMoistureOneHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(moistureOneHour, moistureUnits) {
  var self = this.ptr;
  if (moistureOneHour && typeof moistureOneHour === 'object') moistureOneHour = moistureOneHour.ptr;
  if (moistureUnits && typeof moistureUnits === 'object') moistureUnits = moistureUnits.ptr;
  _emscripten_bind_SIGIgnite_setMoistureOneHour_2(self, moistureOneHour, moistureUnits);
};;

SIGIgnite.prototype['setSunShade'] = SIGIgnite.prototype.setSunShade = /** @suppress {undefinedVars, duplicate} @this{Object} */function(sunShade, sunShadeUnits) {
  var self = this.ptr;
  if (sunShade && typeof sunShade === 'object') sunShade = sunShade.ptr;
  if (sunShadeUnits && typeof sunShadeUnits === 'object') sunShadeUnits = sunShadeUnits.ptr;
  _emscripten_bind_SIGIgnite_setSunShade_2(self, sunShade, sunShadeUnits);
};;

SIGIgnite.prototype['updateIgniteInputs'] = SIGIgnite.prototype.updateIgniteInputs = /** @suppress {undefinedVars, duplicate} @this{Object} */function(moistureOneHour, moistureHundredHour, moistureUnits, airTemperature, temperatureUnits, sunShade, sunShadeUnits, fuelBedType, duffDepth, duffDepthUnits, lightningChargeType) {
  var self = this.ptr;
  if (moistureOneHour && typeof moistureOneHour === 'object') moistureOneHour = moistureOneHour.ptr;
  if (moistureHundredHour && typeof moistureHundredHour === 'object') moistureHundredHour = moistureHundredHour.ptr;
  if (moistureUnits && typeof moistureUnits === 'object') moistureUnits = moistureUnits.ptr;
  if (airTemperature && typeof airTemperature === 'object') airTemperature = airTemperature.ptr;
  if (temperatureUnits && typeof temperatureUnits === 'object') temperatureUnits = temperatureUnits.ptr;
  if (sunShade && typeof sunShade === 'object') sunShade = sunShade.ptr;
  if (sunShadeUnits && typeof sunShadeUnits === 'object') sunShadeUnits = sunShadeUnits.ptr;
  if (fuelBedType && typeof fuelBedType === 'object') fuelBedType = fuelBedType.ptr;
  if (duffDepth && typeof duffDepth === 'object') duffDepth = duffDepth.ptr;
  if (duffDepthUnits && typeof duffDepthUnits === 'object') duffDepthUnits = duffDepthUnits.ptr;
  if (lightningChargeType && typeof lightningChargeType === 'object') lightningChargeType = lightningChargeType.ptr;
  _emscripten_bind_SIGIgnite_updateIgniteInputs_11(self, moistureOneHour, moistureHundredHour, moistureUnits, airTemperature, temperatureUnits, sunShade, sunShadeUnits, fuelBedType, duffDepth, duffDepthUnits, lightningChargeType);
};;

SIGIgnite.prototype['getAirTemperature'] = SIGIgnite.prototype.getAirTemperature = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_getAirTemperature_1(self, desiredUnits);
};;

SIGIgnite.prototype['getDuffDepth'] = SIGIgnite.prototype.getDuffDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_getDuffDepth_1(self, desiredUnits);
};;

SIGIgnite.prototype['getFuelTemperature'] = SIGIgnite.prototype.getFuelTemperature = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_getFuelTemperature_1(self, desiredUnits);
};;

SIGIgnite.prototype['getMoistureHundredHour'] = SIGIgnite.prototype.getMoistureHundredHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_getMoistureHundredHour_1(self, desiredUnits);
};;

SIGIgnite.prototype['getMoistureOneHour'] = SIGIgnite.prototype.getMoistureOneHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_getMoistureOneHour_1(self, desiredUnits);
};;

SIGIgnite.prototype['getSunShade'] = SIGIgnite.prototype.getSunShade = /** @suppress {undefinedVars, duplicate} @this{Object} */function(desiredUnits) {
  var self = this.ptr;
  if (desiredUnits && typeof desiredUnits === 'object') desiredUnits = desiredUnits.ptr;
  return _emscripten_bind_SIGIgnite_getSunShade_1(self, desiredUnits);
};;

SIGIgnite.prototype['isFuelDepthNeeded'] = SIGIgnite.prototype.isFuelDepthNeeded = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_emscripten_bind_SIGIgnite_isFuelDepthNeeded_0(self));
};;

  SIGIgnite.prototype['__destroy__'] = SIGIgnite.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGIgnite___destroy___0(self);
};
// SIGSpotInputs
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGSpotInputs() {
  this.ptr = _emscripten_bind_SIGSpotInputs_SIGSpotInputs_0();
  getCache(SIGSpotInputs)[this.ptr] = this;
};;
SIGSpotInputs.prototype = Object.create(WrapperObject.prototype);
SIGSpotInputs.prototype.constructor = SIGSpotInputs;
SIGSpotInputs.prototype.__class__ = SIGSpotInputs;
SIGSpotInputs.__cache__ = {};
Module['SIGSpotInputs'] = SIGSpotInputs;

SIGSpotInputs.prototype['getLocation'] = SIGSpotInputs.prototype.getLocation = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpotInputs_getLocation_0(self);
};;

SIGSpotInputs.prototype['getTreeSpecies'] = SIGSpotInputs.prototype.getTreeSpecies = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpotInputs_getTreeSpecies_0(self);
};;

SIGSpotInputs.prototype['setBurningPileFlameHeight'] = SIGSpotInputs.prototype.setBurningPileFlameHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(buringPileFlameHeight, flameHeightUnits) {
  var self = this.ptr;
  if (buringPileFlameHeight && typeof buringPileFlameHeight === 'object') buringPileFlameHeight = buringPileFlameHeight.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setBurningPileFlameHeight_2(self, buringPileFlameHeight, flameHeightUnits);
};;

SIGSpotInputs.prototype['setDBH'] = SIGSpotInputs.prototype.setDBH = /** @suppress {undefinedVars, duplicate} @this{Object} */function(DBH, DBHUnits) {
  var self = this.ptr;
  if (DBH && typeof DBH === 'object') DBH = DBH.ptr;
  if (DBHUnits && typeof DBHUnits === 'object') DBHUnits = DBHUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setDBH_2(self, DBH, DBHUnits);
};;

SIGSpotInputs.prototype['setDownwindCoverHeight'] = SIGSpotInputs.prototype.setDownwindCoverHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(downwindCoverHeight, coverHeightUnits) {
  var self = this.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setDownwindCoverHeight_2(self, downwindCoverHeight, coverHeightUnits);
};;

SIGSpotInputs.prototype['setLocation'] = SIGSpotInputs.prototype.setLocation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  _emscripten_bind_SIGSpotInputs_setLocation_1(self, location);
};;

SIGSpotInputs.prototype['setRidgeToValleyDistance'] = SIGSpotInputs.prototype.setRidgeToValleyDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ridgeToValleyDistance, ridgeToValleyDistanceUnits) {
  var self = this.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setRidgeToValleyDistance_2(self, ridgeToValleyDistance, ridgeToValleyDistanceUnits);
};;

SIGSpotInputs.prototype['setRidgeToValleyElevation'] = SIGSpotInputs.prototype.setRidgeToValleyElevation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ridgeToValleyElevation, elevationUnits) {
  var self = this.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setRidgeToValleyElevation_2(self, ridgeToValleyElevation, elevationUnits);
};;

SIGSpotInputs.prototype['setSurfaceFlameLength'] = SIGSpotInputs.prototype.setSurfaceFlameLength = /** @suppress {undefinedVars, duplicate} @this{Object} */function(surfaceFlameLength, flameLengthUnits) {
  var self = this.ptr;
  if (surfaceFlameLength && typeof surfaceFlameLength === 'object') surfaceFlameLength = surfaceFlameLength.ptr;
  if (flameLengthUnits && typeof flameLengthUnits === 'object') flameLengthUnits = flameLengthUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setSurfaceFlameLength_2(self, surfaceFlameLength, flameLengthUnits);
};;

SIGSpotInputs.prototype['setTorchingTrees'] = SIGSpotInputs.prototype.setTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(torchingTrees) {
  var self = this.ptr;
  if (torchingTrees && typeof torchingTrees === 'object') torchingTrees = torchingTrees.ptr;
  _emscripten_bind_SIGSpotInputs_setTorchingTrees_1(self, torchingTrees);
};;

SIGSpotInputs.prototype['setTreeHeight'] = SIGSpotInputs.prototype.setTreeHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(treeHeight, treeHeightUnits) {
  var self = this.ptr;
  if (treeHeight && typeof treeHeight === 'object') treeHeight = treeHeight.ptr;
  if (treeHeightUnits && typeof treeHeightUnits === 'object') treeHeightUnits = treeHeightUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setTreeHeight_2(self, treeHeight, treeHeightUnits);
};;

SIGSpotInputs.prototype['setTreeSpecies'] = SIGSpotInputs.prototype.setTreeSpecies = /** @suppress {undefinedVars, duplicate} @this{Object} */function(treeSpecies) {
  var self = this.ptr;
  if (treeSpecies && typeof treeSpecies === 'object') treeSpecies = treeSpecies.ptr;
  _emscripten_bind_SIGSpotInputs_setTreeSpecies_1(self, treeSpecies);
};;

SIGSpotInputs.prototype['setWindSpeedAtTwentyFeet'] = SIGSpotInputs.prototype.setWindSpeedAtTwentyFeet = /** @suppress {undefinedVars, duplicate} @this{Object} */function(windSpeedAtTwentyFeet, windSpeedUnits) {
  var self = this.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  _emscripten_bind_SIGSpotInputs_setWindSpeedAtTwentyFeet_2(self, windSpeedAtTwentyFeet, windSpeedUnits);
};;

SIGSpotInputs.prototype['updateSpotInputsForBurningPile'] = SIGSpotInputs.prototype.updateSpotInputsForBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, buringPileFlameHeight, flameHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  if (buringPileFlameHeight && typeof buringPileFlameHeight === 'object') buringPileFlameHeight = buringPileFlameHeight.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  _emscripten_bind_SIGSpotInputs_updateSpotInputsForBurningPile_11(self, location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, buringPileFlameHeight, flameHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits);
};;

SIGSpotInputs.prototype['updateSpotInputsForSurfaceFire'] = SIGSpotInputs.prototype.updateSpotInputsForSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits, surfaceFlameLength, flameLengthUnits) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  if (surfaceFlameLength && typeof surfaceFlameLength === 'object') surfaceFlameLength = surfaceFlameLength.ptr;
  if (flameLengthUnits && typeof flameLengthUnits === 'object') flameLengthUnits = flameLengthUnits.ptr;
  _emscripten_bind_SIGSpotInputs_updateSpotInputsForSurfaceFire_11(self, location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits, surfaceFlameLength, flameLengthUnits);
};;

SIGSpotInputs.prototype['updateSpotInputsForTorchingTrees'] = SIGSpotInputs.prototype.updateSpotInputsForTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, torchingTrees, DBH, DBHUnits, treeHeight, treeHeightUnits, treeSpecies, windSpeedAtTwentyFeet, windSpeedUnits) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  if (torchingTrees && typeof torchingTrees === 'object') torchingTrees = torchingTrees.ptr;
  if (DBH && typeof DBH === 'object') DBH = DBH.ptr;
  if (DBHUnits && typeof DBHUnits === 'object') DBHUnits = DBHUnits.ptr;
  if (treeHeight && typeof treeHeight === 'object') treeHeight = treeHeight.ptr;
  if (treeHeightUnits && typeof treeHeightUnits === 'object') treeHeightUnits = treeHeightUnits.ptr;
  if (treeSpecies && typeof treeSpecies === 'object') treeSpecies = treeSpecies.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  _emscripten_bind_SIGSpotInputs_updateSpotInputsForTorchingTrees_15(self, location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, torchingTrees, DBH, DBHUnits, treeHeight, treeHeightUnits, treeSpecies, windSpeedAtTwentyFeet, windSpeedUnits);
};;

SIGSpotInputs.prototype['getBurningPileFlameHeight'] = SIGSpotInputs.prototype.getBurningPileFlameHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flameHeightUnits) {
  var self = this.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getBurningPileFlameHeight_1(self, flameHeightUnits);
};;

SIGSpotInputs.prototype['getDBH'] = SIGSpotInputs.prototype.getDBH = /** @suppress {undefinedVars, duplicate} @this{Object} */function(DBHUnits) {
  var self = this.ptr;
  if (DBHUnits && typeof DBHUnits === 'object') DBHUnits = DBHUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getDBH_1(self, DBHUnits);
};;

SIGSpotInputs.prototype['getDownwindCoverHeight'] = SIGSpotInputs.prototype.getDownwindCoverHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(coverHeightUnits) {
  var self = this.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getDownwindCoverHeight_1(self, coverHeightUnits);
};;

SIGSpotInputs.prototype['getRidgeToValleyDistance'] = SIGSpotInputs.prototype.getRidgeToValleyDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ridgeToValleyDistanceUnits) {
  var self = this.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getRidgeToValleyDistance_1(self, ridgeToValleyDistanceUnits);
};;

SIGSpotInputs.prototype['getRidgeToValleyElevation'] = SIGSpotInputs.prototype.getRidgeToValleyElevation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(elevationUnits) {
  var self = this.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getRidgeToValleyElevation_1(self, elevationUnits);
};;

SIGSpotInputs.prototype['getSurfaceFlameLength'] = SIGSpotInputs.prototype.getSurfaceFlameLength = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flameLengthUnits) {
  var self = this.ptr;
  if (flameLengthUnits && typeof flameLengthUnits === 'object') flameLengthUnits = flameLengthUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getSurfaceFlameLength_1(self, flameLengthUnits);
};;

SIGSpotInputs.prototype['getTreeHeight'] = SIGSpotInputs.prototype.getTreeHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(treeHeightUnits) {
  var self = this.ptr;
  if (treeHeightUnits && typeof treeHeightUnits === 'object') treeHeightUnits = treeHeightUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getTreeHeight_1(self, treeHeightUnits);
};;

SIGSpotInputs.prototype['getWindSpeedAtTwentyFeet'] = SIGSpotInputs.prototype.getWindSpeedAtTwentyFeet = /** @suppress {undefinedVars, duplicate} @this{Object} */function(windSpeedUnits) {
  var self = this.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  return _emscripten_bind_SIGSpotInputs_getWindSpeedAtTwentyFeet_1(self, windSpeedUnits);
};;

SIGSpotInputs.prototype['getTorchingTrees'] = SIGSpotInputs.prototype.getTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpotInputs_getTorchingTrees_0(self);
};;

  SIGSpotInputs.prototype['__destroy__'] = SIGSpotInputs.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGSpotInputs___destroy___0(self);
};
// SIGSpot
/** @suppress {undefinedVars, duplicate} @this{Object} */function SIGSpot() {
  this.ptr = _emscripten_bind_SIGSpot_SIGSpot_0();
  getCache(SIGSpot)[this.ptr] = this;
};;
SIGSpot.prototype = Object.create(WrapperObject.prototype);
SIGSpot.prototype.constructor = SIGSpot;
SIGSpot.prototype.__class__ = SIGSpot;
SIGSpot.__cache__ = {};
Module['SIGSpot'] = SIGSpot;

SIGSpot.prototype['initializeMembers'] = SIGSpot.prototype.initializeMembers = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGSpot_initializeMembers_0(self);
};;

SIGSpot.prototype['calculateSpottingDistanceFromBurningPile'] = SIGSpot.prototype.calculateSpottingDistanceFromBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGSpot_calculateSpottingDistanceFromBurningPile_0(self);
};;

SIGSpot.prototype['calculateSpottingDistanceFromSurfaceFire'] = SIGSpot.prototype.calculateSpottingDistanceFromSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGSpot_calculateSpottingDistanceFromSurfaceFire_0(self);
};;

SIGSpot.prototype['calculateSpottingDistanceFromTorchingTrees'] = SIGSpot.prototype.calculateSpottingDistanceFromTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGSpot_calculateSpottingDistanceFromTorchingTrees_0(self);
};;

SIGSpot.prototype['setBurningPileFlameHeight'] = SIGSpot.prototype.setBurningPileFlameHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(buringPileflameHeight, flameHeightUnits) {
  var self = this.ptr;
  if (buringPileflameHeight && typeof buringPileflameHeight === 'object') buringPileflameHeight = buringPileflameHeight.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  _emscripten_bind_SIGSpot_setBurningPileFlameHeight_2(self, buringPileflameHeight, flameHeightUnits);
};;

SIGSpot.prototype['setDBH'] = SIGSpot.prototype.setDBH = /** @suppress {undefinedVars, duplicate} @this{Object} */function(DBH, DBHUnits) {
  var self = this.ptr;
  if (DBH && typeof DBH === 'object') DBH = DBH.ptr;
  if (DBHUnits && typeof DBHUnits === 'object') DBHUnits = DBHUnits.ptr;
  _emscripten_bind_SIGSpot_setDBH_2(self, DBH, DBHUnits);
};;

SIGSpot.prototype['setDownwindCoverHeight'] = SIGSpot.prototype.setDownwindCoverHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(downwindCoverHeight, coverHeightUnits) {
  var self = this.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  _emscripten_bind_SIGSpot_setDownwindCoverHeight_2(self, downwindCoverHeight, coverHeightUnits);
};;

SIGSpot.prototype['setFlameLength'] = SIGSpot.prototype.setFlameLength = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flameLength, flameLengthUnits) {
  var self = this.ptr;
  if (flameLength && typeof flameLength === 'object') flameLength = flameLength.ptr;
  if (flameLengthUnits && typeof flameLengthUnits === 'object') flameLengthUnits = flameLengthUnits.ptr;
  _emscripten_bind_SIGSpot_setFlameLength_2(self, flameLength, flameLengthUnits);
};;

SIGSpot.prototype['setLocation'] = SIGSpot.prototype.setLocation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  _emscripten_bind_SIGSpot_setLocation_1(self, location);
};;

SIGSpot.prototype['setRidgeToValleyDistance'] = SIGSpot.prototype.setRidgeToValleyDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ridgeToValleyDistance, ridgeToValleyDistanceUnits) {
  var self = this.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  _emscripten_bind_SIGSpot_setRidgeToValleyDistance_2(self, ridgeToValleyDistance, ridgeToValleyDistanceUnits);
};;

SIGSpot.prototype['setRidgeToValleyElevation'] = SIGSpot.prototype.setRidgeToValleyElevation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ridgeToValleyElevation, elevationUnits) {
  var self = this.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  _emscripten_bind_SIGSpot_setRidgeToValleyElevation_2(self, ridgeToValleyElevation, elevationUnits);
};;

SIGSpot.prototype['setTorchingTrees'] = SIGSpot.prototype.setTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(torchingTrees) {
  var self = this.ptr;
  if (torchingTrees && typeof torchingTrees === 'object') torchingTrees = torchingTrees.ptr;
  _emscripten_bind_SIGSpot_setTorchingTrees_1(self, torchingTrees);
};;

SIGSpot.prototype['setTreeHeight'] = SIGSpot.prototype.setTreeHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(treeHeight, treeHeightUnits) {
  var self = this.ptr;
  if (treeHeight && typeof treeHeight === 'object') treeHeight = treeHeight.ptr;
  if (treeHeightUnits && typeof treeHeightUnits === 'object') treeHeightUnits = treeHeightUnits.ptr;
  _emscripten_bind_SIGSpot_setTreeHeight_2(self, treeHeight, treeHeightUnits);
};;

SIGSpot.prototype['setTreeSpecies'] = SIGSpot.prototype.setTreeSpecies = /** @suppress {undefinedVars, duplicate} @this{Object} */function(treeSpecies) {
  var self = this.ptr;
  if (treeSpecies && typeof treeSpecies === 'object') treeSpecies = treeSpecies.ptr;
  _emscripten_bind_SIGSpot_setTreeSpecies_1(self, treeSpecies);
};;

SIGSpot.prototype['setWindSpeedAtTwentyFeet'] = SIGSpot.prototype.setWindSpeedAtTwentyFeet = /** @suppress {undefinedVars, duplicate} @this{Object} */function(windSpeedAtTwentyFeet, windSpeedUnits) {
  var self = this.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  _emscripten_bind_SIGSpot_setWindSpeedAtTwentyFeet_2(self, windSpeedAtTwentyFeet, windSpeedUnits);
};;

SIGSpot.prototype['updateSpotInputsForBurningPile'] = SIGSpot.prototype.updateSpotInputsForBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, buringPileFlameHeight, flameHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  if (buringPileFlameHeight && typeof buringPileFlameHeight === 'object') buringPileFlameHeight = buringPileFlameHeight.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  _emscripten_bind_SIGSpot_updateSpotInputsForBurningPile_11(self, location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, buringPileFlameHeight, flameHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits);
};;

SIGSpot.prototype['updateSpotInputsForSurfaceFire'] = SIGSpot.prototype.updateSpotInputsForSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits, flameLength, flameLengthUnits) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  if (flameLength && typeof flameLength === 'object') flameLength = flameLength.ptr;
  if (flameLengthUnits && typeof flameLengthUnits === 'object') flameLengthUnits = flameLengthUnits.ptr;
  _emscripten_bind_SIGSpot_updateSpotInputsForSurfaceFire_11(self, location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, windSpeedAtTwentyFeet, windSpeedUnits, flameLength, flameLengthUnits);
};;

SIGSpot.prototype['updateSpotInputsForTorchingTrees'] = SIGSpot.prototype.updateSpotInputsForTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, torchingTrees, DBH, DBHUnits, treeHeight, treeHeightUnits, treeSpecies, windSpeedAtTwentyFeet, windSpeedUnits) {
  var self = this.ptr;
  if (location && typeof location === 'object') location = location.ptr;
  if (ridgeToValleyDistance && typeof ridgeToValleyDistance === 'object') ridgeToValleyDistance = ridgeToValleyDistance.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  if (ridgeToValleyElevation && typeof ridgeToValleyElevation === 'object') ridgeToValleyElevation = ridgeToValleyElevation.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  if (downwindCoverHeight && typeof downwindCoverHeight === 'object') downwindCoverHeight = downwindCoverHeight.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  if (torchingTrees && typeof torchingTrees === 'object') torchingTrees = torchingTrees.ptr;
  if (DBH && typeof DBH === 'object') DBH = DBH.ptr;
  if (DBHUnits && typeof DBHUnits === 'object') DBHUnits = DBHUnits.ptr;
  if (treeHeight && typeof treeHeight === 'object') treeHeight = treeHeight.ptr;
  if (treeHeightUnits && typeof treeHeightUnits === 'object') treeHeightUnits = treeHeightUnits.ptr;
  if (treeSpecies && typeof treeSpecies === 'object') treeSpecies = treeSpecies.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  _emscripten_bind_SIGSpot_updateSpotInputsForTorchingTrees_15(self, location, ridgeToValleyDistance, ridgeToValleyDistanceUnits, ridgeToValleyElevation, elevationUnits, downwindCoverHeight, coverHeightUnits, torchingTrees, DBH, DBHUnits, treeHeight, treeHeightUnits, treeSpecies, windSpeedAtTwentyFeet, windSpeedUnits);
};;

SIGSpot.prototype['getTorchingTrees'] = SIGSpot.prototype.getTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpot_getTorchingTrees_0(self);
};;

SIGSpot.prototype['getLocation'] = SIGSpot.prototype.getLocation = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpot_getLocation_0(self);
};;

SIGSpot.prototype['getTreeSpecies'] = SIGSpot.prototype.getTreeSpecies = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpot_getTreeSpecies_0(self);
};;

SIGSpot.prototype['getBurningPileFlameHeight'] = SIGSpot.prototype.getBurningPileFlameHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flameHeightUnits) {
  var self = this.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getBurningPileFlameHeight_1(self, flameHeightUnits);
};;

SIGSpot.prototype['getCoverHeightUsedForBurningPile'] = SIGSpot.prototype.getCoverHeightUsedForBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function(coverHeightUnits) {
  var self = this.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getCoverHeightUsedForBurningPile_1(self, coverHeightUnits);
};;

SIGSpot.prototype['getCoverHeightUsedForSurfaceFire'] = SIGSpot.prototype.getCoverHeightUsedForSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function(coverHeightUnits) {
  var self = this.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getCoverHeightUsedForSurfaceFire_1(self, coverHeightUnits);
};;

SIGSpot.prototype['getCoverHeightUsedForTorchingTrees'] = SIGSpot.prototype.getCoverHeightUsedForTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(coverHeightUnits) {
  var self = this.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getCoverHeightUsedForTorchingTrees_1(self, coverHeightUnits);
};;

SIGSpot.prototype['getDBH'] = SIGSpot.prototype.getDBH = /** @suppress {undefinedVars, duplicate} @this{Object} */function(DBHUnits) {
  var self = this.ptr;
  if (DBHUnits && typeof DBHUnits === 'object') DBHUnits = DBHUnits.ptr;
  return _emscripten_bind_SIGSpot_getDBH_1(self, DBHUnits);
};;

SIGSpot.prototype['getDownwindCoverHeight'] = SIGSpot.prototype.getDownwindCoverHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(coverHeightUnits) {
  var self = this.ptr;
  if (coverHeightUnits && typeof coverHeightUnits === 'object') coverHeightUnits = coverHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getDownwindCoverHeight_1(self, coverHeightUnits);
};;

SIGSpot.prototype['getFlameDurationForTorchingTrees'] = SIGSpot.prototype.getFlameDurationForTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(durationUnits) {
  var self = this.ptr;
  if (durationUnits && typeof durationUnits === 'object') durationUnits = durationUnits.ptr;
  return _emscripten_bind_SIGSpot_getFlameDurationForTorchingTrees_1(self, durationUnits);
};;

SIGSpot.prototype['getFlameHeightForTorchingTrees'] = SIGSpot.prototype.getFlameHeightForTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flameHeightUnits) {
  var self = this.ptr;
  if (flameHeightUnits && typeof flameHeightUnits === 'object') flameHeightUnits = flameHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getFlameHeightForTorchingTrees_1(self, flameHeightUnits);
};;

SIGSpot.prototype['getFlameRatioForTorchingTrees'] = SIGSpot.prototype.getFlameRatioForTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_SIGSpot_getFlameRatioForTorchingTrees_0(self);
};;

SIGSpot.prototype['getMaxFirebrandHeightFromBurningPile'] = SIGSpot.prototype.getMaxFirebrandHeightFromBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function(firebrandHeightUnits) {
  var self = this.ptr;
  if (firebrandHeightUnits && typeof firebrandHeightUnits === 'object') firebrandHeightUnits = firebrandHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxFirebrandHeightFromBurningPile_1(self, firebrandHeightUnits);
};;

SIGSpot.prototype['getMaxFirebrandHeightFromSurfaceFire'] = SIGSpot.prototype.getMaxFirebrandHeightFromSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function(firebrandHeightUnits) {
  var self = this.ptr;
  if (firebrandHeightUnits && typeof firebrandHeightUnits === 'object') firebrandHeightUnits = firebrandHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxFirebrandHeightFromSurfaceFire_1(self, firebrandHeightUnits);
};;

SIGSpot.prototype['getMaxFirebrandHeightFromTorchingTrees'] = SIGSpot.prototype.getMaxFirebrandHeightFromTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(firebrandHeightUnits) {
  var self = this.ptr;
  if (firebrandHeightUnits && typeof firebrandHeightUnits === 'object') firebrandHeightUnits = firebrandHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxFirebrandHeightFromTorchingTrees_1(self, firebrandHeightUnits);
};;

SIGSpot.prototype['getMaxFlatTerrainSpottingDistanceFromBurningPile'] = SIGSpot.prototype.getMaxFlatTerrainSpottingDistanceFromBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spottingDistanceUnits) {
  var self = this.ptr;
  if (spottingDistanceUnits && typeof spottingDistanceUnits === 'object') spottingDistanceUnits = spottingDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromBurningPile_1(self, spottingDistanceUnits);
};;

SIGSpot.prototype['getMaxFlatTerrainSpottingDistanceFromSurfaceFire'] = SIGSpot.prototype.getMaxFlatTerrainSpottingDistanceFromSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spottingDistanceUnits) {
  var self = this.ptr;
  if (spottingDistanceUnits && typeof spottingDistanceUnits === 'object') spottingDistanceUnits = spottingDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromSurfaceFire_1(self, spottingDistanceUnits);
};;

SIGSpot.prototype['getMaxFlatTerrainSpottingDistanceFromTorchingTrees'] = SIGSpot.prototype.getMaxFlatTerrainSpottingDistanceFromTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spottingDistanceUnits) {
  var self = this.ptr;
  if (spottingDistanceUnits && typeof spottingDistanceUnits === 'object') spottingDistanceUnits = spottingDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxFlatTerrainSpottingDistanceFromTorchingTrees_1(self, spottingDistanceUnits);
};;

SIGSpot.prototype['getMaxMountainousTerrainSpottingDistanceFromBurningPile'] = SIGSpot.prototype.getMaxMountainousTerrainSpottingDistanceFromBurningPile = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spottingDistanceUnits) {
  var self = this.ptr;
  if (spottingDistanceUnits && typeof spottingDistanceUnits === 'object') spottingDistanceUnits = spottingDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromBurningPile_1(self, spottingDistanceUnits);
};;

SIGSpot.prototype['getMaxMountainousTerrainSpottingDistanceFromSurfaceFire'] = SIGSpot.prototype.getMaxMountainousTerrainSpottingDistanceFromSurfaceFire = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spottingDistanceUnits) {
  var self = this.ptr;
  if (spottingDistanceUnits && typeof spottingDistanceUnits === 'object') spottingDistanceUnits = spottingDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromSurfaceFire_1(self, spottingDistanceUnits);
};;

SIGSpot.prototype['getMaxMountainousTerrainSpottingDistanceFromTorchingTrees'] = SIGSpot.prototype.getMaxMountainousTerrainSpottingDistanceFromTorchingTrees = /** @suppress {undefinedVars, duplicate} @this{Object} */function(spottingDistanceUnits) {
  var self = this.ptr;
  if (spottingDistanceUnits && typeof spottingDistanceUnits === 'object') spottingDistanceUnits = spottingDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getMaxMountainousTerrainSpottingDistanceFromTorchingTrees_1(self, spottingDistanceUnits);
};;

SIGSpot.prototype['getRidgeToValleyDistance'] = SIGSpot.prototype.getRidgeToValleyDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ridgeToValleyDistanceUnits) {
  var self = this.ptr;
  if (ridgeToValleyDistanceUnits && typeof ridgeToValleyDistanceUnits === 'object') ridgeToValleyDistanceUnits = ridgeToValleyDistanceUnits.ptr;
  return _emscripten_bind_SIGSpot_getRidgeToValleyDistance_1(self, ridgeToValleyDistanceUnits);
};;

SIGSpot.prototype['getRidgeToValleyElevation'] = SIGSpot.prototype.getRidgeToValleyElevation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(elevationUnits) {
  var self = this.ptr;
  if (elevationUnits && typeof elevationUnits === 'object') elevationUnits = elevationUnits.ptr;
  return _emscripten_bind_SIGSpot_getRidgeToValleyElevation_1(self, elevationUnits);
};;

SIGSpot.prototype['getSurfaceFlameLength'] = SIGSpot.prototype.getSurfaceFlameLength = /** @suppress {undefinedVars, duplicate} @this{Object} */function(surfaceFlameLengthUnits) {
  var self = this.ptr;
  if (surfaceFlameLengthUnits && typeof surfaceFlameLengthUnits === 'object') surfaceFlameLengthUnits = surfaceFlameLengthUnits.ptr;
  return _emscripten_bind_SIGSpot_getSurfaceFlameLength_1(self, surfaceFlameLengthUnits);
};;

SIGSpot.prototype['getTreeHeight'] = SIGSpot.prototype.getTreeHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(treeHeightUnits) {
  var self = this.ptr;
  if (treeHeightUnits && typeof treeHeightUnits === 'object') treeHeightUnits = treeHeightUnits.ptr;
  return _emscripten_bind_SIGSpot_getTreeHeight_1(self, treeHeightUnits);
};;

SIGSpot.prototype['getWindSpeedAtTwentyFeet'] = SIGSpot.prototype.getWindSpeedAtTwentyFeet = /** @suppress {undefinedVars, duplicate} @this{Object} */function(windSpeedUnits) {
  var self = this.ptr;
  if (windSpeedUnits && typeof windSpeedUnits === 'object') windSpeedUnits = windSpeedUnits.ptr;
  return _emscripten_bind_SIGSpot_getWindSpeedAtTwentyFeet_1(self, windSpeedUnits);
};;

  SIGSpot.prototype['__destroy__'] = SIGSpot.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_SIGSpot___destroy___0(self);
};
// PalmettoGallberry
/** @suppress {undefinedVars, duplicate} @this{Object} */function PalmettoGallberry() {
  this.ptr = _emscripten_bind_PalmettoGallberry_PalmettoGallberry_0();
  getCache(PalmettoGallberry)[this.ptr] = this;
};;
PalmettoGallberry.prototype = Object.create(WrapperObject.prototype);
PalmettoGallberry.prototype.constructor = PalmettoGallberry;
PalmettoGallberry.prototype.__class__ = PalmettoGallberry;
PalmettoGallberry.__cache__ = {};
Module['PalmettoGallberry'] = PalmettoGallberry;

PalmettoGallberry.prototype['initializeMembers'] = PalmettoGallberry.prototype.initializeMembers = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_PalmettoGallberry_initializeMembers_0(self);
};;

PalmettoGallberry.prototype['getHeatOfCombustionLive'] = PalmettoGallberry.prototype.getHeatOfCombustionLive = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getHeatOfCombustionLive_0(self);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyLitterLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyLitterLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, overstoryBasalArea) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (overstoryBasalArea && typeof overstoryBasalArea === 'object') overstoryBasalArea = overstoryBasalArea.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLitterLoad_2(self, ageOfRough, overstoryBasalArea);
};;

PalmettoGallberry.prototype['getPalmettoGallberyLiveOneHourLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyLiveOneHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveOneHourLoad_0(self);
};;

PalmettoGallberry.prototype['getPalmettoGallberyDeadFoliageLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyDeadFoliageLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadFoliageLoad_0(self);
};;

PalmettoGallberry.prototype['getHeatOfCombustionDead'] = PalmettoGallberry.prototype.getHeatOfCombustionDead = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getHeatOfCombustionDead_0(self);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyLiveFoliageLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyLiveFoliageLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, palmettoCoverage, heightOfUnderstory) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (palmettoCoverage && typeof palmettoCoverage === 'object') palmettoCoverage = palmettoCoverage.ptr;
  if (heightOfUnderstory && typeof heightOfUnderstory === 'object') heightOfUnderstory = heightOfUnderstory.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveFoliageLoad_3(self, ageOfRough, palmettoCoverage, heightOfUnderstory);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyLiveTenHourLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyLiveTenHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, heightOfUnderstory) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (heightOfUnderstory && typeof heightOfUnderstory === 'object') heightOfUnderstory = heightOfUnderstory.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveTenHourLoad_2(self, ageOfRough, heightOfUnderstory);
};;

PalmettoGallberry.prototype['getPalmettoGallberyDeadTenHourLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyDeadTenHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadTenHourLoad_0(self);
};;

PalmettoGallberry.prototype['getMoistureOfExtinctionDead'] = PalmettoGallberry.prototype.getMoistureOfExtinctionDead = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getMoistureOfExtinctionDead_0(self);
};;

PalmettoGallberry.prototype['getPalmettoGallberyLiveFoliageLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyLiveFoliageLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveFoliageLoad_0(self);
};;

PalmettoGallberry.prototype['getPalmettoGallberyLitterLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyLitterLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLitterLoad_0(self);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyDeadTenHourLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyDeadTenHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, palmettoCoverage) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (palmettoCoverage && typeof palmettoCoverage === 'object') palmettoCoverage = palmettoCoverage.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadTenHourLoad_2(self, ageOfRough, palmettoCoverage);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyLiveOneHourLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyLiveOneHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, heightOfUnderstory) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (heightOfUnderstory && typeof heightOfUnderstory === 'object') heightOfUnderstory = heightOfUnderstory.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyLiveOneHourLoad_2(self, ageOfRough, heightOfUnderstory);
};;

PalmettoGallberry.prototype['getPalmettoGallberyFuelBedDepth'] = PalmettoGallberry.prototype.getPalmettoGallberyFuelBedDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyFuelBedDepth_0(self);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyDeadFoliageLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyDeadFoliageLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, palmettoCoverage) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (palmettoCoverage && typeof palmettoCoverage === 'object') palmettoCoverage = palmettoCoverage.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadFoliageLoad_2(self, ageOfRough, palmettoCoverage);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyDeadOneHourLoad'] = PalmettoGallberry.prototype.calculatePalmettoGallberyDeadOneHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ageOfRough, heightOfUnderstory) {
  var self = this.ptr;
  if (ageOfRough && typeof ageOfRough === 'object') ageOfRough = ageOfRough.ptr;
  if (heightOfUnderstory && typeof heightOfUnderstory === 'object') heightOfUnderstory = heightOfUnderstory.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyDeadOneHourLoad_2(self, ageOfRough, heightOfUnderstory);
};;

PalmettoGallberry.prototype['getPalmettoGallberyLiveTenHourLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyLiveTenHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyLiveTenHourLoad_0(self);
};;

PalmettoGallberry.prototype['getPalmettoGallberyDeadOneHourLoad'] = PalmettoGallberry.prototype.getPalmettoGallberyDeadOneHourLoad = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_PalmettoGallberry_getPalmettoGallberyDeadOneHourLoad_0(self);
};;

PalmettoGallberry.prototype['calculatePalmettoGallberyFuelBedDepth'] = PalmettoGallberry.prototype.calculatePalmettoGallberyFuelBedDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(heightOfUnderstory) {
  var self = this.ptr;
  if (heightOfUnderstory && typeof heightOfUnderstory === 'object') heightOfUnderstory = heightOfUnderstory.ptr;
  return _emscripten_bind_PalmettoGallberry_calculatePalmettoGallberyFuelBedDepth_1(self, heightOfUnderstory);
};;

  PalmettoGallberry.prototype['__destroy__'] = PalmettoGallberry.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_PalmettoGallberry___destroy___0(self);
};
// WesternAspen
/** @suppress {undefinedVars, duplicate} @this{Object} */function WesternAspen() {
  this.ptr = _emscripten_bind_WesternAspen_WesternAspen_0();
  getCache(WesternAspen)[this.ptr] = this;
};;
WesternAspen.prototype = Object.create(WrapperObject.prototype);
WesternAspen.prototype.constructor = WesternAspen;
WesternAspen.prototype.__class__ = WesternAspen;
WesternAspen.__cache__ = {};
Module['WesternAspen'] = WesternAspen;

WesternAspen.prototype['initializeMembers'] = WesternAspen.prototype.initializeMembers = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_WesternAspen_initializeMembers_0(self);
};;

WesternAspen.prototype['calculateAspenMortality'] = WesternAspen.prototype.calculateAspenMortality = /** @suppress {undefinedVars, duplicate} @this{Object} */function(severity, flameLength, DBH) {
  var self = this.ptr;
  if (severity && typeof severity === 'object') severity = severity.ptr;
  if (flameLength && typeof flameLength === 'object') flameLength = flameLength.ptr;
  if (DBH && typeof DBH === 'object') DBH = DBH.ptr;
  return _emscripten_bind_WesternAspen_calculateAspenMortality_3(self, severity, flameLength, DBH);
};;

WesternAspen.prototype['getAspenDBH'] = WesternAspen.prototype.getAspenDBH = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenDBH_0(self);
};;

WesternAspen.prototype['getAspenFuelBedDepth'] = WesternAspen.prototype.getAspenFuelBedDepth = /** @suppress {undefinedVars, duplicate} @this{Object} */function(typeIndex) {
  var self = this.ptr;
  if (typeIndex && typeof typeIndex === 'object') typeIndex = typeIndex.ptr;
  return _emscripten_bind_WesternAspen_getAspenFuelBedDepth_1(self, typeIndex);
};;

WesternAspen.prototype['getAspenHeatOfCombustionDead'] = WesternAspen.prototype.getAspenHeatOfCombustionDead = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenHeatOfCombustionDead_0(self);
};;

WesternAspen.prototype['getAspenHeatOfCombustionLive'] = WesternAspen.prototype.getAspenHeatOfCombustionLive = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenHeatOfCombustionLive_0(self);
};;

WesternAspen.prototype['getAspenLoadDeadOneHour'] = WesternAspen.prototype.getAspenLoadDeadOneHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aspenFuelModelNumber, aspenCuringLevel) {
  var self = this.ptr;
  if (aspenFuelModelNumber && typeof aspenFuelModelNumber === 'object') aspenFuelModelNumber = aspenFuelModelNumber.ptr;
  if (aspenCuringLevel && typeof aspenCuringLevel === 'object') aspenCuringLevel = aspenCuringLevel.ptr;
  return _emscripten_bind_WesternAspen_getAspenLoadDeadOneHour_2(self, aspenFuelModelNumber, aspenCuringLevel);
};;

WesternAspen.prototype['getAspenLoadDeadTenHour'] = WesternAspen.prototype.getAspenLoadDeadTenHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aspenFuelModelNumber) {
  var self = this.ptr;
  if (aspenFuelModelNumber && typeof aspenFuelModelNumber === 'object') aspenFuelModelNumber = aspenFuelModelNumber.ptr;
  return _emscripten_bind_WesternAspen_getAspenLoadDeadTenHour_1(self, aspenFuelModelNumber);
};;

WesternAspen.prototype['getAspenLoadLiveHerbaceous'] = WesternAspen.prototype.getAspenLoadLiveHerbaceous = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aspenFuelModelNumber, aspenCuringLevel) {
  var self = this.ptr;
  if (aspenFuelModelNumber && typeof aspenFuelModelNumber === 'object') aspenFuelModelNumber = aspenFuelModelNumber.ptr;
  if (aspenCuringLevel && typeof aspenCuringLevel === 'object') aspenCuringLevel = aspenCuringLevel.ptr;
  return _emscripten_bind_WesternAspen_getAspenLoadLiveHerbaceous_2(self, aspenFuelModelNumber, aspenCuringLevel);
};;

WesternAspen.prototype['getAspenLoadLiveWoody'] = WesternAspen.prototype.getAspenLoadLiveWoody = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aspenFuelModelNumber, aspenCuringLevel) {
  var self = this.ptr;
  if (aspenFuelModelNumber && typeof aspenFuelModelNumber === 'object') aspenFuelModelNumber = aspenFuelModelNumber.ptr;
  if (aspenCuringLevel && typeof aspenCuringLevel === 'object') aspenCuringLevel = aspenCuringLevel.ptr;
  return _emscripten_bind_WesternAspen_getAspenLoadLiveWoody_2(self, aspenFuelModelNumber, aspenCuringLevel);
};;

WesternAspen.prototype['getAspenMoistureOfExtinctionDead'] = WesternAspen.prototype.getAspenMoistureOfExtinctionDead = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenMoistureOfExtinctionDead_0(self);
};;

WesternAspen.prototype['getAspenMortality'] = WesternAspen.prototype.getAspenMortality = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenMortality_0(self);
};;

WesternAspen.prototype['getAspenSavrDeadOneHour'] = WesternAspen.prototype.getAspenSavrDeadOneHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aspenFuelModelNumber, aspenCuringLevel) {
  var self = this.ptr;
  if (aspenFuelModelNumber && typeof aspenFuelModelNumber === 'object') aspenFuelModelNumber = aspenFuelModelNumber.ptr;
  if (aspenCuringLevel && typeof aspenCuringLevel === 'object') aspenCuringLevel = aspenCuringLevel.ptr;
  return _emscripten_bind_WesternAspen_getAspenSavrDeadOneHour_2(self, aspenFuelModelNumber, aspenCuringLevel);
};;

WesternAspen.prototype['getAspenSavrDeadTenHour'] = WesternAspen.prototype.getAspenSavrDeadTenHour = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenSavrDeadTenHour_0(self);
};;

WesternAspen.prototype['getAspenSavrLiveHerbaceous'] = WesternAspen.prototype.getAspenSavrLiveHerbaceous = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_WesternAspen_getAspenSavrLiveHerbaceous_0(self);
};;

WesternAspen.prototype['getAspenSavrLiveWoody'] = WesternAspen.prototype.getAspenSavrLiveWoody = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aspenFuelModelNumber, aspenCuringLevel) {
  var self = this.ptr;
  if (aspenFuelModelNumber && typeof aspenFuelModelNumber === 'object') aspenFuelModelNumber = aspenFuelModelNumber.ptr;
  if (aspenCuringLevel && typeof aspenCuringLevel === 'object') aspenCuringLevel = aspenCuringLevel.ptr;
  return _emscripten_bind_WesternAspen_getAspenSavrLiveWoody_2(self, aspenFuelModelNumber, aspenCuringLevel);
};;

  WesternAspen.prototype['__destroy__'] = WesternAspen.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_WesternAspen___destroy___0(self);
};
// WindSpeedUtility
/** @suppress {undefinedVars, duplicate} @this{Object} */function WindSpeedUtility() {
  this.ptr = _emscripten_bind_WindSpeedUtility_WindSpeedUtility_0();
  getCache(WindSpeedUtility)[this.ptr] = this;
};;
WindSpeedUtility.prototype = Object.create(WrapperObject.prototype);
WindSpeedUtility.prototype.constructor = WindSpeedUtility;
WindSpeedUtility.prototype.__class__ = WindSpeedUtility;
WindSpeedUtility.__cache__ = {};
Module['WindSpeedUtility'] = WindSpeedUtility;

WindSpeedUtility.prototype['windSpeedAtMidflame'] = WindSpeedUtility.prototype.windSpeedAtMidflame = /** @suppress {undefinedVars, duplicate} @this{Object} */function(windSpeedAtTwentyFeet, windAdjustmentFactor) {
  var self = this.ptr;
  if (windSpeedAtTwentyFeet && typeof windSpeedAtTwentyFeet === 'object') windSpeedAtTwentyFeet = windSpeedAtTwentyFeet.ptr;
  if (windAdjustmentFactor && typeof windAdjustmentFactor === 'object') windAdjustmentFactor = windAdjustmentFactor.ptr;
  return _emscripten_bind_WindSpeedUtility_windSpeedAtMidflame_2(self, windSpeedAtTwentyFeet, windAdjustmentFactor);
};;

WindSpeedUtility.prototype['windSpeedAtTwentyFeetFromTenMeter'] = WindSpeedUtility.prototype.windSpeedAtTwentyFeetFromTenMeter = /** @suppress {undefinedVars, duplicate} @this{Object} */function(windSpeedAtTenMeters) {
  var self = this.ptr;
  if (windSpeedAtTenMeters && typeof windSpeedAtTenMeters === 'object') windSpeedAtTenMeters = windSpeedAtTenMeters.ptr;
  return _emscripten_bind_WindSpeedUtility_windSpeedAtTwentyFeetFromTenMeter_1(self, windSpeedAtTenMeters);
};;

  WindSpeedUtility.prototype['__destroy__'] = WindSpeedUtility.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_WindSpeedUtility___destroy___0(self);
};
(function() {
  function setupEnums() {
    

    // AreaUnits_AreaUnitsEnum

    Module['SquareFeet'] = _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareFeet();

    Module['Acres'] = _emscripten_enum_AreaUnits_AreaUnitsEnum_Acres();

    Module['Hectares'] = _emscripten_enum_AreaUnits_AreaUnitsEnum_Hectares();

    Module['SquareMeters'] = _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMeters();

    Module['SquareMiles'] = _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareMiles();

    Module['SquareKilometers'] = _emscripten_enum_AreaUnits_AreaUnitsEnum_SquareKilometers();

    

    // LengthUnits_LengthUnitsEnum

    Module['Feet'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Feet();

    Module['Inches'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Inches();

    Module['Centimeters'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Centimeters();

    Module['Meters'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Meters();

    Module['Chains'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Chains();

    Module['Miles'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Miles();

    Module['Kilometers'] = _emscripten_enum_LengthUnits_LengthUnitsEnum_Kilometers();

    

    // LoadingUnits_LoadingUnitsEnum

    Module['PoundsPerSquareFoot'] = _emscripten_enum_LoadingUnits_LoadingUnitsEnum_PoundsPerSquareFoot();

    Module['TonsPerAcre'] = _emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonsPerAcre();

    Module['TonnesPerHectare'] = _emscripten_enum_LoadingUnits_LoadingUnitsEnum_TonnesPerHectare();

    Module['KilogramsPerSquareMeter'] = _emscripten_enum_LoadingUnits_LoadingUnitsEnum_KilogramsPerSquareMeter();

    

    // SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum

    Module['SquareFeetOverCubicFeet'] = _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareFeetOverCubicFeet();

    Module['SquareMetersOverCubicMeters'] = _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareMetersOverCubicMeters();

    Module['SquareInchesOverCubicInches'] = _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareInchesOverCubicInches();

    Module['SquareCentimetersOverCubicCentimers'] = _emscripten_enum_SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum_SquareCentimetersOverCubicCentimers();

    

    // CoverUnits_CoverUnitsEnum

    Module['Fraction'] = _emscripten_enum_CoverUnits_CoverUnitsEnum_Fraction();

    Module['Percent'] = _emscripten_enum_CoverUnits_CoverUnitsEnum_Percent();

    

    // SpeedUnits_SpeedUnitsEnum

    Module['FeetPerMinute'] = _emscripten_enum_SpeedUnits_SpeedUnitsEnum_FeetPerMinute();

    Module['ChainsPerHour'] = _emscripten_enum_SpeedUnits_SpeedUnitsEnum_ChainsPerHour();

    Module['MetersPerSecond'] = _emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerSecond();

    Module['MetersPerMinute'] = _emscripten_enum_SpeedUnits_SpeedUnitsEnum_MetersPerMinute();

    Module['MilesPerHour'] = _emscripten_enum_SpeedUnits_SpeedUnitsEnum_MilesPerHour();

    Module['KilometersPerHour'] = _emscripten_enum_SpeedUnits_SpeedUnitsEnum_KilometersPerHour();

    

    // ProbabilityUnits_ProbabilityUnitsEnum

    Module['Fraction'] = _emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Fraction();

    Module['Percent'] = _emscripten_enum_ProbabilityUnits_ProbabilityUnitsEnum_Percent();

    

    // MoistureUnits_MoistureUnitsEnum

    Module['Fraction'] = _emscripten_enum_MoistureUnits_MoistureUnitsEnum_Fraction();

    Module['Percent'] = _emscripten_enum_MoistureUnits_MoistureUnitsEnum_Percent();

    

    // SlopeUnits_SlopeUnitsEnum

    Module['Degrees'] = _emscripten_enum_SlopeUnits_SlopeUnitsEnum_Degrees();

    Module['Percent'] = _emscripten_enum_SlopeUnits_SlopeUnitsEnum_Percent();

    

    // DensityUnits_DensityUnitsEnum

    Module['PoundsPerCubicFoot'] = _emscripten_enum_DensityUnits_DensityUnitsEnum_PoundsPerCubicFoot();

    Module['KilogramsPerCubicMeter'] = _emscripten_enum_DensityUnits_DensityUnitsEnum_KilogramsPerCubicMeter();

    

    // HeatOfCombustionUnits_HeatOfCombustionUnitsEnum

    Module['BtusPerPound'] = _emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_BtusPerPound();

    Module['KilojoulesPerKilogram'] = _emscripten_enum_HeatOfCombustionUnits_HeatOfCombustionUnitsEnum_KilojoulesPerKilogram();

    

    // HeatSinkUnits_HeatSinkUnitsEnum

    Module['BtusPerCubicFoot'] = _emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_BtusPerCubicFoot();

    Module['KilojoulesPerCubicMeter'] = _emscripten_enum_HeatSinkUnits_HeatSinkUnitsEnum_KilojoulesPerCubicMeter();

    

    // HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum

    Module['BtusPerSquareFoot'] = _emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_BtusPerSquareFoot();

    Module['KilojoulesPerSquareMeterPerSecond'] = _emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilojoulesPerSquareMeterPerSecond();

    Module['KilowattsPerSquareMeter'] = _emscripten_enum_HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum_KilowattsPerSquareMeter();

    

    // HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum

    Module['BtusPerSquareFootPerMinute'] = _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerMinute();

    Module['BtusPerSquareFootPerSecond'] = _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_BtusPerSquareFootPerSecond();

    Module['KilojoulesPerSquareMeterPerSecond'] = _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerSecond();

    Module['KilojoulesPerSquareMeterPerMinute'] = _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilojoulesPerSquareMeterPerMinute();

    Module['KilowattsPerSquareMeter'] = _emscripten_enum_HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum_KilowattsPerSquareMeter();

    

    // FirelineIntensityUnits_FirelineIntensityUnitsEnum

    Module['BtusPerFootPerSecond'] = _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerSecond();

    Module['BtusPerFootPerMinute'] = _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_BtusPerFootPerMinute();

    Module['KilojoulesPerMeterPerSecond'] = _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerSecond();

    Module['KilojoulesPerMeterPerMinute'] = _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilojoulesPerMeterPerMinute();

    Module['KilowattsPerMeter'] = _emscripten_enum_FirelineIntensityUnits_FirelineIntensityUnitsEnum_KilowattsPerMeter();

    

    // TemperatureUnits_TemperatureUnitsEnum

    Module['Fahrenheit'] = _emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Fahrenheit();

    Module['Celsius'] = _emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Celsius();

    Module['Kelvin'] = _emscripten_enum_TemperatureUnits_TemperatureUnitsEnum_Kelvin();

    

    // TimeUnits_TimeUnitsEnum

    Module['Minutes'] = _emscripten_enum_TimeUnits_TimeUnitsEnum_Minutes();

    Module['Seconds'] = _emscripten_enum_TimeUnits_TimeUnitsEnum_Seconds();

    Module['Hours'] = _emscripten_enum_TimeUnits_TimeUnitsEnum_Hours();

    

    // ContainTactic

    Module['HeadAttack'] = _emscripten_enum_ContainTactic_HeadAttack();

    Module['RearAttack'] = _emscripten_enum_ContainTactic_RearAttack();

    

    // ContainStatus

    Module['Unreported'] = _emscripten_enum_ContainStatus_Unreported();

    Module['Reported'] = _emscripten_enum_ContainStatus_Reported();

    Module['Attacked'] = _emscripten_enum_ContainStatus_Attacked();

    Module['Contained'] = _emscripten_enum_ContainStatus_Contained();

    Module['Overrun'] = _emscripten_enum_ContainStatus_Overrun();

    Module['Exhausted'] = _emscripten_enum_ContainStatus_Exhausted();

    Module['Overflow'] = _emscripten_enum_ContainStatus_Overflow();

    Module['SizeLimitExceeded'] = _emscripten_enum_ContainStatus_SizeLimitExceeded();

    Module['TimeLimitExceeded'] = _emscripten_enum_ContainStatus_TimeLimitExceeded();

    

    // ContainFlank

    Module['LeftFlank'] = _emscripten_enum_ContainFlank_LeftFlank();

    Module['RightFlank'] = _emscripten_enum_ContainFlank_RightFlank();

    Module['BothFlanks'] = _emscripten_enum_ContainFlank_BothFlanks();

    Module['NeitherFlank'] = _emscripten_enum_ContainFlank_NeitherFlank();

    

    // IgnitionFuelBedType

    Module['PonderosaPineLitter'] = _emscripten_enum_IgnitionFuelBedType_PonderosaPineLitter();

    Module['PunkyWoodRottenChunky'] = _emscripten_enum_IgnitionFuelBedType_PunkyWoodRottenChunky();

    Module['PunkyWoodPowderDeep'] = _emscripten_enum_IgnitionFuelBedType_PunkyWoodPowderDeep();

    Module['PunkWoodPowderShallow'] = _emscripten_enum_IgnitionFuelBedType_PunkWoodPowderShallow();

    Module['LodgepolePineDuff'] = _emscripten_enum_IgnitionFuelBedType_LodgepolePineDuff();

    Module['DouglasFirDuff'] = _emscripten_enum_IgnitionFuelBedType_DouglasFirDuff();

    Module['HighAltitudeMixed'] = _emscripten_enum_IgnitionFuelBedType_HighAltitudeMixed();

    Module['PeatMoss'] = _emscripten_enum_IgnitionFuelBedType_PeatMoss();

    

    // LightningCharge

    Module['Negative'] = _emscripten_enum_LightningCharge_Negative();

    Module['Positive'] = _emscripten_enum_LightningCharge_Positive();

    Module['Unknown'] = _emscripten_enum_LightningCharge_Unknown();

    

    // SpotTreeSpecies

    Module['ENGELMANN_SPRUCE'] = _emscripten_enum_SpotTreeSpecies_ENGELMANN_SPRUCE();

    Module['DOUGLAS_FIR'] = _emscripten_enum_SpotTreeSpecies_DOUGLAS_FIR();

    Module['SUBALPINE_FIR'] = _emscripten_enum_SpotTreeSpecies_SUBALPINE_FIR();

    Module['WESTERN_HEMLOCK'] = _emscripten_enum_SpotTreeSpecies_WESTERN_HEMLOCK();

    Module['PONDEROSA_PINE'] = _emscripten_enum_SpotTreeSpecies_PONDEROSA_PINE();

    Module['LODGEPOLE_PINE'] = _emscripten_enum_SpotTreeSpecies_LODGEPOLE_PINE();

    Module['WESTERN_WHITE_PINE'] = _emscripten_enum_SpotTreeSpecies_WESTERN_WHITE_PINE();

    Module['GRAND_FIR'] = _emscripten_enum_SpotTreeSpecies_GRAND_FIR();

    Module['BALSAM_FIR'] = _emscripten_enum_SpotTreeSpecies_BALSAM_FIR();

    Module['SLASH_PINE'] = _emscripten_enum_SpotTreeSpecies_SLASH_PINE();

    Module['LONGLEAF_PINE'] = _emscripten_enum_SpotTreeSpecies_LONGLEAF_PINE();

    Module['POND_PINE'] = _emscripten_enum_SpotTreeSpecies_POND_PINE();

    Module['SHORTLEAF_PINE'] = _emscripten_enum_SpotTreeSpecies_SHORTLEAF_PINE();

    Module['LOBLOLLY_PINE'] = _emscripten_enum_SpotTreeSpecies_LOBLOLLY_PINE();

    

    // SpotFireLocation

    Module['MIDSLOPE_WINDWARD'] = _emscripten_enum_SpotFireLocation_MIDSLOPE_WINDWARD();

    Module['VALLEY_BOTTOM'] = _emscripten_enum_SpotFireLocation_VALLEY_BOTTOM();

    Module['MIDSLOPE_LEEWARD'] = _emscripten_enum_SpotFireLocation_MIDSLOPE_LEEWARD();

    Module['RIDGE_TOP'] = _emscripten_enum_SpotFireLocation_RIDGE_TOP();

    

    // SpotArrayConstants

    Module['NUM_COLS'] = _emscripten_enum_SpotArrayConstants_NUM_COLS();

    Module['NUM_FIREBRAND_ROWS'] = _emscripten_enum_SpotArrayConstants_NUM_FIREBRAND_ROWS();

    Module['NUM_SPECIES'] = _emscripten_enum_SpotArrayConstants_NUM_SPECIES();

  }
  if (runtimeInitialized) setupEnums();
  else addOnInit(setupEnums);
})();
