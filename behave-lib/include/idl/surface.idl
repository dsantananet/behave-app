interface Surface {
  void setFuelModelNumber(long fuelModelNumber);
  double getSlopeFactor();
  double getFireEccentricity();
  void setWindAdjustmentFactorCalculationMethod(WindAdjustmentFactorCalculationMethod_WindAdjustmentFactorCalculationMethodEnum windAdjustmentFactorCalculationMethod);
  double getMoistureHundredHour(MoistureUnits_MoistureUnitsEnum moistureUnits);
  long getFuelModelNumber();
  void setWindHeightInputMode(WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void setTwoFuelModelsMethod(TwoFuelModelsMethod_TwoFuelModelsMethodEnum twoFuelModelsMethod);
  double getWindDirection();
  double getHeatPerUnitArea();
  void setMoistureOneHour(double moistureOneHour, MoistureUnits_MoistureUnitsEnum moistureUnits);
  void setSlope(double slope, SlopeUnits_SlopeUnitsEnum slopeUnits);
  void setCanopyHeight(double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits);
  double getMoistureLiveWoody(MoistureUnits_MoistureUnitsEnum moistureUnits);
  boolean isAllFuelLoadZero(long fuelModelNumber);
  WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum getWindAndSpreadOrientationMode();
  double getDirectionOfMaxSpread();
  double getSpreadRateInDirectionOfInterest(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  double getEllipticalA(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime);
  double getWindSpeed(SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  void setMoistureTenHour(double moistureTenHour, MoistureUnits_MoistureUnitsEnum moistureUnits);
  double getEllipticalB(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime);
  double getReactionIntensity(HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum reactiontionIntensityUnits);
  double getAspect();
  double getMoistureLiveHerbaceous(MoistureUnits_MoistureUnitsEnum moistureUnits);
  void setMoistureLiveHerbaceous(double moistureLiveHerbaceous, MoistureUnits_MoistureUnitsEnum moistureUnits);
  boolean isUsingTwoFuelModels();
  void setUserProvidedWindAdjustmentFactor(double userProvidedWindAdjustmentFactor);
  void updateSurfaceInputsForTwoFuelModels(long firstfuelModelNumber, long secondFuelModelNumber, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, MoistureUnits_MoistureUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double firstFuelModelCoverage, CoverUnits_CoverUnitsEnum firstFuelModelCoverageUnits, TwoFuelModelsMethod_TwoFuelModelsMethodEnum twoFuelModelsMethod, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, CoverUnits_CoverUnitsEnum canopyCoverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio);
  WindHeightInputMode_WindHeightInputModeEnum getWindHeightInputMode();
  double getEllipticalC(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime);
  void setWindDirection(double windDirection);
  double getResidenceTime();
  void Surface(Surface rhs);
  void setWindAndSpreadOrientationMode(WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode);
  double getFirePerimeter(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime);
  void setAspect(double aspect);
  void setMoistureHundredHour(double moistureHundredHour, MoistureUnits_MoistureUnitsEnum moistureUnits);
  double getBulkDensity(DensityUnits_DensityUnitsEnum densityUnits);
  double getFireArea(AreaUnits_AreaUnitsEnum areaUnits, double elapsedTime);
  double getHeatSink(HeatSinkUnits_HeatSinkUnitsEnum heatSinkUnits);
  void setCrownRatio(double crownRatio);
  void initializeMembers();
  double getSlope(SlopeUnits_SlopeUnitsEnum slopeUnits);
  double calculateFlameLength(double firelineIntensity);
  void doSurfaceRunInDirectionOfInterest(double directionOfinterest);
  void setMoistureLiveWoody(double moistureLiveWoody, MoistureUnits_MoistureUnitsEnum moistureUnits);
  double getCrownRatio();
  double getCanopyHeight(LengthUnits_LengthUnitsEnum canopyHeightUnits);
  void setSecondFuelModelNumber(long secondFuelModelNumber);
  void setCanopyCover(double canopyCover, CoverUnits_CoverUnitsEnum coverUnits);
  void setWindSpeed(double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode);
  double getMoistureOneHour(MoistureUnits_MoistureUnitsEnum moistureUnits);
  void doSurfaceRunInDirectionOfMaxSpread();
  void updateSurfaceInputs(long fuelModelNumber, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, MoistureUnits_MoistureUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, CoverUnits_CoverUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio);
  double getMoistureTenHour(MoistureUnits_MoistureUnitsEnum moistureUnits);
  double getSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  double getFirelineIntensity(FirelineIntensityUnits_FirelineIntensityUnitsEnum firelineIntensityUnits);
  void setFuelModelSet(FuelModelSet fuelModelSet);
  double getFireLengthToWidthRatio();
  void setFirstFuelModelNumber(long firstFuelModelNumber);
  void setTwoFuelModelsFirstFuelModelCoverage(double firstFuelModelCoverage, CoverUnits_CoverUnitsEnum coverUnits);
  WindAdjustmentFactorCalculationMethod_WindAdjustmentFactorCalculationMethodEnum getWindAdjustmentFactorCalculationMethod();
  double getFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  void updateSurfaceInputsForPalmettoGallbery(double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, MoistureUnits_MoistureUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double ageOfRough, double heightOfUnderstory, double palmettoCoverage, double overstoryBasalArea, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, CoverUnits_CoverUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio);
  double getCanopyCover(CoverUnits_CoverUnitsEnum coverUnits);
  void updateSurfaceInputsForWesternAspen(long aspenFuelModelNumber, double aspenCuringLevel, AspenFireSeverity_AspenFireSeverityEnum aspenFireSeverity, double DBH, double moistureOneHour, double moistureTenHour, double moistureHundredHour, double moistureLiveHerbaceous, double moistureLiveWoody, MoistureUnits_MoistureUnitsEnum moistureUnits, double windSpeed, SpeedUnits_SpeedUnitsEnum windSpeedUnits, WindHeightInputMode_WindHeightInputModeEnum windHeightInputMode, double windDirection, WindAndSpreadOrientationMode_WindAndSpreadOrientationModeEnum windAndSpreadOrientationMode, double slope, SlopeUnits_SlopeUnitsEnum slopeUnits, double aspect, double canopyCover, CoverUnits_CoverUnitsEnum coverUnits, double canopyHeight, LengthUnits_LengthUnitsEnum canopyHeightUnits, double crownRatio);
  double getMidflameWindspeed();
};
