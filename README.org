#+TITLE: Behave Polylith

* Prerequisites

+ OpenJDK 17
+ [[https://clojure.org/guides/install_clojure][Clojure]]

* Getting Started

**  Emacs/CIDER

1. Pull down the repository (~git clone git@gitlab.com:sig-gis/behave-polylith~)
1. Pull down the submodules (~git submodule update --init --remote~)
1. Open ~development/user.cljs~ in Emacs
1. Start the CIDER nREPL ~cider-jack-in-clj&cljs~
1. Choose ~figwheel-main~ and ~dev~ for the front-end build.
1. Open ~http://localhost:8080~ in your browser.

* Architecture

** Polylith
This project adopts a Polylith design, which allows both a mono-repo
experience across mulitple projects.

*** What is a Polylith?
The [[https://polylith.gitbook.io/polylith/][Polylith]] project organization method attempts to marry the best parts of operating within a
single Monorepo (single source of truth, DRY code, less repos to manage), with
the benefits of having single repos for each project (customization).

The Polylith design is made up of three parts: Components, Bases, and Projects.

***  Components
This is the most basic unit for Polylith. Ideally, Components require few, if
any, dependencies. Each component always has an ~<component>.interface~
namespace, which includes the public functions that are meant to be exported
from the component. Components (ideally) are written in the Clojure Common (~*.cljc~)
format so as to be used in both CLJ and CLJS environments.

***  Bases
Bases are groups of components and other dependencies that constitute a
middle-tier of the Polylith. Bases can be project-specific, but ideally are
general enough to be used across multiple projects. Bases typically
only have a ~main.clj[sc]~ file.

***  Projects
Projects are made up of multiple bases and components. Many projects can exist
within a Polylith, which enables a great deal of customization while also
sharing components and bases across projects.

** Components Library

The projects take advantage of the [[https://gitlab.com/sig-gis/behave-components][Behave Components]] shared UI components
library. Check out the docs on the Behave Components page to learn more.

** Reagent & Re-Frame

The projects use both [[https://reagent-project.github.io/][Reagent]] and [[https://day8.github.io/re-frame][Re-Frame]] to manage application state
and application logic. Re-Frame was adopted to reduce tight coupling
between views/components and the data/actions that are used within them.

** Datalog & Datoms

The projects store data in Datoms and performs queries using the
Datalog syntax. The back-end access Datoms using [[https://github.com/replikativ/datahike][DataHike]], and the
front-end accesses Datoms through [[https://github.com/tonsky/datascript][DataScript]]. [[https://github.com/denistakeda/re-posh][Re-Posh]] is also used to
enable subscriptions on DataScript entities, reducing view logic.

* Projects
** behave
*** Schema

#+begin_src dot :results value :file projects/behave/docs/schema.png
digraph GitHub {
    graph [rankdir = "LR"]

    node [shape = record]

    Tool [label="Tools
          |{ :bp/uuid              | string }
          |{ :tool/name            | string }
          |{ :tool/order           | number }
          |{ :tool/translation-key | string }
          |{ :tool/help-key        | string }"]

    SubTool [label="Subtool
             |{ :bp/uuid                 | string }
             |{ :subtool/name            | string }
             |{ :subtool/order           | number }
             |{ :subtool/autocompute?    | boolean }
             |{ :subtool/translation-key | string }
             |{ :subtool/help-key        | string }"]

    SubToolVariable [label="Subtool-Variable
                     |{ :bp/uuid                             | string }
                     |{ :subtool-variable/io                 | keyword }
                     |{ :subtool-variable/order              | number }
                     |{ :subtool-variable/cpp-namespace-uuid | string }
                     |{ :subtool-variable/cpp-mclass         | string }
                     |{ :subtool-variable/cpp-function-uuid  | string }
                     |{ :subtool-variable/translation-key    | string }
                     |{ :subtool-variable/help-key           | string }"]

    Variable [label="Variable
              |{ :bp/uuid                         | string }
              |{ :variable/name                   | string }
              |{ :variable/bp6-label              | string }
              |{ :variable/bp6-code               | string }
              |{ :variable/kind                   | keyword}
              |{ :variable/translation-key        | string }
              |{ :variable/native-decimals        | double }
              |{ :variable/english-decimals       | double }
              |{ :variable/metric-decimals        | double }
              |{ :variable/maximum                | double }
              |{ :variable/minimum                | double }
              |{ :variable/default-value          | double }
              |{ :variable/map-units-convertible? | double }
              "]
    List [label="List
          |{ :bp/uuid               | string }
          |{ :list/name             | string }
          |{ :list/translation-key  | string }
          "]

    ListOptions [label="List-Options
                 |{ :bp/uuid                     | string }
                 |{ :list-option/name            | string }
                 |{ :list-option/default         | string }
                 |{ :list-option/value           | string }
                 |{ :list-option/order           | string }
                 |{ :list-option/translation-key | string }
                 "]

    Dimension [label="Dimension
               |{ :bp/uuid                 | string }
               |{ :dimension/name          | string }
               |{ :dimension/cpp-enum-uuid | string }
               "]

    Unit [label="Unit
          |{ :bp/uuid                   | string }
          |{ :unit/name                 | string }
          |{ :unit/short-code           | string }
          |{ :unit/system               | string }
          |{ :unit/cpp-enum-member-uuid | string }
          "]

    DomainSet [label="Domain-Set
               |{ :bp/uuid         | string }
               |{ :domain-set/name | string }
               "]

    Domain [label="Domain
            |{ :bp/uuid               | string }
            |{ :domain/name     | string }
            |{ :domain/decimals | string }
            "]

    Tool      -> SubTool         [label=":tool/subtools" taillabel=1 headlabel=N]
    SubTool   -> SubToolVariable [label=":subtool/variables" taillabel=1 headlabel=N]
    Variable  -> SubToolVariable [label=":variable/subtool-variables" taillabel=1 headlabel=N]
    Variable  -> List            [label=":variable/list" taillabel=1 headlabel=1]
    Variable  -> Domain          [label=":variable/domain-uuid" taillabel=1 headlabel=1]
    Variable  -> Unit            [label=":variable/native-unit-uuid" taillabel=1 headlabel=1]
    Variable  -> Unit            [label=":variable/english-unit-uuid" taillabel=1 headlabel=1]
    Variable  -> Unit            [label=":variable/metric-unit-uuid" taillabel=1 headlabel=1]
    List      -> ListOptions     [label=":list/options" taillabel=1 headlabel=N]
    Dimension -> Unit            [label=":dimension/units" taillabel=1 headlabel=N]
    DomainSet -> Domain          [label=":domain-set/domains" taillabel=1 headlabel=N]
    Domain    -> Dimension       [label=":domain/dimension-uuid" taillabel=1 headlabel=1]
    Domain    -> Unit            [label=":domain/native-unit-uuid" taillabel=1 headlabel=1]
    Domain    -> Unit            [label=":domain/english-unit-uuid" taillabel=1 headlabel=1]
    Domain    -> Unit            [label=":domain/metric-unit-uuid" taillabel=1 headlabel=1]
}
#+end_src

#+RESULTS:
[[file:projects/behave/docs/schema.png]]

*** Building the Behave UberJAR

1. Navigate to ~projects/behave~. All paths described here will use this directory as root.

2. Add/edit the ~resources/config.edn~ for your deployment. Below is
   an example file:

#+BEGIN_SRC clojure
;; resources/config.edn
{:database {:config {:store {:backend :file
                             :path    "~/.behave/db"}}}
 :site     {:title       "BehavePlus 7"
            :description "Wildfire Analysis toolkit."}
 :server   {:http-port 8007
            :mode      "prod"}
 :vms      {:secret-token "<vms-secret-token>"}}
#+END_SRC

3. Compile ClojureScript

#+BEGIN_SRC bash
bb build-js
#+END_SRC

4. Build the UberJAR

NOTE: The uberjar build process requires triangulum to be available in the deps.edn located at the
user level (i.e. /home/<user>//.clojure/deps.edn).

#+begin_src clojure
{sig-gis/triangulum {:git/url "https://github.com/sig-gis/triangulum"
                     :sha     "<latest-sha>"}}
#+end_src

#+BEGIN_SRC bash
bb uber
#+END_SRC

4. Congratulations! You're now the owner of an UberJAR.
   (i.e. ~target/behave7-2023.10.19-97f1ef9-standalone.jar~)

** behave_cms
