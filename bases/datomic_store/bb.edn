{:tasks
 {:requires ([babashka.cli     :as cli]
             [babashka.fs      :as fs]
             [babashka.process :refer [shell]]
             [clojure.java.io  :as io])

  -today     (str (java.time.LocalDate/now))

  dump       {:depends [-today]
              :task    (shell (format "pg_dump -U datomic datomic -Fc --file=datomic-backup-%s.dump" -today))}

  restore    {:depends [-today]
              :task
              (let [db-dump (:file (cli/parse-opts *command-line-args*))]
                (shell "psql -U datomic -d datomic -c 'DROP TABLE IF EXISTS datomic_kvs'")
                (shell (format "pg_restore -U datomic -d datomic %s" db-dump)))}

  -datomic   (str (io/file (str (fs/home)) ".datomic" "current" "bin"))
  transactor {:depends [-datomic]
              :task
              (let [transactor (io/file -datomic "transactor")
                    options    "-Ddatomic.printConnectionInfo=true"
                    config     (str (fs/cwd) "/config/datomic-sql.properties")]
                (shell
                 (format "%s %s %s" transactor options config)))}

  console    {:depends [-datomic]
              :task
              (let [console (io/file -datomic "console")
                    port    (or (:port (cli/parse-opts *command-line-args* {:coerce {:port :int}})) 8000)
                    url     "datomic:sql://?jdbc:postgresql://localhost:5432/datomic?user=datomic&password=datomic"]
                (shell (format "%s -p %d db %s" console port url)))}}}
