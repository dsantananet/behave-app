name: Build and Sign JAR

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Java/Clojure CLI
        id: cache-java-clj
        uses: actions/cache@v4
        with:
          path: |
            /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/
            /tmp/usr/local/opt/ClojureTools/
          key: ${{ runner.os }}-clojure-cli-1-12
          restore-keys: |
            ${{ runner.os }}-clojure-cli

      - name: Prepare Java/Clojure CLI
        if: ${{ steps.cache-java-clj.outputs.hit == 'true' }}
        run: |
          ls /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/
          ls /tmp/usr/local/opt/ClojureTools/
          export PATH=/tmp/usr/local/opt/ClojureTools/bin:$PATH
          export PATH=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/21.0.6-7/x64/bin:$PATH
          echo $PATH

      - name: Cache Babashka
        id: cache-babashka
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/Babashka
          key: ${{ runner.os }}-babashka-1-3-189
          restore-keys: |
            ${{ runner.os }}-babashka

      - name: Prepare Babashka
        if: ${{ steps.cache-babashka.outputs.hit == 'true' }}
        run: |
          export PATH=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/bin:$PATH
          echo $PATH

      - name: Cache project dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure

      - name: Prepare java
        uses: actions/setup-java@v4
        if: ${{ steps.cache-java-clj.outputs.hit != 'true' }} 
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@13.1
        if: ${{ steps.cache-java-clj.outputs.hit != 'true' }}
        with:
          cli: '1.12.0.1530'

      - name: Setup Babashka
        uses: turtlequeue/setup-babashka@v1.7.0
        if: ${{ steps.cache-babashka.outputs.hit != 'true' }}
        with:
          babashka-version: 1.3.189

      - name: Set the version
        run: |
          VERSION=$(echo ${{ github.ref }} | sed -e 's/refs\/tags\///g')
          echo "version=$VERSION" >> "$GITHUB_ENV"

      - name: Set the date
        run: |
          DATE=$( echo $(date '+%Y-%m-%d'))
          echo "date=$DATE" >> "$GITHUB_ENV"

      - name: Set release name
        run: |
          RELEASE=$(echo "$version ($date)")
          echo "release=$RELEASE" >> "$GITHUB_ENV"

      - name: Build JAR
        env:
          VMS_URL: ${{ secrets.VMS_URL }}
          VMS_AUTH_TOKEN: ${{ secrets.VMS_SECRET_TOKEN }}
        run: |
          cd projects/behave
          clojure -X:download-vms :url "$VMS_URL" :auth-token "$VMS_AUTH_TOKEN"
          bb build-js
          mv resources/config.standalone.edn resources/config.edn
          echo "{:version $version}" > resources/version.edn
          bb uber

      - name: Verify assets
        run: ls -l projects/behave/target/*.jar

      # - name: Rename Jar
      #   run: |
      #     cd projects/behave/target
      #     mv $(ls *.jar) behave-$version.jar

      - name: Sign JAR
        uses: addnab/docker-run-action@v3
        with:
          image: rjsheperd/jarsigner:latest
          shell: bash
          options: |
            -e SM_API_KEY=${{ secrets.SM_API_KEY }}
            -e SM_KEYPAIR=${{ secrets.SM_KEYPAIR }}
            -e SM_HOST=${{ secrets.SM_HOST }}
            -e SM_CLIENT_CERT_FILE_BASE_64=${{ secrets.SM_CLIENT_CERT_FILE_BASE_64 }}
            -e SM_CLIENT_CERT_PASSWORD=${{secrets.SM_CLIENT_CERT_PASSWORD }}
            -v ${{ github.workspace }}:/app/code
          run: |
            # Decode cert
            echo $SM_CLIENT_CERT_FILE_BASE_64 | base64 -d > behave.p12
            export SM_CLIENT_CERT_FILE=/app/behave.p12

            # Get JAR file
            JAR=$(ls /app/code/projects/behave/target/*.jar)
            echo $JAR

            # Sign JAR
            ./sign.sh $JAR

    #  - uses: ncipollo/release-action@v1
    #    with:
    #      name: ${{ env.release }}
    #      artifacts: "projects/behave/target/*.jar"
    #      artifactContentType: "application/java-archive"
    #      tag: ${{ github.ref }}
    #      makeLatest: true
